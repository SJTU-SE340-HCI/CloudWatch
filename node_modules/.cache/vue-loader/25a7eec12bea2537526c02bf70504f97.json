{"remainingRequest":"D:\\HCI\\github\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\HCI\\github\\src\\components\\record.vue?vue&type=style&index=0&id=be0ab43e&lang=stylus&scoped=true&","dependencies":[{"path":"D:\\HCI\\github\\src\\components\\record.vue","mtime":1593418846938},{"path":"D:\\HCI\\github\\node_modules\\css-loader\\index.js","mtime":1589122692960},{"path":"D:\\HCI\\github\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1589122702781},{"path":"D:\\HCI\\github\\node_modules\\postcss-loader\\src\\index.js","mtime":1589122698492},{"path":"D:\\HCI\\github\\node_modules\\stylus-loader\\index.js","mtime":1589122702034},{"path":"D:\\HCI\\github\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589122691350},{"path":"D:\\HCI\\github\\node_modules\\vue-loader\\lib\\index.js","mtime":1589122702780}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.container{\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n",{"version":3,"sources":["record.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8GA;AACA;AACA;AACA","file":"record.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <el-button type=\"primary\"  @click=\"beginRecord\" v-if=\"!isRecording\" >录制</el-button>\r\n    <el-button type=\"primary\"  @click=\"finishRecord\" v-else>结束录制</el-button>\r\n    <el-button type=\"primary\" @click=\"presentRecord\" v-if=\"!isPresenting\">回放</el-button>\r\n    <el-button type=\"primary\"  @click=\"finishPresent\" v-else>结束回放</el-button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nexport default {\r\n    data() {\r\n        return {\r\n            isPresenting: false,\r\n            isRecording:false,\r\n            recordedBarrages: new Map()\r\n        }\r\n    },\r\n    methods: {\r\n        beginRecord() {\r\n            this.isRecording=true\r\n            /*\r\n            将开始时间存入vuex\r\n            将录制中状态存入vuex，让弹幕发送时将弹幕信息存入vuex\r\n            开始就自动打开连麦按钮，用户可以选择关闭\r\n            */\r\n            this.$store.commit('setRecordState',true)\r\n            this.$store.commit('setBeginRecordTime')\r\n            this.$store.commit('clearBarrage')\r\n            /*if(this.recordVoice) {\r\n                this.recordVoice(true)\r\n            }*/\r\n        },\r\n        finishRecord() {\r\n            this.isRecording=false\r\n            \r\n            /* 停止录制结束连麦 */\r\n            this.$store.commit('setRecordState',false)\r\n            /*if(this.recordVoice) {\r\n                this.recordVoice(false)\r\n            }*/\r\n\r\n            // 将vuex中的弹幕消息发送到后端\r\n            axios({\r\n            method: 'post',\r\n            url: 'http://47.103.30.166:8020/Room/textRecord/Receive',\r\n            headers: {}, \r\n            params: {\r\n                video_id: this.$store.getters.getCurrentVideoId\r\n            },\r\n            data: this.$store.getters.getBarrages\r\n            })\r\n        },\r\n\r\n        presentRecord() {\r\n            /*\r\n            从后端拿到弹幕消息\r\n            根据当前开始的时间轮询弹幕消息的队列\r\n            */\r\n            this.isPresenting=true\r\n            var videoid = new Number(this.$store.getters.getCurrentVideoId)\r\n            axios\r\n            .get('http://47.103.30.166:8020/Room/textRecord/findByVideoId', {\r\n            params: {\r\n               video_id: videoid\r\n            }\r\n            })\r\n            .then(res => {\r\n            this.recordedBarrages = res.data\r\n            }\r\n            )\r\n\r\n            // 轮询\r\n            const timeId = setInterval(() => {\r\n                if (this.isPresenting == false) {\r\n                clearInterval(timeId)\r\n                }\r\n                this.sendReadyBarrage()\r\n            },1000)\r\n        },\r\n\r\n        finishPresent() {\r\n            this.isPresenting=false\r\n        },\r\n\r\n        sendReadyBarrage() {\r\n            Object.entries(this.recordedBarrages).map((key, value) => {\r\n                    var barrageTime = Number(key[0])+ Number(this.$store.getters.getRecordingBeginTime)\r\n                    var cur=Date.now()\r\n                    if( barrageTime>= cur && barrageTime<cur+1000)\r\n                    {\r\n                        console.log('hit')\r\n                        console.log(barrageTime, cur)\r\n                        console.log(key[1])\r\n                        this.$parent.sendBarrage(key[1])\r\n                    }\r\n            })\r\n        },\r\n\r\n        beginVoiceCommunicate() {\r\n            this.$refs.VoiceCommunicate.createClient()\r\n        }\r\n\r\n\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang='stylus' scoped>\r\n.container{\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n</style>"]}]}