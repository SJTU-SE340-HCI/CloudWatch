{"remainingRequest":"/Users/liuzhengwei/SJTU/HCI/CloudWatch/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liuzhengwei/SJTU/HCI/CloudWatch/src/components/record.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liuzhengwei/SJTU/HCI/CloudWatch/src/components/record.vue","mtime":1593571631719},{"path":"/Users/liuzhengwei/SJTU/HCI/CloudWatch/node_modules/cache-loader/dist/cjs.js","mtime":1589115288536},{"path":"/Users/liuzhengwei/SJTU/HCI/CloudWatch/node_modules/babel-loader/lib/index.js","mtime":1589115288422},{"path":"/Users/liuzhengwei/SJTU/HCI/CloudWatch/node_modules/cache-loader/dist/cjs.js","mtime":1589115288536},{"path":"/Users/liuzhengwei/SJTU/HCI/CloudWatch/node_modules/vue-loader/lib/index.js","mtime":1589115292369}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios'\nimport {Howl, Howler} from 'howler';\nexport default {\n    data() {\n        return {\n            isPresenting: false,\n            isRecording:false,\n            recordedBarrages: new Map(),\n            recordedVoices: []\n        }\n    },\n    methods: {\n        beginRecord() {\n            this.isRecording=true\n            /*\n            将开始时间存入vuex\n            将录制中状态存入vuex，让弹幕发送时将弹幕信息存入vuex\n            开始就自动打开连麦按钮，用户可以选择关闭\n            */\n            this.$store.commit('setRecordState',true)\n            this.$store.commit('setBeginRecordTime')\n            this.$store.commit('clearBarrage')\n            /*if(this.recordVoice) {\n                this.recordVoice(true)\n            }*/\n        },\n        finishRecord() {\n            this.isRecording=false\n            \n            /* 停止录制结束连麦 */\n            this.$store.commit('setRecordState',false)\n            /*if(this.recordVoice) {\n                this.recordVoice(false)\n            }*/\n\n            // 将vuex中的弹幕消息发送到后端\n            axios({\n            method: 'post',\n            url: 'http://47.103.30.166:8020/Room/textRecord/Receive',\n            headers: {}, \n            params: {\n                video_id: this.$store.getters.getCurrentVideoId\n            },\n            data: this.$store.getters.getBarrages\n            })\n        },\n\n        presentRecord() {\n            this.isPresenting=true\n            // 从后端拿到弹幕消息\n            var videoid = new Number(this.$store.getters.getCurrentVideoId)\n            axios\n            .get('http://47.103.30.166:8020/Room/textRecord/findByVideoId', {\n            params: {\n               video_id: videoid\n            }\n            })\n            .then(res => {\n              this.recordedBarrages = res.data\n              console.log(this.recordedBarrages)\n            })\n\n            // 从后端拿到聊天音频\n            axios.get('http://47.103.30.166:8020/Room/voiceRecord/findPreviousRecord', {\n                params:{\n                    room_id: this.$store.state.currentRoomId\n                }\n            })\n            .then(res => {\n                this.recordedVoices=res.data\n                console.log(this.recordedVoices)\n            })\n\n            if (this.$store.state.currentRoomId=='667'){\n            // backend only keep the latest voice record, only one\n                var sound =  new Howl({\n                  //src: 'http://1301703207.vod2.myqcloud.com/e0ee959avodcq1301703207/78b6c3ee5285890804744856150/f0.aac',\n\n                    src: 'http://1301703207.vod2.myqcloud.com/e0ee959avodcq1301703207/4e624dbe5285890804757979147/f0.aac',\n                    html5: true, // A live stream can only be played through HTML5 Audio.\n                    format: ['mp3', 'aac']\n                });\n                \n                // Begin playing the sound.\n                sound.play()\n            }\n\n            // 根据当前开始的时间轮询弹幕消息的队列\n            const timeId = setInterval(() => {\n                if (this.isPresenting == false) {\n                clearInterval(timeId)\n                }\n                this.sendReadyBarrage()\n            },1000)\n        },\n\n        finishPresent() {\n            this.isPresenting=false\n        },\n\n        sendReadyBarrage() {\n            Object.entries(this.recordedBarrages).map((key, value) => {\n                    var barrageTime = Number(key[0])+ Number(this.$store.getters.getRecordingBeginTime)\n                    var cur=Date.now()\n                    if( barrageTime>= cur && barrageTime<cur+1000)\n                    {\n                        console.log('hit')\n                        console.log(barrageTime, cur)\n                        console.log(key[1])\n                        this.$parent.sendBarrage(key[1])\n                    }\n            })\n        },\n\n        beginVoiceCommunicate() {\n            this.$refs.VoiceCommunicate.createClient()\n        }\n\n\n    }\n}\n",{"version":3,"sources":["record.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA","file":"record.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"container\">\n    <el-button type=\"primary\"  @click=\"beginRecord\" v-if=\"!isRecording\" >录制</el-button>\n    <el-button type=\"primary\"  @click=\"finishRecord\" v-else>结束录制</el-button>\n    <el-button type=\"primary\" @click=\"presentRecord\" v-if=\"!isPresenting\">回放</el-button>\n    <el-button type=\"primary\"  @click=\"finishPresent\" v-else>结束回放</el-button>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport {Howl, Howler} from 'howler';\nexport default {\n    data() {\n        return {\n            isPresenting: false,\n            isRecording:false,\n            recordedBarrages: new Map(),\n            recordedVoices: []\n        }\n    },\n    methods: {\n        beginRecord() {\n            this.isRecording=true\n            /*\n            将开始时间存入vuex\n            将录制中状态存入vuex，让弹幕发送时将弹幕信息存入vuex\n            开始就自动打开连麦按钮，用户可以选择关闭\n            */\n            this.$store.commit('setRecordState',true)\n            this.$store.commit('setBeginRecordTime')\n            this.$store.commit('clearBarrage')\n            /*if(this.recordVoice) {\n                this.recordVoice(true)\n            }*/\n        },\n        finishRecord() {\n            this.isRecording=false\n            \n            /* 停止录制结束连麦 */\n            this.$store.commit('setRecordState',false)\n            /*if(this.recordVoice) {\n                this.recordVoice(false)\n            }*/\n\n            // 将vuex中的弹幕消息发送到后端\n            axios({\n            method: 'post',\n            url: 'http://47.103.30.166:8020/Room/textRecord/Receive',\n            headers: {}, \n            params: {\n                video_id: this.$store.getters.getCurrentVideoId\n            },\n            data: this.$store.getters.getBarrages\n            })\n        },\n\n        presentRecord() {\n            this.isPresenting=true\n            // 从后端拿到弹幕消息\n            var videoid = new Number(this.$store.getters.getCurrentVideoId)\n            axios\n            .get('http://47.103.30.166:8020/Room/textRecord/findByVideoId', {\n            params: {\n               video_id: videoid\n            }\n            })\n            .then(res => {\n              this.recordedBarrages = res.data\n              console.log(this.recordedBarrages)\n            })\n\n            // 从后端拿到聊天音频\n            axios.get('http://47.103.30.166:8020/Room/voiceRecord/findPreviousRecord', {\n                params:{\n                    room_id: this.$store.state.currentRoomId\n                }\n            })\n            .then(res => {\n                this.recordedVoices=res.data\n                console.log(this.recordedVoices)\n            })\n\n            if (this.$store.state.currentRoomId=='667'){\n            // backend only keep the latest voice record, only one\n                var sound =  new Howl({\n                  //src: 'http://1301703207.vod2.myqcloud.com/e0ee959avodcq1301703207/78b6c3ee5285890804744856150/f0.aac',\n\n                    src: 'http://1301703207.vod2.myqcloud.com/e0ee959avodcq1301703207/4e624dbe5285890804757979147/f0.aac',\n                    html5: true, // A live stream can only be played through HTML5 Audio.\n                    format: ['mp3', 'aac']\n                });\n                \n                // Begin playing the sound.\n                sound.play()\n            }\n\n            // 根据当前开始的时间轮询弹幕消息的队列\n            const timeId = setInterval(() => {\n                if (this.isPresenting == false) {\n                clearInterval(timeId)\n                }\n                this.sendReadyBarrage()\n            },1000)\n        },\n\n        finishPresent() {\n            this.isPresenting=false\n        },\n\n        sendReadyBarrage() {\n            Object.entries(this.recordedBarrages).map((key, value) => {\n                    var barrageTime = Number(key[0])+ Number(this.$store.getters.getRecordingBeginTime)\n                    var cur=Date.now()\n                    if( barrageTime>= cur && barrageTime<cur+1000)\n                    {\n                        console.log('hit')\n                        console.log(barrageTime, cur)\n                        console.log(key[1])\n                        this.$parent.sendBarrage(key[1])\n                    }\n            })\n        },\n\n        beginVoiceCommunicate() {\n            this.$refs.VoiceCommunicate.createClient()\n        }\n\n\n    }\n}\n</script>\n\n<style lang='stylus' scoped>\n.container{\n    width: 100%;\n    height: 100%;\n  }\n</style>"]}]}