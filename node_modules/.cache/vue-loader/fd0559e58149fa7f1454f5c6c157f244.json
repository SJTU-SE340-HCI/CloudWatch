{"remainingRequest":"/Users/liuzhengwei/Downloads/TIMSDK/H5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liuzhengwei/Downloads/TIMSDK/H5/src/components/conversation/conversation-item.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liuzhengwei/Downloads/TIMSDK/H5/src/components/conversation/conversation-item.vue","mtime":1587787014081},{"path":"/Users/liuzhengwei/Downloads/TIMSDK/H5/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/liuzhengwei/Downloads/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuzhengwei/Downloads/TIMSDK/H5/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters, mapState } from 'vuex'\nimport { isToday, getDate, getTime } from '../../utils/date'\nexport default {\n  name: 'conversation-item',\n  props: ['conversation'],\n  data() {\n    return {\n      popoverVisible: false,\n      hasMessageAtMe: false\n    }\n  },\n  computed: {\n    showUnreadCount() {\n      if (this.$store.getters.hidden) {\n        return this.conversation.unreadCount > 0\n      }\n      // 是否显示未读计数。当前会话和未读计数为0的会话，不显示。\n      return (\n        this.currentConversation.conversationID !==\n          this.conversation.conversationID && this.conversation.unreadCount > 0\n      )\n    },\n    date() {\n      if (\n        !this.conversation.lastMessage ||\n        !this.conversation.lastMessage.lastTime\n      ) {\n        return ''\n      }\n      const date = new Date(this.conversation.lastMessage.lastTime * 1000)\n      if (isToday(date)) {\n        return getTime(date)\n      }\n      return getDate(date)\n    },\n    avatar: function() {\n      switch (this.conversation.type) {\n        case 'GROUP':\n          return this.conversation.groupProfile.avatar\n        case 'C2C':\n          return this.conversation.userProfile.avatar\n        default:\n          return ''\n      }\n    },\n    conversationName: function() {\n      if (this.conversation.type === this.TIM.TYPES.CONV_C2C) {\n        return this.conversation.userProfile.nick || this.conversation.userProfile.userID\n      }\n      if (this.conversation.type === this.TIM.TYPES.CONV_GROUP) {\n        return this.conversation.groupProfile.name || this.conversation.groupProfile.groupID\n      }\n      if (this.conversation.type === this.TIM.TYPES.CONV_SYSTEM) {\n        return '系统通知'\n      }\n      return ''\n    },\n    showGrayBadge() {\n      if (this.conversation.type !== this.TIM.TYPES.CONV_GROUP) {\n        return false\n      }\n      return (\n        this.conversation.groupProfile.selfInfo.messageRemindType ===\n        'AcceptNotNotify'\n      )\n    },\n    messageForShow() {\n      if (this.conversation.lastMessage.isRevoked) {\n        if (this.conversation.lastMessage.fromAccount === this.currentUserProfile.userID) {\n          return '你撤回了一条消息'\n        }\n        if (this.conversation.type === this.TIM.TYPES.CONV_C2C) {\n          return '对方撤回了一条消息'\n        }\n        return `${this.conversation.lastMessage.fromAccount}撤回了一条消息`\n      }\n      return this.conversation.lastMessage.messageForShow\n    },\n    ...mapState({\n      currentConversation: state => state.conversation.currentConversation,\n      currentUserProfile: state => state.user.currentUserProfile\n    }),\n    ...mapGetters(['toAccount'])\n  },\n  mounted() {\n    this.$bus.$on('new-messsage-at-me', event => {\n      if (\n        event.data.conversationID === this.conversation.conversationID &&\n        this.conversation.conversationID !==\n          this.currentConversation.conversationID\n      ) {\n        this.hasMessageAtMe = true\n      }\n    })\n  },\n  methods: {\n    selectConversation() {\n      if (this.conversation.conversationID !== this.currentConversation.conversationID) {\n        this.$store.dispatch(\n          'checkoutConversation',\n          this.conversation.conversationID\n        )\n      }\n    },\n    deleteConversation(event) {\n      // 停止冒泡，避免和点击会话的事件冲突\n      event.stopPropagation()\n      this.tim\n        .deleteConversation(this.conversation.conversationID)\n        .then(() => {\n          this.$store.commit('showMessage', {\n            message: `会话【${this.conversationName}】删除成功!`,\n            type: 'success'\n          })\n          this.popoverVisible = false\n          this.$store.commit('resetCurrentConversation')\n        })\n        .catch(error => {\n          this.$store.commit('showMessage', {\n            message: `会话【${this.conversationName}】删除失败!, error=${error.message}`,\n            type: 'error'\n          })\n          this.popoverVisible = false\n        })\n    },\n    showContextMenu() {\n      this.popoverVisible = true\n    },\n  },\n  watch: {\n    currentConversation(next) {\n      if (next.conversationID === this.conversation.conversationID) {\n        this.hasMessageAtMe = false\n      }\n    }\n  }\n}\n",null]}