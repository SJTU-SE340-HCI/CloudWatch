{"remainingRequest":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/run/media/gz/G/c2020spring/hci/project/FrontEnd/src/components/conversation/current-conversation.vue?vue&type=script&lang=js&","dependencies":[{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/src/components/conversation/current-conversation.vue","mtime":1588990158992},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1588990144242},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1588990144497},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1588990158440}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters, mapState } from 'vuex'\nimport MessageSendBox from '../message/message-send-box'\nimport MessageItem from '../message/message-item'\nimport ConversationProfile from './conversation-profile.vue'\nimport MemberProfileCard from '../group/member-profile-card'\nexport default {\n  name: 'CurrentConversation',\n  components: {\n    MessageSendBox,\n    MessageItem,\n    ConversationProfile,\n    MemberProfileCard\n  },\n  data() {\n    return {\n      isShowScrollButtomTips: false,\n      preScrollHeight: 0,\n      showConversationProfile: false,\n      timeout: ''\n    }\n  },\n  computed: {\n    ...mapState({\n      currentConversation: state => state.conversation.currentConversation,\n      currentUnreadCount: state => state.conversation.currentConversation.unreadCount,\n      currentMessageList: state => state.conversation.currentMessageList,\n      isCompleted: state => state.conversation.isCompleted\n    }),\n    ...mapGetters(['toAccount', 'hidden']),\n    // 是否显示当前会话组件\n    showCurrentConversation() {\n      return !!this.currentConversation.conversationID\n    },\n    name() {\n      if (this.currentConversation.type === 'C2C') {\n        return this.currentConversation.userProfile.nick || this.toAccount\n      } else if (this.currentConversation.type === 'GROUP') {\n        return this.currentConversation.groupProfile.name || this.toAccount\n      } else if (this.currentConversation.conversationID === '@TIM#SYSTEM') {\n        return '系统通知'\n      }\n      return this.toAccount\n    },\n    showMessageSendBox() {\n      return this.currentConversation.type !== this.TIM.TYPES.CONV_SYSTEM\n    }\n  },\n  mounted() {\n    this.$bus.$on('image-loaded', this.onImageLoaded)\n    this.$bus.$on('scroll-bottom', this.scrollMessageListToButtom)\n    if (this.currentConversation.conversationID === '@TIM#SYSTEM') {\n      return false\n    }\n  },\n  updated() {\n    this.keepMessageListOnButtom()\n    // 1. 系统会话隐藏右侧资料组件\n    // 2. 没有当前会话时，隐藏右侧资料组件。\n    //    背景：退出群组/删除会话时，会出现一处空白区域\n    if (this.currentConversation.conversationID === '@TIM#SYSTEM' || \n        typeof this.currentConversation.conversationID === 'undefined') {\n      this.showConversationProfile = false\n    }\n  },\n  watch: {\n    currentUnreadCount(next) {\n      if (!this.hidden && next > 0) {\n        this.tim.setMessageRead({ conversationID: this.currentConversation.conversationID })\n      }\n    },\n    hidden(next) {\n      if (!next && this.currentUnreadCount > 0) {\n        this.tim.setMessageRead({ conversationID: this.currentConversation.conversationID })\n      }\n    }\n  },\n  methods: {\n    onScroll({ target: { scrollTop } }) {\n      let messageListNode = this.$refs['message-list']\n      if (!messageListNode) {\n        return\n      }\n      if (this.preScrollHeight - messageListNode.clientHeight - scrollTop < 20) {\n        this.isShowScrollButtomTips = false\n      }\n    },\n    // 如果滚到底部就保持在底部，否则提示是否要滚到底部\n    keepMessageListOnButtom() {\n      let messageListNode = this.$refs['message-list']\n      if (!messageListNode) {\n        return\n      }\n      // 距离底部20px内强制滚到底部,否则提示有新消息\n      if (this.preScrollHeight - messageListNode.clientHeight - messageListNode.scrollTop < 20) {\n        this.$nextTick(() => {\n          messageListNode.scrollTop = messageListNode.scrollHeight\n        })\n        this.isShowScrollButtomTips = false\n      } else {\n        this.isShowScrollButtomTips = true\n      }\n      this.preScrollHeight = messageListNode.scrollHeight\n    },\n    // 直接滚到底部\n    scrollMessageListToButtom() {\n      this.$nextTick(() => {\n        let messageListNode = this.$refs['message-list']\n        if (!messageListNode) {\n          return\n        }\n        messageListNode.scrollTop = messageListNode.scrollHeight\n        this.preScrollHeight = messageListNode.scrollHeight\n        this.isShowScrollButtomTips = false\n      })\n    },\n    showMore() {\n      this.showConversationProfile = !this.showConversationProfile\n    },\n    onImageLoaded() {\n      this.keepMessageListOnButtom()\n    }\n  }\n}\n",null]}