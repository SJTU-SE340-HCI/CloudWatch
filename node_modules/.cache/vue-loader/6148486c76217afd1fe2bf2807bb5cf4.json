{"remainingRequest":"/Users/liuzhengwei/Downloads/TIMSDK/H5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liuzhengwei/Downloads/TIMSDK/H5/src/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liuzhengwei/Downloads/TIMSDK/H5/src/index.vue","mtime":1587782662462},{"path":"/Users/liuzhengwei/Downloads/TIMSDK/H5/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/liuzhengwei/Downloads/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuzhengwei/Downloads/TIMSDK/H5/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { Notification } from 'element-ui'\nimport { mapState } from 'vuex'\nimport CurrentConversation from './components/conversation/current-conversation'\nimport SideBar from './components/layout/side-bar'\nimport Login from './components/user/login'\nimport ImagePreviewer from './components/message/image-previewer.vue'\nimport { translateGroupSystemNotice } from './utils/common'\nimport CallLayer from './components/message/call-layer'\nimport { ACTION } from './utils/trtcCustomMessageMap'\nimport MTA from './utils/mta'\n\n\nexport default {\n  title: 'TIMSDK DEMO',\n  components: {\n    Login,\n    SideBar,\n    CurrentConversation,\n    ImagePreviewer,\n    CallLayer,\n  },\n\n  computed: {\n    ...mapState({\n      currentUserProfile: state => state.user.currentUserProfile,\n      currentConversation: state => state.conversation.currentConversation,\n      isLogin: state => state.user.isLogin,\n      isSDKReady: state => state.user.isSDKReady,\n      isBusy: state => state.video.isBusy,\n      userID: state => state.user.userID\n    }),\n    // 是否显示 Loading 状态\n    showLoading() {\n      return !this.isSDKReady\n    }\n  },\n\n  mounted() {\n    // 初始化监听器\n    this.initListener()\n  },\n\n  watch: {\n    isLogin(next) {\n      if (next) {\n        MTA.clickStat('link_two', { show: 'true' })\n      }\n    }\n  },\n\n  methods: {\n    initListener() {\n      // 登录成功后会触发 SDK_READY 事件，该事件触发后，可正常使用 SDK 接口\n      this.tim.on(this.TIM.EVENT.SDK_READY, this.onReadyStateUpdate, this)\n      // SDK NOT READT\n      this.tim.on(this.TIM.EVENT.SDK_NOT_READY, this.onReadyStateUpdate, this)\n      // 被踢出\n      this.tim.on(this.TIM.EVENT.KICKED_OUT, this.onKickOut)\n      // SDK内部出错\n      this.tim.on(this.TIM.EVENT.ERROR, this.onError)\n      // 收到新消息\n      this.tim.on(this.TIM.EVENT.MESSAGE_RECEIVED, this.onReceiveMessage)\n      // 会话列表更新\n      this.tim.on(this.TIM.EVENT.CONVERSATION_LIST_UPDATED, this.onUpdateConversationList)\n      // 群组列表更新\n      this.tim.on(this.TIM.EVENT.GROUP_LIST_UPDATED, this.onUpdateGroupList)\n      // 收到新的群系统通知\n      this.tim.on(this.TIM.EVENT.GROUP_SYSTEM_NOTICE_RECEIVED, this.onReceiveGroupSystemNotice)\n    },\n    onReceiveMessage({ data: messageList }) {\n      this.handleVideoMessage(messageList)\n      this.handleAt(messageList)\n      this.handleQuitGroupTip(messageList)\n      this.$store.commit('pushCurrentMessageList', messageList)\n    },\n    onError({ data }) {\n      if (data.message !== 'Network Error') {\n        this.$store.commit('showMessage', {\n          message: data.message,\n          type: 'error'\n        })\n      }\n    },\n    onReadyStateUpdate({ name }) {\n      const isSDKReady = name === this.TIM.EVENT.SDK_READY ? true : false\n      this.$store.commit('toggleIsSDKReady', isSDKReady)\n\n      if (isSDKReady) {\n        this.tim\n          .getMyProfile()\n          .then(({ data }) => {\n            this.$store.commit('updateCurrentUserProfile', data)\n          })\n          .catch(error => {\n            this.$store.commit('showMessage', {\n              type: 'error',\n              message: error.message\n            })\n          })\n        this.$store.dispatch('getBlacklist')\n      }\n    },\n    kickedOutReason(type) {\n      switch (type) {\n        case this.TIM.TYPES.KICKED_OUT_MULT_ACCOUNT:\n          return '由于多实例登录'\n        case this.TIM.TYPES.KICKED_OUT_MULT_DEVICE:\n          return '由于多设备登录'\n        case this.TIM.TYPES.KICKED_OUT_USERSIG_EXPIRED:\n          return '由于 userSig 过期'\n        default:\n          return ''\n      }\n    },\n    onKickOut(event) {\n      this.$store.commit('showMessage', {\n        message: `${this.kickedOutReason(event.data.type)}被踢出，请重新登录。`,\n        type: 'error'\n      })\n      this.$store.commit('toggleIsLogin', false)\n      this.$store.commit('reset')\n    },\n    onUpdateConversationList(event) {\n      this.$store.commit('updateConversationList', event.data)\n    },\n    onUpdateGroupList(event) {\n      this.$store.commit('updateGroupList', event.data)\n    },\n    onReceiveGroupSystemNotice(event) {\n      const isKickedout = event.data.type === 4\n      const isCurrentConversation =\n        `GROUP${event.data.message.payload.groupProfile.groupID}` ===\n        this.currentConversation.conversationID\n      // 在当前会话被踢，需reset当前会话\n      if (isKickedout && isCurrentConversation) {\n        this.$store.commit('resetCurrentConversation')\n      }\n      Notification({\n        title: '新系统通知',\n        message: translateGroupSystemNotice(event.data.message),\n        duration: 3000,\n        onClick: () => {\n          const SystemConversationID = '@TIM#SYSTEM'\n          this.$store.dispatch('checkoutConversation', SystemConversationID)\n        }\n      })\n    },\n    /**\n     * 处理 @ 我的消息\n     * @param {Message[]} messageList\n     */\n    handleAt(messageList) {\n      // 筛选有 @ 符号的文本消息\n      const atTextMessageList = messageList.filter(\n        message =>\n          message.type === this.TIM.TYPES.MSG_TEXT &&\n          message.payload.text.includes('@')\n      )\n      for (let i = 0; i < atTextMessageList.length; i++) {\n        const message = atTextMessageList[i]\n        const matched = message.payload.text.match(/@\\w+/g)\n        if (!matched) {\n          continue\n        }\n        // @ 我的\n        if (matched.includes(`@${this.currentUserProfile.userID}`)) {\n          // 当前页面不可见时，调用window.Notification接口，系统级别通知。\n          if (this.$store.getters.hidden) {\n            this.notifyMe(message)\n          }\n          Notification({\n            title: `有人在群${message.conversationID.slice(5)}提到了你`,\n            message: message.payload.text,\n            duration: 3000\n          })\n          this.$bus.$emit('new-messsage-at-me', {\n            data: { conversationID: message.conversationID }\n          })\n        }\n      }\n    },\n    selectConversation(conversationID) {\n      if (conversationID !== this.currentConversation.conversationID) {\n        this.$store.dispatch('checkoutConversation',conversationID)\n      }\n    },\n    isJsonStr(str) {\n      try{\n        JSON.parse(str)\n        return true\n      }catch {\n        return false\n      }\n    },\n    handleVideoMessage(messageList) {\n      const videoMessageList = messageList.filter(\n        message => message.type === this.TIM.TYPES.MSG_CUSTOM && this.isJsonStr(message.payload.data)\n      )\n      if (videoMessageList.length === 0) return\n      const videoPayload = JSON.parse(videoMessageList[0].payload.data)\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_DIALING) {\n        if (this.isBusy) {\n          this.$bus.$emit('busy', videoPayload, videoMessageList[0])\n          return\n        }\n        this.$store.commit('GENERATE_VIDEO_ROOM', videoPayload.room_id)\n        this.selectConversation(videoMessageList[0].conversationID) // 切换当前会话页\n        if (videoMessageList[0].from !== this.userID) {\n          this.$bus.$emit('isCalled')\n        }\n      }\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_SPONSOR_CANCEL) {\n        this.$bus.$emit('missCall')\n      }\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_REJECT) {\n        this.$bus.$emit('isRefused')\n      }\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_SPONSOR_TIMEOUT) {\n        this.$bus.$emit('missCall')\n      }\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_ACCEPTED) {\n        this.$bus.$emit('isAccept')\n      }\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_HANGUP) {\n        this.$bus.$emit('isHungUp')\n      }\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_LINE_BUSY) {\n        this.$bus.$emit('isRefused')\n      }\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_ERROR) {\n        this.$bus.$emit('isRefused')\n      }\n    },\n    /**\n     * 使用 window.Notification 进行全局的系统通知\n     * @param {Message} message\n     */\n    notifyMe(message) {\n      // 需检测浏览器支持和用户授权\n      if (!('Notification' in window)) {\n        return\n      } else if (window.Notification.permission === 'granted') {\n        this.handleNotify(message)\n      } else if (window.Notification.permission !== 'denied') {\n        window.Notification.requestPermission().then(permission => {\n          // 如果用户同意，就可以向他们发送通知\n          if (permission === 'granted') {\n            this.handleNotify(message)\n          }\n        })\n      }\n    },\n    handleNotify(message) {\n      const notification = new window.Notification('有人提到了你', {\n        icon: 'https://webim-1252463788.file.myqcloud.com/demo/img/logo.dc3be0d4.png',\n        body: message.payload.text\n      })\n      notification.onclick = () => {\n        window.focus()\n        this.$store.dispatch('checkoutConversation', message.conversationID)\n        notification.close()\n      }\n    },\n    handleLinkClick() {\n      MTA.clickStat('link_two', { click: 'true' })\n    },\n    /**\n     * 收到有群成员退群/被踢出的groupTip时，需要将相关群成员从当前会话的群成员列表中移除\n     * @param {Message[]} messageList\n     */\n    handleQuitGroupTip(messageList) {\n      // 筛选出当前会话的退群/被踢群的 groupTip\n      const groupTips = messageList.filter(message => {\n        return this.currentConversation.conversationID === message.conversationID &&\n          message.type === this.TIM.TYPES.MSG_GRP_TIP &&\n          (message.payload.operationType === this.TIM.TYPES.GRP_TIP_MBR_QUIT || \n          message.payload.operationType === this.TIM.TYPES.GRP_TIP_MBR_KICKED_OUT) \n      })\n      // 清理当前会话的群成员列表\n      if (groupTips.length > 0) {\n        groupTips.forEach(groupTip => {\n          if (Array.isArray(groupTip.payload.userIDList) || groupTip.payload.userIDList.length > 0) {\n            this.$store.commit('deleteGroupMemberList', groupTip.payload.userIDList)\n          }\n        })\n      }\n    }\n  }\n}\n",null]}