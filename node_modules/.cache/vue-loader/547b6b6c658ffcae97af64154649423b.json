{"remainingRequest":"D:\\HCI\\github\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\HCI\\github\\src\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\HCI\\github\\src\\index.vue","mtime":1593418846943},{"path":"D:\\HCI\\github\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589122691350},{"path":"D:\\HCI\\github\\node_modules\\babel-loader\\lib\\index.js","mtime":1589122690916},{"path":"D:\\HCI\\github\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589122691350},{"path":"D:\\HCI\\github\\node_modules\\vue-loader\\lib\\index.js","mtime":1589122702780}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { Notification } from 'element-ui'\r\nimport { mapState } from 'vuex'\r\n//import SideBar from './components/layout/side-bar'\r\nimport Login from './components/user/login'\r\nimport { translateGroupSystemNotice } from './utils/common'\r\nimport { ACTION } from './utils/trtcCustomMessageMap'\r\nimport MTA from './utils/mta'\r\n\r\nimport Home from './components/home'\r\n\r\nexport default {\r\n  title: 'CloudWatch',\r\n  data () {\r\n    return {\r\n\r\n    }\r\n  },\r\n  components: {\r\n    Login,\r\n    Home,\r\n  },\r\n\r\n  computed: {\r\n    ...mapState({\r\n      currentUserProfile: state => state.user.currentUserProfile,\r\n      currentConversation: state => state.conversation.currentConversation,\r\n      isLogin: state => state.user.isLogin,\r\n      isSDKReady: state => state.user.isSDKReady,\r\n      isBusy: state => state.video.isBusy,\r\n      userID: state => state.user.userID\r\n    }),\r\n    // 是否显示 Loading 状态\r\n    showLoading() {\r\n      return !this.isSDKReady\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    // 初始化监听器\r\n    this.initListener()\r\n  },\r\n\r\n  watch: {\r\n    isLogin(next) {\r\n      if (next) {\r\n        MTA.clickStat('link_two', { show: 'true' })\r\n      }\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    initListener() {\r\n      // 登录成功后会触发 SDK_READY 事件，该事件触发后，可正常使用 SDK 接口\r\n      this.tim.on(this.TIM.EVENT.SDK_READY, this.onReadyStateUpdate, this)\r\n      // SDK NOT READT\r\n      this.tim.on(this.TIM.EVENT.SDK_NOT_READY, this.onReadyStateUpdate, this)\r\n      // 被踢出\r\n      this.tim.on(this.TIM.EVENT.KICKED_OUT, this.onKickOut)\r\n      // SDK内部出错\r\n      this.tim.on(this.TIM.EVENT.ERROR, this.onError)\r\n      // 收到新消息\r\n      this.tim.on(this.TIM.EVENT.MESSAGE_RECEIVED, this.onReceiveMessage)\r\n      // 会话列表更新\r\n      this.tim.on(this.TIM.EVENT.CONVERSATION_LIST_UPDATED, this.onUpdateConversationList)\r\n      // 群组列表更新\r\n      this.tim.on(this.TIM.EVENT.GROUP_LIST_UPDATED, this.onUpdateGroupList)\r\n      // 收到新的群系统通知\r\n      this.tim.on(this.TIM.EVENT.GROUP_SYSTEM_NOTICE_RECEIVED, this.onReceiveGroupSystemNotice)\r\n    },\r\n    onReceiveMessage({ data: messageList }) {\r\n      this.handleVideoMessage(messageList)\r\n      this.handleAt(messageList)\r\n      this.handleQuitGroupTip(messageList)\r\n      this.$store.commit('pushCurrentMessageList', messageList)\r\n      this.$refs.home.addToList(messageList)\r\n    },\r\n    onError({ data }) {\r\n      if (data.message !== 'Network Error') {\r\n        this.$store.commit('showMessage', {\r\n          message: data.message,\r\n          type: 'error'\r\n        })\r\n      }\r\n    },\r\n    onReadyStateUpdate({ name }) {\r\n      const isSDKReady = name === this.TIM.EVENT.SDK_READY ? true : false\r\n      this.$store.commit('toggleIsSDKReady', isSDKReady)\r\n\r\n      if (isSDKReady) {\r\n        this.tim\r\n          .getMyProfile()\r\n          .then(({ data }) => {\r\n            this.$store.commit('updateCurrentUserProfile', data)\r\n          })\r\n          .catch(error => {\r\n            this.$store.commit('showMessage', {\r\n              type: 'error',\r\n              message: error.message\r\n            })\r\n          })\r\n        this.$store.dispatch('getBlacklist')\r\n      }\r\n    },\r\n    kickedOutReason(type) {\r\n      switch (type) {\r\n        case this.TIM.TYPES.KICKED_OUT_MULT_ACCOUNT:\r\n          return '由于多实例登录'\r\n        case this.TIM.TYPES.KICKED_OUT_MULT_DEVICE:\r\n          return '由于多设备登录'\r\n        case this.TIM.TYPES.KICKED_OUT_USERSIG_EXPIRED:\r\n          return '由于 userSig 过期'\r\n        default:\r\n          return ''\r\n      }\r\n    },\r\n    onKickOut(event) {\r\n      this.$store.commit('showMessage', {\r\n        message: `${this.kickedOutReason(event.data.type)}被踢出，请重新登录。`,\r\n        type: 'error'\r\n      })\r\n      this.$store.commit('toggleIsLogin', false)\r\n      this.$store.commit('reset')\r\n    },\r\n    onUpdateConversationList(event) {\r\n      this.$store.commit('updateConversationList', event.data)\r\n    },\r\n    onUpdateGroupList(event) {\r\n      this.$store.commit('updateGroupList', event.data)\r\n    },\r\n    onReceiveGroupSystemNotice(event) {\r\n      const isKickedout = event.data.type === 4\r\n      const isCurrentConversation =\r\n        `GROUP${event.data.message.payload.groupProfile.groupID}` ===\r\n        this.currentConversation.conversationID\r\n      // 在当前会话被踢，需reset当前会话\r\n      if (isKickedout && isCurrentConversation) {\r\n        this.$store.commit('resetCurrentConversation')\r\n      }\r\n      Notification({\r\n        title: '新系统通知',\r\n        message: translateGroupSystemNotice(event.data.message),\r\n        duration: 3000,\r\n        onClick: () => {\r\n          const SystemConversationID = '@TIM#SYSTEM'\r\n          this.$store.dispatch('checkoutConversation', SystemConversationID)\r\n        }\r\n      })\r\n    },\r\n    /**\r\n     * 处理 @ 我的消息\r\n     * @param {Message[]} messageList\r\n     */\r\n    handleAt(messageList) {\r\n      // 筛选有 @ 符号的文本消息\r\n      const atTextMessageList = messageList.filter(\r\n        message =>\r\n          message.type === this.TIM.TYPES.MSG_TEXT &&\r\n          message.payload.text.includes('@')\r\n      )\r\n      for (let i = 0; i < atTextMessageList.length; i++) {\r\n        const message = atTextMessageList[i]\r\n        const matched = message.payload.text.match(/@\\w+/g)\r\n        if (!matched) {\r\n          continue\r\n        }\r\n        // @ 我的\r\n        if (matched.includes(`@${this.currentUserProfile.userID}`)) {\r\n          // 当前页面不可见时，调用window.Notification接口，系统级别通知。\r\n          if (this.$store.getters.hidden) {\r\n            this.notifyMe(message)\r\n          }\r\n          Notification({\r\n            title: `有人在群${message.conversationID.slice(5)}提到了你`,\r\n            message: message.payload.text,\r\n            duration: 3000\r\n          })\r\n          this.$bus.$emit('new-messsage-at-me', {\r\n            data: { conversationID: message.conversationID }\r\n          })\r\n        }\r\n      }\r\n    },\r\n    selectConversation(conversationID) {\r\n      if (conversationID !== this.currentConversation.conversationID) {\r\n        this.$store.dispatch('checkoutConversation',conversationID)\r\n      }\r\n    },\r\n    isJsonStr(str) {\r\n      try{\r\n        JSON.parse(str)\r\n        return true\r\n      }catch {\r\n        return false\r\n      }\r\n    },\r\n    handleVideoMessage(messageList) {\r\n      const videoMessageList = messageList.filter(\r\n        message => message.type === this.TIM.TYPES.MSG_CUSTOM && this.isJsonStr(message.payload.data)\r\n      )\r\n      if (videoMessageList.length === 0) return\r\n      const videoPayload = JSON.parse(videoMessageList[0].payload.data)\r\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_DIALING) {\r\n        if (this.isBusy) {\r\n          this.$bus.$emit('busy', videoPayload, videoMessageList[0])\r\n          return\r\n        }\r\n        this.$store.commit('GENERATE_VIDEO_ROOM', videoPayload.room_id)\r\n        this.selectConversation(videoMessageList[0].conversationID) // 切换当前会话页\r\n        if (videoMessageList[0].from !== this.userID) {\r\n          this.$bus.$emit('isCalled')\r\n        }\r\n      }\r\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_SPONSOR_CANCEL) {\r\n        this.$bus.$emit('missCall')\r\n      }\r\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_REJECT) {\r\n        this.$bus.$emit('isRefused')\r\n      }\r\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_SPONSOR_TIMEOUT) {\r\n        this.$bus.$emit('missCall')\r\n      }\r\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_ACCEPTED) {\r\n        this.$bus.$emit('isAccept')\r\n      }\r\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_HANGUP) {\r\n        this.$bus.$emit('isHungUp')\r\n      }\r\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_LINE_BUSY) {\r\n        this.$bus.$emit('isRefused')\r\n      }\r\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_ERROR) {\r\n        this.$bus.$emit('isRefused')\r\n      }\r\n    },\r\n    /**\r\n     * 使用 window.Notification 进行全局的系统通知\r\n     * @param {Message} message\r\n     */\r\n    notifyMe(message) {\r\n      // 需检测浏览器支持和用户授权\r\n      if (!('Notification' in window)) {\r\n        return\r\n      } else if (window.Notification.permission === 'granted') {\r\n        this.handleNotify(message)\r\n      } else if (window.Notification.permission !== 'denied') {\r\n        window.Notification.requestPermission().then(permission => {\r\n          // 如果用户同意，就可以向他们发送通知\r\n          if (permission === 'granted') {\r\n            this.handleNotify(message)\r\n          }\r\n        })\r\n      }\r\n    },\r\n    handleNotify(message) {\r\n      const notification = new window.Notification('有人提到了你', {\r\n        icon: 'https://webim-1252463788.file.myqcloud.com/demo/img/logo.dc3be0d4.png',\r\n        body: message.payload.text\r\n      })\r\n      notification.onclick = () => {\r\n        window.focus()\r\n        this.$store.dispatch('checkoutConversation', message.conversationID)\r\n        notification.close()\r\n      }\r\n    },\r\n    handleLinkClick() {\r\n      MTA.clickStat('link_two', { click: 'true' })\r\n    },\r\n    /**\r\n     * 收到有群成员退群/被踢出的groupTip时，需要将相关群成员从当前会话的群成员列表中移除\r\n     * @param {Message[]} messageList\r\n     */\r\n    handleQuitGroupTip(messageList) {\r\n      // 筛选出当前会话的退群/被踢群的 groupTip\r\n      const groupTips = messageList.filter(message => {\r\n        return this.currentConversation.conversationID === message.conversationID &&\r\n          message.type === this.TIM.TYPES.MSG_GRP_TIP &&\r\n          (message.payload.operationType === this.TIM.TYPES.GRP_TIP_MBR_QUIT ||\r\n          message.payload.operationType === this.TIM.TYPES.GRP_TIP_MBR_KICKED_OUT)\r\n      })\r\n      // 清理当前会话的群成员列表\r\n      if (groupTips.length > 0) {\r\n        groupTips.forEach(groupTip => {\r\n          if (Array.isArray(groupTip.payload.userIDList) || groupTip.payload.userIDList.length > 0) {\r\n            this.$store.commit('deleteGroupMemberList', groupTip.payload.userIDList)\r\n          }\r\n        })\r\n      }\r\n    },\r\n\r\n  }\r\n}\r\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"index.vue","sourceRoot":"src","sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div id=\"wrapper\" v-if=\"!isLogin\" >\r\n      <login/>\r\n    </div>\r\n    <home\r\n      class=\"loading\"\r\n      ref=\"home\"\r\n      v-else\r\n      v-loading=\"showLoading\"\r\n      element-loading-text=\"正在拼命初始化...\"\r\n      element-loading-background=\"rgba(0, 0, 0, 0.8)\">\r\n    </home>\r\n    <div class=\"bg\">\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Notification } from 'element-ui'\r\nimport { mapState } from 'vuex'\r\n//import SideBar from './components/layout/side-bar'\r\nimport Login from './components/user/login'\r\nimport { translateGroupSystemNotice } from './utils/common'\r\nimport { ACTION } from './utils/trtcCustomMessageMap'\r\nimport MTA from './utils/mta'\r\n\r\nimport Home from './components/home'\r\n\r\nexport default {\r\n  title: 'CloudWatch',\r\n  data () {\r\n    return {\r\n\r\n    }\r\n  },\r\n  components: {\r\n    Login,\r\n    Home,\r\n  },\r\n\r\n  computed: {\r\n    ...mapState({\r\n      currentUserProfile: state => state.user.currentUserProfile,\r\n      currentConversation: state => state.conversation.currentConversation,\r\n      isLogin: state => state.user.isLogin,\r\n      isSDKReady: state => state.user.isSDKReady,\r\n      isBusy: state => state.video.isBusy,\r\n      userID: state => state.user.userID\r\n    }),\r\n    // 是否显示 Loading 状态\r\n    showLoading() {\r\n      return !this.isSDKReady\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    // 初始化监听器\r\n    this.initListener()\r\n  },\r\n\r\n  watch: {\r\n    isLogin(next) {\r\n      if (next) {\r\n        MTA.clickStat('link_two', { show: 'true' })\r\n      }\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    initListener() {\r\n      // 登录成功后会触发 SDK_READY 事件，该事件触发后，可正常使用 SDK 接口\r\n      this.tim.on(this.TIM.EVENT.SDK_READY, this.onReadyStateUpdate, this)\r\n      // SDK NOT READT\r\n      this.tim.on(this.TIM.EVENT.SDK_NOT_READY, this.onReadyStateUpdate, this)\r\n      // 被踢出\r\n      this.tim.on(this.TIM.EVENT.KICKED_OUT, this.onKickOut)\r\n      // SDK内部出错\r\n      this.tim.on(this.TIM.EVENT.ERROR, this.onError)\r\n      // 收到新消息\r\n      this.tim.on(this.TIM.EVENT.MESSAGE_RECEIVED, this.onReceiveMessage)\r\n      // 会话列表更新\r\n      this.tim.on(this.TIM.EVENT.CONVERSATION_LIST_UPDATED, this.onUpdateConversationList)\r\n      // 群组列表更新\r\n      this.tim.on(this.TIM.EVENT.GROUP_LIST_UPDATED, this.onUpdateGroupList)\r\n      // 收到新的群系统通知\r\n      this.tim.on(this.TIM.EVENT.GROUP_SYSTEM_NOTICE_RECEIVED, this.onReceiveGroupSystemNotice)\r\n    },\r\n    onReceiveMessage({ data: messageList }) {\r\n      this.handleVideoMessage(messageList)\r\n      this.handleAt(messageList)\r\n      this.handleQuitGroupTip(messageList)\r\n      this.$store.commit('pushCurrentMessageList', messageList)\r\n      this.$refs.home.addToList(messageList)\r\n    },\r\n    onError({ data }) {\r\n      if (data.message !== 'Network Error') {\r\n        this.$store.commit('showMessage', {\r\n          message: data.message,\r\n          type: 'error'\r\n        })\r\n      }\r\n    },\r\n    onReadyStateUpdate({ name }) {\r\n      const isSDKReady = name === this.TIM.EVENT.SDK_READY ? true : false\r\n      this.$store.commit('toggleIsSDKReady', isSDKReady)\r\n\r\n      if (isSDKReady) {\r\n        this.tim\r\n          .getMyProfile()\r\n          .then(({ data }) => {\r\n            this.$store.commit('updateCurrentUserProfile', data)\r\n          })\r\n          .catch(error => {\r\n            this.$store.commit('showMessage', {\r\n              type: 'error',\r\n              message: error.message\r\n            })\r\n          })\r\n        this.$store.dispatch('getBlacklist')\r\n      }\r\n    },\r\n    kickedOutReason(type) {\r\n      switch (type) {\r\n        case this.TIM.TYPES.KICKED_OUT_MULT_ACCOUNT:\r\n          return '由于多实例登录'\r\n        case this.TIM.TYPES.KICKED_OUT_MULT_DEVICE:\r\n          return '由于多设备登录'\r\n        case this.TIM.TYPES.KICKED_OUT_USERSIG_EXPIRED:\r\n          return '由于 userSig 过期'\r\n        default:\r\n          return ''\r\n      }\r\n    },\r\n    onKickOut(event) {\r\n      this.$store.commit('showMessage', {\r\n        message: `${this.kickedOutReason(event.data.type)}被踢出，请重新登录。`,\r\n        type: 'error'\r\n      })\r\n      this.$store.commit('toggleIsLogin', false)\r\n      this.$store.commit('reset')\r\n    },\r\n    onUpdateConversationList(event) {\r\n      this.$store.commit('updateConversationList', event.data)\r\n    },\r\n    onUpdateGroupList(event) {\r\n      this.$store.commit('updateGroupList', event.data)\r\n    },\r\n    onReceiveGroupSystemNotice(event) {\r\n      const isKickedout = event.data.type === 4\r\n      const isCurrentConversation =\r\n        `GROUP${event.data.message.payload.groupProfile.groupID}` ===\r\n        this.currentConversation.conversationID\r\n      // 在当前会话被踢，需reset当前会话\r\n      if (isKickedout && isCurrentConversation) {\r\n        this.$store.commit('resetCurrentConversation')\r\n      }\r\n      Notification({\r\n        title: '新系统通知',\r\n        message: translateGroupSystemNotice(event.data.message),\r\n        duration: 3000,\r\n        onClick: () => {\r\n          const SystemConversationID = '@TIM#SYSTEM'\r\n          this.$store.dispatch('checkoutConversation', SystemConversationID)\r\n        }\r\n      })\r\n    },\r\n    /**\r\n     * 处理 @ 我的消息\r\n     * @param {Message[]} messageList\r\n     */\r\n    handleAt(messageList) {\r\n      // 筛选有 @ 符号的文本消息\r\n      const atTextMessageList = messageList.filter(\r\n        message =>\r\n          message.type === this.TIM.TYPES.MSG_TEXT &&\r\n          message.payload.text.includes('@')\r\n      )\r\n      for (let i = 0; i < atTextMessageList.length; i++) {\r\n        const message = atTextMessageList[i]\r\n        const matched = message.payload.text.match(/@\\w+/g)\r\n        if (!matched) {\r\n          continue\r\n        }\r\n        // @ 我的\r\n        if (matched.includes(`@${this.currentUserProfile.userID}`)) {\r\n          // 当前页面不可见时，调用window.Notification接口，系统级别通知。\r\n          if (this.$store.getters.hidden) {\r\n            this.notifyMe(message)\r\n          }\r\n          Notification({\r\n            title: `有人在群${message.conversationID.slice(5)}提到了你`,\r\n            message: message.payload.text,\r\n            duration: 3000\r\n          })\r\n          this.$bus.$emit('new-messsage-at-me', {\r\n            data: { conversationID: message.conversationID }\r\n          })\r\n        }\r\n      }\r\n    },\r\n    selectConversation(conversationID) {\r\n      if (conversationID !== this.currentConversation.conversationID) {\r\n        this.$store.dispatch('checkoutConversation',conversationID)\r\n      }\r\n    },\r\n    isJsonStr(str) {\r\n      try{\r\n        JSON.parse(str)\r\n        return true\r\n      }catch {\r\n        return false\r\n      }\r\n    },\r\n    handleVideoMessage(messageList) {\r\n      const videoMessageList = messageList.filter(\r\n        message => message.type === this.TIM.TYPES.MSG_CUSTOM && this.isJsonStr(message.payload.data)\r\n      )\r\n      if (videoMessageList.length === 0) return\r\n      const videoPayload = JSON.parse(videoMessageList[0].payload.data)\r\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_DIALING) {\r\n        if (this.isBusy) {\r\n          this.$bus.$emit('busy', videoPayload, videoMessageList[0])\r\n          return\r\n        }\r\n        this.$store.commit('GENERATE_VIDEO_ROOM', videoPayload.room_id)\r\n        this.selectConversation(videoMessageList[0].conversationID) // 切换当前会话页\r\n        if (videoMessageList[0].from !== this.userID) {\r\n          this.$bus.$emit('isCalled')\r\n        }\r\n      }\r\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_SPONSOR_CANCEL) {\r\n        this.$bus.$emit('missCall')\r\n      }\r\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_REJECT) {\r\n        this.$bus.$emit('isRefused')\r\n      }\r\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_SPONSOR_TIMEOUT) {\r\n        this.$bus.$emit('missCall')\r\n      }\r\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_ACCEPTED) {\r\n        this.$bus.$emit('isAccept')\r\n      }\r\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_HANGUP) {\r\n        this.$bus.$emit('isHungUp')\r\n      }\r\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_LINE_BUSY) {\r\n        this.$bus.$emit('isRefused')\r\n      }\r\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_ERROR) {\r\n        this.$bus.$emit('isRefused')\r\n      }\r\n    },\r\n    /**\r\n     * 使用 window.Notification 进行全局的系统通知\r\n     * @param {Message} message\r\n     */\r\n    notifyMe(message) {\r\n      // 需检测浏览器支持和用户授权\r\n      if (!('Notification' in window)) {\r\n        return\r\n      } else if (window.Notification.permission === 'granted') {\r\n        this.handleNotify(message)\r\n      } else if (window.Notification.permission !== 'denied') {\r\n        window.Notification.requestPermission().then(permission => {\r\n          // 如果用户同意，就可以向他们发送通知\r\n          if (permission === 'granted') {\r\n            this.handleNotify(message)\r\n          }\r\n        })\r\n      }\r\n    },\r\n    handleNotify(message) {\r\n      const notification = new window.Notification('有人提到了你', {\r\n        icon: 'https://webim-1252463788.file.myqcloud.com/demo/img/logo.dc3be0d4.png',\r\n        body: message.payload.text\r\n      })\r\n      notification.onclick = () => {\r\n        window.focus()\r\n        this.$store.dispatch('checkoutConversation', message.conversationID)\r\n        notification.close()\r\n      }\r\n    },\r\n    handleLinkClick() {\r\n      MTA.clickStat('link_two', { click: 'true' })\r\n    },\r\n    /**\r\n     * 收到有群成员退群/被踢出的groupTip时，需要将相关群成员从当前会话的群成员列表中移除\r\n     * @param {Message[]} messageList\r\n     */\r\n    handleQuitGroupTip(messageList) {\r\n      // 筛选出当前会话的退群/被踢群的 groupTip\r\n      const groupTips = messageList.filter(message => {\r\n        return this.currentConversation.conversationID === message.conversationID &&\r\n          message.type === this.TIM.TYPES.MSG_GRP_TIP &&\r\n          (message.payload.operationType === this.TIM.TYPES.GRP_TIP_MBR_QUIT ||\r\n          message.payload.operationType === this.TIM.TYPES.GRP_TIP_MBR_KICKED_OUT)\r\n      })\r\n      // 清理当前会话的群成员列表\r\n      if (groupTips.length > 0) {\r\n        groupTips.forEach(groupTip => {\r\n          if (Array.isArray(groupTip.payload.userIDList) || groupTip.payload.userIDList.length > 0) {\r\n            this.$store.commit('deleteGroupMemberList', groupTip.payload.userIDList)\r\n          }\r\n        })\r\n      }\r\n    },\r\n\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"stylus\">\r\nbody {\r\n  overflow: hidden;\r\n  margin: 0;\r\n  font-family: 'Microsoft YaHei', '微软雅黑', 'MicrosoftJhengHei', 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'STHeiti', 'WenQuanYi Micro Hei', SimSun, sans-serif;\r\n  // font-family  \"Helvetica Neue\", Helvetica, Arial, \"PingFang SC\", \"Hiragino Sans GB\", \"Heiti SC\", \"Microsoft YaHei\", \"WenQuanYi Micro Hei\", sans-serif\r\n  // text-shadow: $regular 0 0 0.05em\r\n  background-color: $bg;\r\n  -ms-scroll-chaining: chained;\r\n  -ms-overflow-style: none;\r\n  -ms-content-zooming: zoom;\r\n  -ms-scroll-rails: none;\r\n  -ms-content-zoom-limit-min: 100%;\r\n  -ms-content-zoom-limit-max: 500%;\r\n  -ms-scroll-snap-type: proximity;\r\n  -ms-scroll-snap-points-x: snapList(100%, 200%, 300%, 400%, 500%);\r\n  -ms-overflow-style: none;\r\n  overflow: auto;\r\n\r\n  div {\r\n    box-sizing: border-box;\r\n\r\n    &::before, &::after {\r\n      box-sizing: border-box;\r\n    }\r\n  }\r\n}\r\n\r\n#wrapper {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  padding-top: 100px;\r\n}\r\n\r\n.container\r\n  height 100vh\r\n.container\r\n  height 100vh\r\n// TODO filter mac chrome 会有问题，下次修改可以去掉\r\n.bg {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: -1;\r\n  background: url('~@/./assets/image/bg.jpg') no-repeat 0 0;\r\n  background-size: cover;\r\n  // filter blur(67px)\r\n}\r\n\r\n.loading {\r\n  height: 100vh;\r\n  width: 100vw;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.text-ellipsis {\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n}\r\n\r\n.chat-wrapper {\r\n  margin-top: 8vh;\r\n  width: $width;\r\n  height: $height;\r\n  max-width: 1280px;\r\n  position: fixed;\r\n  right: 0%;\r\n  z-index: 999;\r\n\r\n  .official-link {\r\n    display: flex;\r\n    text-decoration: none;\r\n    color: #38c9ff;\r\n    width: fit-content;\r\n    float: right;\r\n    height: 45px;\r\n    align-items: center;\r\n  }\r\n}\r\n\r\n/* 设置滚动条的样式 */\r\n::-webkit-scrollbar {\r\n  width: 3px;\r\n  height: 3px;\r\n}\r\n\r\n/* 滚动槽 */\r\n::-webkit-scrollbar-track {\r\n  border-radius: 10px;\r\n}\r\n\r\n/* 滚动条滑块 */\r\n::-webkit-scrollbar-thumb {\r\n  border-radius: 10px;\r\n  background: rgba(0, 0, 0, 0.1);\r\n}\r\n</style>\r\n"]}]}