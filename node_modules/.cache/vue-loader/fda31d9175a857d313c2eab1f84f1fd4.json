{"remainingRequest":"D:\\HCI\\github\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\HCI\\github\\src\\components\\message\\message-bottom-send-box.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\HCI\\github\\src\\components\\message\\message-bottom-send-box.vue","mtime":1593418846937},{"path":"D:\\HCI\\github\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589122691350},{"path":"D:\\HCI\\github\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1589122702323},{"path":"D:\\HCI\\github\\node_modules\\babel-loader\\lib\\index.js","mtime":1589122690916},{"path":"D:\\HCI\\github\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589122691350},{"path":"D:\\HCI\\github\\node_modules\\vue-loader\\lib\\index.js","mtime":1589122702780}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { mapGetters, mapState } from 'vuex'\r\nimport {\r\n  Form,\r\n  FormItem,\r\n  Input,\r\n  Dialog,\r\n  Popover,\r\n  RadioGroup,\r\n  Radio,\r\n  Tooltip,\r\n} from 'element-ui'\r\nimport { emojiMap, emojiName, emojiUrl } from '../../utils/emojiMap'\r\nimport VoiceCommunicate from '../voice'\r\n\r\nexport default {\r\n  name: 'message-send-box',\r\n  props: ['scrollMessageListToButtom'],\r\n  components: {\r\n    ElInput: Input,\r\n    ElForm: Form,\r\n    ElFormItem: FormItem,\r\n    ElDialog: Dialog,\r\n    ElPopover: Popover,\r\n    ElRadioGroup: RadioGroup,\r\n    ElRadio: Radio,\r\n    ElTooltip: Tooltip,\r\n    VoiceCommunicate: VoiceCommunicate,\r\n  },\r\n  data() {\r\n    return {\r\n      colors: ['#99A9BF', '#F7BA2A', '#FF9900'],\r\n      messageContent: '',\r\n      isSendCustomMessage: false,\r\n      sendCustomDialogVisible: false,\r\n      form: {\r\n        data: '',\r\n        description: '',\r\n        extension: ''\r\n      },\r\n      file: '',\r\n      emojiMap: emojiMap,\r\n      emojiName: emojiName,\r\n      emojiUrl: emojiUrl,\r\n      showAtGroupMember: false,\r\n      atUserID: '',\r\n      focus: false\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters(['toAccount', 'currentConversationType']),\r\n    ...mapState({\r\n      memberList: state => state.group.currentMemberList,\r\n      userID: state => state.user.userID,\r\n      currentUserProfile: state => state.user.currentUserProfile,\r\n    })\r\n  },\r\n  mounted() {\r\n    this.$refs['text-input'].addEventListener('paste', this.handlePaste)\r\n    this.$bus.$on('reEditMessage', this.reEditMessage)\r\n  },\r\n  beforeDestroy() {\r\n    this.$refs['text-input'].removeEventListener('paste', this.handlePaste)\r\n  },\r\n  methods: {\r\n    reEditMessage(payload) {\r\n      this.messageContent = payload\r\n    },\r\n    handleSelectAtUser() {\r\n      this.messageContent += this.atUserID + ' '\r\n      this.showAtGroupMember = false\r\n    },\r\n    handleUp() {\r\n      const index = this.memberList.findIndex(\r\n        member => member.userID === this.atUserID\r\n      )\r\n      if (index - 1 < 0) {\r\n        return\r\n      }\r\n      this.atUserID = this.memberList[index - 1].userID\r\n    },\r\n    handleDown() {\r\n      const index = this.memberList.findIndex(\r\n        member => member.userID === this.atUserID\r\n      )\r\n      if (index + 1 >= this.memberList.length) {\r\n        return\r\n      }\r\n      this.atUserID = this.memberList[index + 1].userID\r\n    },\r\n    handleEnter() {\r\n      if (this.showAtGroupMember) {\r\n        this.handleSelectAtUser()\r\n      } else {\r\n        this.sendTextMessage()\r\n      }\r\n    },\r\n    handleLine() {\r\n      this.messageContent += '\\n'\r\n    },\r\n    handleAt() {\r\n      this.showAtGroupMember = true\r\n      this.messageContent += '@'\r\n    },\r\n    handlePaste(e) {\r\n      let clipboardData = e.clipboardData\r\n      let file\r\n      if (\r\n        clipboardData &&\r\n        clipboardData.files &&\r\n        clipboardData.files.length > 0\r\n      ) {\r\n        file = clipboardData.files[0]\r\n      }\r\n\r\n      if (typeof file === 'undefined') {\r\n        return\r\n      }\r\n      // 1. 创建消息实例，接口返回的实例可以上屏\r\n      let message = this.tim.createImageMessage({\r\n        to: this.toAccount,\r\n        conversationType: this.currentConversationType,\r\n        payload: {\r\n          file: file\r\n        },\r\n        onProgress: percent => {\r\n          this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\r\n        }\r\n      })\r\n      this.$store.commit('pushCurrentMessageList', message)\r\n\r\n      // 2. 发送消息\r\n      let promise = this.tim.sendMessage(message)\r\n      promise.catch(error => {\r\n        this.$store.commit('showMessage', {\r\n          type: 'error',\r\n          message: error.message\r\n        })\r\n      })\r\n    },\r\n    dropHandler(e) {\r\n      e.preventDefault()\r\n      let file = e.dataTransfer.files[0]\r\n      let message = {}\r\n      if (file.type === 'video/mp4') {\r\n        message = this.tim.createVideoMessage({\r\n          to: this.toAccount,\r\n          conversationType: this.currentConversationType,\r\n          payload: {\r\n            file: file\r\n          },\r\n          onProgress: percent => {\r\n            this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\r\n          }\r\n        })\r\n      } else {\r\n        message = this.tim.createFileMessage({\r\n          to: this.toAccount,\r\n          conversationType: this.currentConversationType,\r\n          payload: {\r\n            file: file\r\n          },\r\n          onProgress: percent => {\r\n            this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\r\n          }\r\n        })\r\n      }\r\n      this.$store.commit('pushCurrentMessageList', message)\r\n      this.tim\r\n        .sendMessage(message)\r\n        .then(() => {\r\n          this.$refs.videoPicker.value = null\r\n        })\r\n        .catch(imError => {\r\n          this.$store.commit('showMessage', {\r\n            message: imError.message,\r\n            type: 'error'\r\n          })\r\n        })\r\n    },\r\n    sendTextMessage() {\r\n      if (\r\n        this.messageContent === '' ||\r\n        this.messageContent.trim().length === 0\r\n      ) {\r\n        this.messageContent = ''\r\n        this.$store.commit('showMessage', {\r\n          message: '不能发送空消息哦！',\r\n          type: 'info'\r\n        })\r\n        return\r\n      }\r\n      const message = this.tim.createTextMessage({\r\n        to: this.toAccount,\r\n        conversationType: this.currentConversationType,\r\n        payload: { text: this.messageContent }\r\n      })\r\n      let content = this.messageContent\r\n      this.$store.commit('pushCurrentMessageList', message)\r\n      this.$bus.$emit('scroll-bottom')\r\n      this.tim.sendMessage(message).then(() => {\r\n        this.$parent.addToList([{\r\n          type: this.TIM.TYPES.MSG_TEXT,\r\n          avatar: this.currentUserProfile.avatar,\r\n          nick: this.currentUserProfile.nick,\r\n          payload: { text: content }\r\n        }])\r\n      }).catch(error => {\r\n        this.$store.commit('showMessage', {\r\n          type: 'error',\r\n          message: error.message\r\n        })\r\n      })\r\n      this.messageContent = ''\r\n    },\r\n    sendCustomMessage() {\r\n      if (\r\n        this.form.data.length === 0 &&\r\n        this.form.description.length === 0 &&\r\n        this.form.extension.length === 0\r\n      ) {\r\n        this.$store.commit('showMessage', {\r\n          message: '不能发送空消息',\r\n          type: 'info'\r\n        })\r\n        return\r\n      }\r\n      const message = this.tim.createCustomMessage({\r\n        to: this.toAccount,\r\n        conversationType: this.currentConversationType,\r\n        payload: {\r\n          data: this.form.data,\r\n          description: this.form.description,\r\n          extension: this.form.extension\r\n        }\r\n      })\r\n      this.$store.commit('pushCurrentMessageList', message)\r\n      this.tim.sendMessage(message).catch(error => {\r\n        this.$store.commit('showMessage', {\r\n          type: 'error',\r\n          message: error.message\r\n        })\r\n      })\r\n      Object.assign(this.form, {\r\n        data: '',\r\n        description: '',\r\n        extension: ''\r\n      })\r\n      this.sendCustomDialogVisible = false\r\n    },\r\n    random(min, max) {\r\n      return Math.floor(Math.random() * (max - min + 1) + min)\r\n    },\r\n    chooseEmoji(item) {\r\n      this.messageContent += item\r\n    },\r\n    handleSendImageClick() {\r\n      this.$refs.imagePicker.click()\r\n    },\r\n    handleSendFileClick() {\r\n      this.$refs.filePicker.click()\r\n    },\r\n    handleSendVideoClick() {\r\n      this.$refs.videoPicker.click()\r\n    },\r\n    videoCall() {\r\n      this.$bus.$emit('video-call')\r\n    },\r\n    sendImage() {\r\n      const message = this.tim.createImageMessage({\r\n        to: this.toAccount,\r\n        conversationType: this.currentConversationType,\r\n        payload: {\r\n          file: document.getElementById('imagePicker') // 或者用event.target\r\n        },\r\n        onProgress: percent => {\r\n          this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\r\n        }\r\n      })\r\n      this.$store.commit('pushCurrentMessageList', message)\r\n      this.tim\r\n        .sendMessage(message)\r\n        .then(() => {\r\n        })\r\n        .catch(imError => {\r\n          this.$store.commit('showMessage', {\r\n            message: imError.message,\r\n            type: 'error'\r\n          })\r\n        })\r\n      this.$refs.imagePicker.value = null\r\n    },\r\n    sendFile() {\r\n      const message = this.tim.createFileMessage({\r\n        to: this.toAccount,\r\n        conversationType: this.currentConversationType,\r\n        payload: {\r\n          file: document.getElementById('filePicker') // 或者用event.target\r\n        },\r\n        onProgress: percent => {\r\n          this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\r\n        }\r\n      })\r\n      this.$store.commit('pushCurrentMessageList', message)\r\n      this.tim\r\n        .sendMessage(message)\r\n        .then(() => {\r\n        })\r\n        .catch(imError => {\r\n          this.$store.commit('showMessage', {\r\n            message: imError.message,\r\n            type: 'error'\r\n          })\r\n        })\r\n      this.$refs.filePicker.value = null\r\n    },\r\n    sendVideo() {\r\n      const message = this.tim.createVideoMessage({\r\n        to: this.toAccount,\r\n        conversationType: this.currentConversationType,\r\n        payload: {\r\n          file: document.getElementById('videoPicker') // 或者用event.target\r\n        },\r\n        onProgress: percent => {\r\n          this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\r\n        }\r\n      })\r\n      this.$store.commit('pushCurrentMessageList', message)\r\n      this.tim\r\n        .sendMessage(message)\r\n        .then(() => {\r\n          this.$refs.videoPicker.value = null\r\n        })\r\n        .catch(imError => {\r\n          this.$store.commit('showMessage', {\r\n            message: imError.message,\r\n            type: 'error'\r\n          })\r\n        })\r\n    }\r\n  }\r\n}\r\n",null]}