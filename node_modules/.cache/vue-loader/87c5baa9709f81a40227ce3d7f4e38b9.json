{"remainingRequest":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/run/media/gz/G/c2020spring/hci/project/FrontEnd/src/components/voice.vue?vue&type=script&lang=js&","dependencies":[{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/src/components/voice.vue","mtime":1593150742308},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1588990144497},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1588990144242},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1588990144497},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1588990158440}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport TRTC from 'trtc-js-sdk'\nimport {TEST_ACCOUNT} from '../const/account_dev'\n import {mapState} from 'vuex'\nexport default {\n  name: 'voiceCommunicate',\n  components: {\n  },\n  data() {\n    return {\n      sdkAppId: TEST_ACCOUNT.sdkAppId,\n      userId: TEST_ACCOUNT.userId + (Math.random() * 100).toFixed(),\n      userToken: TEST_ACCOUNT.userToken,\n      client: '',\n      localStream: '',\n      roomId: this.$store.state.currentRoomId,\n      remoteVideo: [],\n      isSignUp: false,\n      isLink: false,\n    }\n  },\n  created() {\n  },\n  methods: {\n        voicecommunicate(linkOrder) {\n            if(this.isLink==false&& linkOrder==true)\n            {\n                this.isLink=true\n                this.createClient()\n            }else{\n                if(this.isLink==true&&linkOrder==false)\n                {\n                  this.isLink==false\n                  this.signOut()\n                }\n            }\n        },\n       createClient() {\n      //获取签名\n      const config = this.genTestUserSig()\n      const sdkAppId = config.sdkAppId\n      const userSig = config.userSig\n      this.client = TRTC.createClient({\n        mode: 'videoCall',\n        sdkAppId,\n        userId: this.userId,\n        userSig,\n      })\n      console.log(sdkAppId,this.userId,userSig,111111111)\n      //注册远程监听，要放在加入房间前--这里用了发布订阅模式\n      this.subscribeStream()\n      this.joinRoom(this.roomId)\n\n    },\n\n    //加入房间\n    joinRoom (roomId) {\n      console.log(roomId)\n      if(!this.isSignUp) {\n        this.client.join({ roomId })\n          .then(() => {\n            console.log('进房成功')\n            this.isSignUp = true\n            //创建本地流\n            this.createStream(this.userId)\n            // //播放远端流\n            this.playRemoteStream(this.client)\n            this.isLink = true\n          })\n          .catch(error => {\n            console.error('进房失败 ' + error)\n          })\n      } else {\n        alert('不能重复加入直播间')\n      }\n\n    },\n\n    createStream(userId) {\n      const localStream = TRTC.createStream({ userId, audio: true, video: false })\n      this.localStream =localStream\n\n      localStream\n        .initialize()\n        .catch(error => {\n          console.error('初始化本地流失败 ' + error)\n        })\n        .then(() => {\n          console.log('初始化本地流成功')\n          localStream.play('local_stream')\n          //创建好后才能发布\n          this.publishStream(localStream)\n        })\n    },\n\n    publishStream(localStream) {\n      this.client\n        .publish(localStream)\n        .catch(error => {\n          console.error('本地流发布失败 ' + error)\n        })\n        .then(() => {\n          console.log('本地流发布成功')\n        })\n    },\n\n    playRemoteStream() {\n      this.client.on('stream-subscribed', event => {\n        const remoteStream = event.stream\n        console.log('远端流订阅成功：' + remoteStream.getId())\n        this.remoteVideo.push(remoteStream.getId())\n        // 播放远端流\n        this.$nextTick(()=>{\n        remoteStream.play('remote_stream'+ remoteStream.getId())\n        },1000)\n\n      })\n\n    },\n\n    //订阅远端流--加入房间之前\n    subscribeStream () {\n      this.client.on('stream-added', event => {\n        const remoteStream = event.stream\n        console.log('远端流增加: ' + remoteStream.getId())\n        //订阅远端流\n        this.client.subscribe(remoteStream)\n      })\n    },\n\n    signOut() {\n      this.isSignUp=false\n      this.remoteVideo=[]\n      this.client\n      .leave()\n      .then(() => {\n        // 退房成功，可再次调用client.join重新进房开启新的通话。\n        console.log('退出直播间')\n        this.isLink = false\n      })\n      .catch(error => {\n        console.error('退出直播间失败 ' + error)\n        // 错误不可恢复，需要刷新页面。\n      })\n    },\n\n    genTestUserSig() {\n      const USERID = this.userId\n      const SDKAPPID = this.sdkAppId\n      const EXPIRETIME = 604800\n      const SECRETKEY = this.userToken\n      if (SDKAPPID === '' || SECRETKEY === '') {\n        alert(\n          '请先配置好您的账号信息： SDKAPPID 及 SECRETKEY ' +\n            '\\r\\n\\r\\nPlease configure your SDKAPPID/SECRETKEY in js/debug/GenerateTestUserSig.js'\n        )\n      }\n      const generator = new window.LibGenerateTestUserSig(SDKAPPID, SECRETKEY, EXPIRETIME)\n      const userSig = generator.genTestUserSig(USERID)\n      return {\n        sdkAppId: SDKAPPID,\n        userSig: userSig\n      }\n    }\n    }\n}\n",{"version":3,"sources":["voice.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"voice.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"app\">\n    <el-button type=\"primary\" @click=\"createClient\" v-if=\"!isLink\" size=\"mini\">连麦</el-button>\n    <el-button type=\"primary\" @click=\"signOut\" v-else>退出语音</el-button>\n    <div id='local_stream' class='video'></div>\n    <template v-for=\"item in remoteVideo\" >\n      <div :id=\"'remote_stream'+ item\" class='video' :key='item'></div>\n    </template>\n  </div>\n</template>\n\n<script>\nimport TRTC from 'trtc-js-sdk'\nimport {TEST_ACCOUNT} from '../const/account_dev'\n import {mapState} from 'vuex'\nexport default {\n  name: 'voiceCommunicate',\n  components: {\n  },\n  data() {\n    return {\n      sdkAppId: TEST_ACCOUNT.sdkAppId,\n      userId: TEST_ACCOUNT.userId + (Math.random() * 100).toFixed(),\n      userToken: TEST_ACCOUNT.userToken,\n      client: '',\n      localStream: '',\n      roomId: this.$store.state.currentRoomId,\n      remoteVideo: [],\n      isSignUp: false,\n      isLink: false,\n    }\n  },\n  created() {\n  },\n  methods: {\n        voicecommunicate(linkOrder) {\n            if(this.isLink==false&& linkOrder==true)\n            {\n                this.isLink=true\n                this.createClient()\n            }else{\n                if(this.isLink==true&&linkOrder==false)\n                {\n                  this.isLink==false\n                  this.signOut()\n                }\n            }\n        },\n       createClient() {\n      //获取签名\n      const config = this.genTestUserSig()\n      const sdkAppId = config.sdkAppId\n      const userSig = config.userSig\n      this.client = TRTC.createClient({\n        mode: 'videoCall',\n        sdkAppId,\n        userId: this.userId,\n        userSig,\n      })\n      console.log(sdkAppId,this.userId,userSig,111111111)\n      //注册远程监听，要放在加入房间前--这里用了发布订阅模式\n      this.subscribeStream()\n      this.joinRoom(this.roomId)\n\n    },\n\n    //加入房间\n    joinRoom (roomId) {\n      console.log(roomId)\n      if(!this.isSignUp) {\n        this.client.join({ roomId })\n          .then(() => {\n            console.log('进房成功')\n            this.isSignUp = true\n            //创建本地流\n            this.createStream(this.userId)\n            // //播放远端流\n            this.playRemoteStream(this.client)\n            this.isLink = true\n          })\n          .catch(error => {\n            console.error('进房失败 ' + error)\n          })\n      } else {\n        alert('不能重复加入直播间')\n      }\n\n    },\n\n    createStream(userId) {\n      const localStream = TRTC.createStream({ userId, audio: true, video: false })\n      this.localStream =localStream\n\n      localStream\n        .initialize()\n        .catch(error => {\n          console.error('初始化本地流失败 ' + error)\n        })\n        .then(() => {\n          console.log('初始化本地流成功')\n          localStream.play('local_stream')\n          //创建好后才能发布\n          this.publishStream(localStream)\n        })\n    },\n\n    publishStream(localStream) {\n      this.client\n        .publish(localStream)\n        .catch(error => {\n          console.error('本地流发布失败 ' + error)\n        })\n        .then(() => {\n          console.log('本地流发布成功')\n        })\n    },\n\n    playRemoteStream() {\n      this.client.on('stream-subscribed', event => {\n        const remoteStream = event.stream\n        console.log('远端流订阅成功：' + remoteStream.getId())\n        this.remoteVideo.push(remoteStream.getId())\n        // 播放远端流\n        this.$nextTick(()=>{\n        remoteStream.play('remote_stream'+ remoteStream.getId())\n        },1000)\n\n      })\n\n    },\n\n    //订阅远端流--加入房间之前\n    subscribeStream () {\n      this.client.on('stream-added', event => {\n        const remoteStream = event.stream\n        console.log('远端流增加: ' + remoteStream.getId())\n        //订阅远端流\n        this.client.subscribe(remoteStream)\n      })\n    },\n\n    signOut() {\n      this.isSignUp=false\n      this.remoteVideo=[]\n      this.client\n      .leave()\n      .then(() => {\n        // 退房成功，可再次调用client.join重新进房开启新的通话。\n        console.log('退出直播间')\n        this.isLink = false\n      })\n      .catch(error => {\n        console.error('退出直播间失败 ' + error)\n        // 错误不可恢复，需要刷新页面。\n      })\n    },\n\n    genTestUserSig() {\n      const USERID = this.userId\n      const SDKAPPID = this.sdkAppId\n      const EXPIRETIME = 604800\n      const SECRETKEY = this.userToken\n      if (SDKAPPID === '' || SECRETKEY === '') {\n        alert(\n          '请先配置好您的账号信息： SDKAPPID 及 SECRETKEY ' +\n            '\\r\\n\\r\\nPlease configure your SDKAPPID/SECRETKEY in js/debug/GenerateTestUserSig.js'\n        )\n      }\n      const generator = new window.LibGenerateTestUserSig(SDKAPPID, SECRETKEY, EXPIRETIME)\n      const userSig = generator.genTestUserSig(USERID)\n      return {\n        sdkAppId: SDKAPPID,\n        userSig: userSig\n      }\n    }\n    }\n}\n</script>\n"]}]}