{"remainingRequest":"D:\\HCI\\github\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\HCI\\github\\src\\components\\message\\call-layer.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\HCI\\github\\src\\components\\message\\call-layer.vue","mtime":1589122703610},{"path":"D:\\HCI\\github\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589122691350},{"path":"D:\\HCI\\github\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1589122702323},{"path":"D:\\HCI\\github\\node_modules\\babel-loader\\lib\\index.js","mtime":1589122690916},{"path":"D:\\HCI\\github\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589122691350},{"path":"D:\\HCI\\github\\node_modules\\vue-loader\\lib\\index.js","mtime":1589122702780}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport RtcClient from '../../utils/rtc-client'\r\nimport { ACTION, VERSION } from '../../utils/trtcCustomMessageMap'\r\nimport { mapGetters, mapState } from 'vuex'\r\nimport { formatDuration } from '../../utils/formatDuration'\r\n\r\nexport default {\r\n  name: 'CallLayer',\r\n  data() {\r\n    return {\r\n      Trtc: undefined,\r\n      isCamOn: true,\r\n      isMicOn: true,\r\n      maskShow: false,\r\n      isLocalMain: true, // 本地视频是否是主屏幕显示\r\n      start: 0,\r\n      end: 0,\r\n      duration: 0,\r\n      hangUpTimer: 0, // 通话计时id\r\n      ready: false,\r\n      dialling: false, // 是否拨打电话中\r\n      calling: false, // 是否通话中\r\n      isDialled: false, // 是否被呼叫\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters(['toAccount', 'currentConversationType']),\r\n    ...mapState({\r\n      userID: state => state.user.userID,\r\n      userSig: state => state.user.userSig,\r\n      videoRoom: state => state.video.videoRoom,\r\n      sdkAppID: state => state.user.sdkAppID\r\n    }),\r\n    formatDurationStr() {\r\n      return formatDuration(this.duration)\r\n    },\r\n  },\r\n  created() {\r\n    window.addEventListener('beforeunload', () => {\r\n      this.videoCallLogOut()\r\n    })\r\n    window.addEventListener('leave', () => {\r\n      this.videoCallLogOut()\r\n    })\r\n  },\r\n  mounted() {\r\n    this.$bus.$on('isCalled', this.isCalled)\r\n    this.$bus.$on('missCall', this.missCall)\r\n    this.$bus.$on('isRefused', this.isRefused)\r\n    this.$bus.$on('isAccept', this.isAccept)\r\n    this.$bus.$on('isHungUp', this.isHungUp)\r\n    this.$bus.$on('busy', this.busy)\r\n    this.$bus.$on('video-call', this.videoCall)\r\n  },\r\n  beforeDestroy() {\r\n    this.$bus.$off('isCalled', this.isCalled)\r\n    this.$bus.$off('missCall', this.missCall)\r\n    this.$bus.$off('isRefused', this.isRefused)\r\n    this.$bus.$off('isAccept', this.isAccept)\r\n    this.$bus.$off('isHungUp', this.isHungUp)\r\n    this.$bus.$off('busy', this.busy)\r\n    this.$bus.$off('video-call', this.videoCall)\r\n  },\r\n  methods: {\r\n    videoCallLogOut() { // 针对，刷新页面，关闭Tab，登出情况下，通话断开的逻辑\r\n      if (this.dialling || this.calling) {\r\n        this.leave()\r\n      }\r\n      if (this.isDialled) {\r\n        this.refuse()\r\n      }\r\n    },\r\n    changeState(state, boolean) {\r\n      let stateList = ['dialling', 'isDialled', 'calling']\r\n      stateList.forEach(item => {\r\n        this[item] = item === state ? boolean : false\r\n      })\r\n      this.$store.commit('UPDATE_ISBUSY', stateList.some(item => this[item])) // 若stateList 中存在 true , isBusy 为 true\r\n    },\r\n    async initTrtc(options) { // 初始化 trtc 进入房间\r\n      this.Trtc = new RtcClient(options)\r\n      await this.Trtc.createLocalStream({ audio: true, video: true }).then(() => { // 在进房之前，判断设备\r\n          this.Trtc.join()\r\n          this.ready = true\r\n          this.isCamOn = true\r\n          this.maskShow = false\r\n      }).catch(() => {\r\n        alert(\r\n          '请确认已连接摄像头和麦克风并授予其访问权限！'\r\n        )\r\n        this.ready = false\r\n      })\r\n    },\r\n    videoCall() { // 发起通话\r\n      if (this.calling) { // 避免通话按钮多次快速的点击\r\n        return\r\n      }\r\n      this.isLocalMain = true\r\n      this.$store.commit('GENERATE_VIDEO_ROOM') // 初始化房间号\r\n      const options = {\r\n        userId: this.userID,\r\n        userSig: this.userSig,\r\n        roomId: this.videoRoom,\r\n        sdkAppId: this.sdkAppID\r\n      }\r\n      this.initTrtc(options).then(() => {\r\n        if (!this.ready) return\r\n        this.changeState('dialling', true)\r\n        this.timer = setTimeout(this.timeout, process.env.NODE_ENV === 'development' ? 999999 : 60000) // 开始计时器，开发环境超时时间较长，便于调试\r\n        this.sendVideoMessage(ACTION.VIDEO_CALL_ACTION_DIALING)\r\n      })\r\n    },\r\n    leave() { // 离开房间，发起方挂断\r\n      if (!this.calling) { // 还没有通话，单方面挂断\r\n        this.Trtc.leave()\r\n        clearTimeout(this.timer)\r\n        this.changeState('dialling', false)\r\n        this.sendVideoMessage(ACTION.VIDEO_CALL_ACTION_SPONSOR_CANCEL)\r\n        return\r\n      }\r\n      this.hangUp() // 通话一段时间之后，某一方面结束通话\r\n    },\r\n    timeout() { // 通话超时\r\n      this.changeState('dialling', false)\r\n      this.Trtc.leave()\r\n      this.sendVideoMessage(ACTION.VIDEO_CALL_ACTION_SPONSOR_TIMEOUT)\r\n    },\r\n    isCalled() { // 被呼叫\r\n      this.changeState('isDialled', true)\r\n    },\r\n    missCall() { // 错过电话，也就是发起方的电话超时挂断或自己挂断\r\n      this.changeState('isDialled', false)\r\n    },\r\n    refuse() { // 拒绝电话\r\n      this.changeState('isDialled', false)\r\n      this.sendVideoMessage(ACTION.VIDEO_CALL_ACTION_REJECT)\r\n    },\r\n    isRefused() { // 对方拒绝通话\r\n      this.changeState('dialling', false)\r\n      clearTimeout(this.timer)\r\n    },\r\n    resetDuration(duration) {\r\n      this.duration = duration\r\n      this.hangUpTimer = setTimeout(() => {\r\n        let now = new Date()\r\n        this.resetDuration(parseInt((now - this.start) / 1000))\r\n      }, 1000)\r\n    },\r\n    accept() { // 接听电话\r\n      this.changeState('calling', true)\r\n      const options = {\r\n       userId: this.userID,\r\n        userSig: this.userSig,\r\n        roomId: this.videoRoom,\r\n        sdkAppId: this.sdkAppID\r\n      }\r\n      this.initTrtc(options).then(() => {\r\n        if (!this.ready) {\r\n          this.changeState('calling', false)\r\n          this.sendVideoMessage(ACTION.VIDEO_CALL_ACTION_ERROR)\r\n          return\r\n        }\r\n        this.sendVideoMessage(ACTION.VIDEO_CALL_ACTION_ACCEPTED)\r\n        this.start = new Date()\r\n        clearTimeout(this.hangUpTimer)\r\n        this.resetDuration(0)\r\n      })\r\n    },\r\n    isAccept() { // 对方接听自己发起的电话\r\n      clearTimeout(this.timer)\r\n      this.changeState('calling', true)\r\n      clearTimeout(this.hangUpTimer)\r\n      this.resetDuration(0)\r\n      this.start = new Date()\r\n    },\r\n    hangUp() { // 通话一段时间之后，某一方挂断电话\r\n      this.changeState('calling', false)\r\n      this.Trtc.leave()\r\n      this.end = new Date()\r\n      const duration = parseInt((this.end - this.start) / 1000)\r\n      this.sendVideoMessage(ACTION.VIDEO_CALL_ACTION_HANGUP, duration)\r\n      clearTimeout(this.hangUpTimer)\r\n    },\r\n    isHungUp() { // 通话一段时间之后，对方挂断电话\r\n      if (this.calling) {\r\n        this.changeState('calling', false)\r\n        this.Trtc.leave()\r\n        clearTimeout(this.hangUpTimer)\r\n      }\r\n    },\r\n    busy(videoPayload, messageItem) {\r\n      videoPayload.action = ACTION.VIDEO_CALL_ACTION_LINE_BUSY\r\n      const message = this.tim.createCustomMessage({\r\n        to: messageItem.from,\r\n        conversationType: this.currentConversationType,\r\n        payload: {\r\n          data: JSON.stringify(videoPayload),\r\n          description: '',\r\n          extension: ''\r\n        }\r\n      })\r\n      this.$store.commit('pushCurrentMessageList', message)\r\n      this.tim.sendMessage(message)\r\n    },\r\n    videoHandler() { // 是否打开摄像头\r\n      if (this.isCamOn) {\r\n        this.isCamOn = false\r\n        this.maskShow = true\r\n        this.Trtc.muteLocalVideo()\r\n      } else {\r\n        this.isCamOn = true\r\n        this.maskShow = false\r\n        this.Trtc.unmuteLocalVideo()\r\n      }\r\n    },\r\n    micHandler() { // 是否打开麦克风\r\n      if (this.isMicOn) {\r\n        this.isMicOn = false\r\n        this.Trtc.muteLocalAudio()\r\n      } else {\r\n        this.isMicOn = true\r\n        this.Trtc.unmuteLocalAudio()\r\n      }\r\n    },\r\n    sendVideoMessage(action, duration = 0) {\r\n      const options = {\r\n        room_id: this.videoRoom,\r\n        call_id: '',\r\n        action,\r\n        version: VERSION,\r\n        invited_list: [],\r\n        duration\r\n      }\r\n      const message = this.tim.createCustomMessage({\r\n        to: this.toAccount,\r\n        conversationType: this.currentConversationType,\r\n        payload: {\r\n          data: JSON.stringify(options),\r\n          description: '',\r\n          extension: ''\r\n        }\r\n      })\r\n      this.$store.commit('pushCurrentMessageList', message)\r\n      this.tim.sendMessage(message)\r\n    },\r\n    changeMainVideo() {\r\n      if (!this.calling) {\r\n        return\r\n      }\r\n      this.isLocalMain = !this.isLocalMain\r\n    }\r\n  }\r\n}\r\n",null]}