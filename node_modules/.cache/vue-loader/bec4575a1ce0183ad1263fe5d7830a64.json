{"remainingRequest":"D:\\HCI\\github\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\HCI\\github\\src\\components\\voice.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\HCI\\github\\src\\components\\voice.vue","mtime":1589122703618},{"path":"D:\\HCI\\github\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589122691350},{"path":"D:\\HCI\\github\\node_modules\\babel-loader\\lib\\index.js","mtime":1589122690916},{"path":"D:\\HCI\\github\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589122691350},{"path":"D:\\HCI\\github\\node_modules\\vue-loader\\lib\\index.js","mtime":1589122702780}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport TRTC from 'trtc-js-sdk'\r\nimport {TEST_ACCOUNT} from '../const/account_dev'\r\nexport default {\r\n  name: 'voiceCommunicate',\r\n  components: {\r\n  },\r\n  data() {\r\n    return {\r\n      sdkAppId: TEST_ACCOUNT.sdkAppId,\r\n      userId: TEST_ACCOUNT.userId + (Math.random() * 100).toFixed(),\r\n      userToken: TEST_ACCOUNT.userToken,\r\n      client: '',\r\n      localStream: '',\r\n      roomId: '1',\r\n      remoteVideo: [],\r\n      isSignUp: false\r\n    }\r\n  },\r\n  created() {\r\n  },\r\n  methods: {\r\n        voicecommunicate(){\r\n            if(this.isOpenVoice===false)\r\n            {\r\n                this.isOpenVoice=true\r\n                this.msg=this.msg2\r\n                this.createClient()\r\n            }else{\r\n                this.isOpenVoice=false\r\n                this.msg=this.msg1\r\n                this.signOut()\r\n            }\r\n        },\r\n       createClient() {\r\n      //获取签名\r\n      const config = this.genTestUserSig()\r\n      const sdkAppId = config.sdkAppId\r\n      const userSig = config.userSig\r\n      this.client = TRTC.createClient({\r\n        mode: 'videoCall',\r\n        sdkAppId,\r\n        userId: this.userId,\r\n        userSig,\r\n      });\r\n      console.log(sdkAppId,this.userId,userSig,111111111)\r\n      //注册远程监听，要放在加入房间前--这里用了发布订阅模式\r\n      this.subscribeStream()\r\n      this.joinRoom(this.roomId)\r\n\r\n    },\r\n\r\n    //加入房间\r\n    joinRoom (roomId) {\r\n      if(!this.isSignUp) {\r\n        this.client.join({ roomId })\r\n          .then(() => {\r\n            console.log('进房成功');\r\n            this.isSignUp = true;\r\n            //创建本地流\r\n            this.createStream(this.userId)\r\n            // //播放远端流\r\n            this.playRemoteStream(this.client)\r\n          })\r\n          .catch(error => {\r\n            console.error('进房失败 ' + error);\r\n          })\r\n      } else {\r\n        alert('不能重复加入直播间')\r\n      }\r\n\r\n    },\r\n\r\n    createStream(userId) {\r\n      const localStream = TRTC.createStream({ userId, audio: true, video: false });\r\n      this.localStream =localStream\r\n\r\n      localStream\r\n        .initialize()\r\n        .catch(error => {\r\n          console.error('初始化本地流失败 ' + error);\r\n        })\r\n        .then(() => {\r\n          console.log('初始化本地流成功');\r\n          localStream.play('local_stream');\r\n          //创建好后才能发布\r\n          this.publishStream(localStream)\r\n        });\r\n    },\r\n\r\n    publishStream(localStream) {\r\n      this.client\r\n        .publish(localStream)\r\n        .catch(error => {\r\n          console.error('本地流发布失败 ' + error);\r\n        })\r\n        .then(() => {\r\n          console.log('本地流发布成功');\r\n        });\r\n    },\r\n\r\n    playRemoteStream() {\r\n      this.client.on('stream-subscribed', event => {\r\n        const remoteStream = event.stream;\r\n        console.log('远端流订阅成功：' + remoteStream.getId());\r\n        this.remoteVideo.push(remoteStream.getId())\r\n        // 播放远端流\r\n        this.$nextTick(()=>{\r\n        remoteStream.play('remote_stream'+ remoteStream.getId());\r\n        },1000)\r\n\r\n      })\r\n\r\n    },\r\n\r\n    //订阅远端流--加入房间之前\r\n    subscribeStream () {\r\n      this.client.on('stream-added', event => {\r\n        const remoteStream = event.stream;\r\n        console.log('远端流增加: ' + remoteStream.getId());\r\n        //订阅远端流\r\n        this.client.subscribe(remoteStream);\r\n      });\r\n    },\r\n\r\n    signOut() {\r\n      this.isSignUp=false;\r\n      this.remoteVideo=[];\r\n      this.client\r\n      .leave()\r\n      .then(() => {\r\n        // 退房成功，可再次调用client.join重新进房开启新的通话。\r\n        console.log('退出直播间')\r\n      })\r\n      .catch(error => {\r\n        console.error('退出直播间失败 ' + error);\r\n        // 错误不可恢复，需要刷新页面。\r\n      });\r\n    },\r\n\r\n    genTestUserSig() {\r\n      const USERID = this.userId\r\n      const SDKAPPID = this.sdkAppId;\r\n      const EXPIRETIME = 604800;\r\n      const SECRETKEY = this.userToken;\r\n      if (SDKAPPID === '' || SECRETKEY === '') {\r\n        alert(\r\n          '请先配置好您的账号信息： SDKAPPID 及 SECRETKEY ' +\r\n            '\\r\\n\\r\\nPlease configure your SDKAPPID/SECRETKEY in js/debug/GenerateTestUserSig.js'\r\n        );\r\n      }\r\n      const generator = new window.LibGenerateTestUserSig(SDKAPPID, SECRETKEY, EXPIRETIME);\r\n      const userSig = generator.genTestUserSig(USERID);\r\n      return {\r\n        sdkAppId: SDKAPPID,\r\n        userSig: userSig\r\n      };\r\n    }\r\n    }\r\n}\r\n",{"version":3,"sources":["voice.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAafile":"voice.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <el-button type=\"primary\" @click=\"createClient\">开麦</el-button>\r\n    <el-button type=\"primary\" @click=\"signOut\">关麦</el-button>\r\n    <div id='local_stream' class='video'></div>\r\n    <template v-for=\"item in remoteVideo\" >\r\n      <div :id=\"'remote_stream'+ item\" class='video' :key='item'></div>\r\n    </template>\r\n    {{remoteVideo}}\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport TRTC from 'trtc-js-sdk'\r\nimport {TEST_ACCOUNT} from '../const/account_dev'\r\nexport default {\r\n  name: 'voiceCommunicate',\r\n  components: {\r\n  },\r\n  data() {\r\n    return {\r\n      sdkAppId: TEST_ACCOUNT.sdkAppId,\r\n      userId: TEST_ACCOUNT.userId + (Math.random() * 100).toFixed(),\r\n      userToken: TEST_ACCOUNT.userToken,\r\n      client: '',\r\n      localStream: '',\r\n      roomId: '1',\r\n      remoteVideo: [],\r\n      isSignUp: false\r\n    }\r\n  },\r\n  created() {\r\n  },\r\n  methods: {\r\n        voicecommunicate(){\r\n            if(this.isOpenVoice===false)\r\n            {\r\n                this.isOpenVoice=true\r\n                this.msg=this.msg2\r\n                this.createClient()\r\n            }else{\r\n                this.isOpenVoice=false\r\n                this.msg=this.msg1\r\n                this.signOut()\r\n            }\r\n        },\r\n       createClient() {\r\n      //获取签名\r\n      const config = this.genTestUserSig()\r\n      const sdkAppId = config.sdkAppId\r\n      const userSig = config.userSig\r\n      this.client = TRTC.createClient({\r\n        mode: 'videoCall',\r\n        sdkAppId,\r\n        userId: this.userId,\r\n        userSig,\r\n      });\r\n      console.log(sdkAppId,this.userId,userSig,111111111)\r\n      //注册远程监听，要放在加入房间前--这里用了发布订阅模式\r\n      this.subscribeStream()\r\n      this.joinRoom(this.roomId)\r\n\r\n    },\r\n\r\n    //加入房间\r\n    joinRoom (roomId) {\r\n      if(!this.isSignUp) {\r\n        this.client.join({ roomId })\r\n          .then(() => {\r\n            console.log('进房成功');\r\n            this.isSignUp = true;\r\n            //创建本地流\r\n            this.createStream(this.userId)\r\n            // //播放远端流\r\n            this.playRemoteStream(this.client)\r\n          })\r\n          .catch(error => {\r\n            console.error('进房失败 ' + error);\r\n          })\r\n      } else {\r\n        alert('不能重复加入直播间')\r\n      }\r\n\r\n    },\r\n\r\n    createStream(userId) {\r\n      const localStream = TRTC.createStream({ userId, audio: true, video: false });\r\n      this.localStream =localStream\r\n\r\n      localStream\r\n        .initialize()\r\n        .catch(error => {\r\n          console.error('初始化本地流失败 ' + error);\r\n        })\r\n        .then(() => {\r\n          console.log('初始化本地流成功');\r\n          localStream.play('local_stream');\r\n          //创建好后才能发布\r\n          this.publishStream(localStream)\r\n        });\r\n    },\r\n\r\n    publishStream(localStream) {\r\n      this.client\r\n        .publish(localStream)\r\n        .catch(error => {\r\n          console.error('本地流发布失败 ' + error);\r\n        })\r\n        .then(() => {\r\n          console.log('本地流发布成功');\r\n        });\r\n    },\r\n\r\n    playRemoteStream() {\r\n      this.client.on('stream-subscribed', event => {\r\n        const remoteStream = event.stream;\r\n        console.log('远端流订阅成功：' + remoteStream.getId());\r\n        this.remoteVideo.push(remoteStream.getId())\r\n        // 播放远端流\r\n        this.$nextTick(()=>{\r\n        remoteStream.play('remote_stream'+ remoteStream.getId());\r\n        },1000)\r\n\r\n      })\r\n\r\n    },\r\n\r\n    //订阅远端流--加入房间之前\r\n    subscribeStream () {\r\n      this.client.on('stream-added', event => {\r\n        const remoteStream = event.stream;\r\n        console.log('远端流增加: ' + remoteStream.getId());\r\n        //订阅远端流\r\n        this.client.subscribe(remoteStream);\r\n      });\r\n    },\r\n\r\n    signOut() {\r\n      this.isSignUp=false;\r\n      this.remoteVideo=[];\r\n      this.client\r\n      .leave()\r\n      .then(() => {\r\n        // 退房成功，可再次调用client.join重新进房开启新的通话。\r\n        console.log('退出直播间')\r\n      })\r\n      .catch(error => {\r\n        console.error('退出直播间失败 ' + error);\r\n        // 错误不可恢复，需要刷新页面。\r\n      });\r\n    },\r\n\r\n    genTestUserSig() {\r\n      const USERID = this.userId\r\n      const SDKAPPID = this.sdkAppId;\r\n      const EXPIRETIME = 604800;\r\n      const SECRETKEY = this.userToken;\r\n      if (SDKAPPID === '' || SECRETKEY === '') {\r\n        alert(\r\n          '请先配置好您的账号信息： SDKAPPID 及 SECRETKEY ' +\r\n            '\\r\\n\\r\\nPlease configure your SDKAPPID/SECRETKEY in js/debug/GenerateTestUserSig.js'\r\n        );\r\n      }\r\n      const generator = new window.LibGenerateTestUserSig(SDKAPPID, SECRETKEY, EXPIRETIME);\r\n      const userSig = generator.genTestUserSig(USERID);\r\n      return {\r\n        sdkAppId: SDKAPPID,\r\n        userSig: userSig\r\n      };\r\n    }\r\n    }\r\n}\r\n</script>\r\n\r\n"]}]}