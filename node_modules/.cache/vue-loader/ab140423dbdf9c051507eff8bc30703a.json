{"remainingRequest":"D:\\HCI\\github\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\HCI\\github\\src\\components\\message\\message-bottom-send-box.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\HCI\\github\\src\\components\\message\\message-bottom-send-box.vue","mtime":1593418846937},{"path":"D:\\HCI\\github\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589122691350},{"path":"D:\\HCI\\github\\node_modules\\babel-loader\\lib\\index.js","mtime":1589122690916},{"path":"D:\\HCI\\github\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589122691350},{"path":"D:\\HCI\\github\\node_modules\\vue-loader\\lib\\index.js","mtime":1589122702780}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { mapGetters, mapState } from 'vuex'\r\nimport {\r\n  Form,\r\n  FormItem,\r\n  Input,\r\n  Dialog,\r\n  Popover,\r\n  RadioGroup,\r\n  Radio,\r\n  Tooltip,\r\n} from 'element-ui'\r\nimport { emojiMap, emojiName, emojiUrl } from '../../utils/emojiMap'\r\nimport VoiceCommunicate from '../voice'\r\n\r\nexport default {\r\n  name: 'message-send-box',\r\n  props: ['scrollMessageListToButtom'],\r\n  components: {\r\n    ElInput: Input,\r\n    ElForm: Form,\r\n    ElFormItem: FormItem,\r\n    ElDialog: Dialog,\r\n    ElPopover: Popover,\r\n    ElRadioGroup: RadioGroup,\r\n    ElRadio: Radio,\r\n    ElTooltip: Tooltip,\r\n    VoiceCommunicate: VoiceCommunicate,\r\n  },\r\n  data() {\r\n    return {\r\n      colors: ['#99A9BF', '#F7BA2A', '#FF9900'],\r\n      messageContent: '',\r\n      isSendCustomMessage: false,\r\n      sendCustomDialogVisible: false,\r\n      form: {\r\n        data: '',\r\n        description: '',\r\n        extension: ''\r\n      },\r\n      file: '',\r\n      emojiMap: emojiMap,\r\n      emojiName: emojiName,\r\n      emojiUrl: emojiUrl,\r\n      showAtGroupMember: false,\r\n      atUserID: '',\r\n      focus: false\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters(['toAccount', 'currentConversationType']),\r\n    ...mapState({\r\n      memberList: state => state.group.currentMemberList,\r\n      userID: state => state.user.userID,\r\n      currentUserProfile: state => state.user.currentUserProfile,\r\n    })\r\n  },\r\n  mounted() {\r\n    this.$refs['text-input'].addEventListener('paste', this.handlePaste)\r\n    this.$bus.$on('reEditMessage', this.reEditMessage)\r\n  },\r\n  beforeDestroy() {\r\n    this.$refs['text-input'].removeEventListener('paste', this.handlePaste)\r\n  },\r\n  methods: {\r\n    reEditMessage(payload) {\r\n      this.messageContent = payload\r\n    },\r\n    handleSelectAtUser() {\r\n      this.messageContent += this.atUserID + ' '\r\n      this.showAtGroupMember = false\r\n    },\r\n    handleUp() {\r\n      const index = this.memberList.findIndex(\r\n        member => member.userID === this.atUserID\r\n      )\r\n      if (index - 1 < 0) {\r\n        return\r\n      }\r\n      this.atUserID = this.memberList[index - 1].userID\r\n    },\r\n    handleDown() {\r\n      const index = this.memberList.findIndex(\r\n        member => member.userID === this.atUserID\r\n      )\r\n      if (index + 1 >= this.memberList.length) {\r\n        return\r\n      }\r\n      this.atUserID = this.memberList[index + 1].userID\r\n    },\r\n    handleEnter() {\r\n      if (this.showAtGroupMember) {\r\n        this.handleSelectAtUser()\r\n      } else {\r\n        this.sendTextMessage()\r\n      }\r\n    },\r\n    handleLine() {\r\n      this.messageContent += '\\n'\r\n    },\r\n    handleAt() {\r\n      this.showAtGroupMember = true\r\n      this.messageContent += '@'\r\n    },\r\n    handlePaste(e) {\r\n      let clipboardData = e.clipboardData\r\n      let file\r\n      if (\r\n        clipboardData &&\r\n        clipboardData.files &&\r\n        clipboardData.files.length > 0\r\n      ) {\r\n        file = clipboardData.files[0]\r\n      }\r\n\r\n      if (typeof file === 'undefined') {\r\n        return\r\n      }\r\n      // 1. 创建消息实例，接口返回的实例可以上屏\r\n      let message = this.tim.createImageMessage({\r\n        to: this.toAccount,\r\n        conversationType: this.currentConversationType,\r\n        payload: {\r\n          file: file\r\n        },\r\n        onProgress: percent => {\r\n          this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\r\n        }\r\n      })\r\n      this.$store.commit('pushCurrentMessageList', message)\r\n\r\n      // 2. 发送消息\r\n      let promise = this.tim.sendMessage(message)\r\n      promise.catch(error => {\r\n        this.$store.commit('showMessage', {\r\n          type: 'error',\r\n          message: error.message\r\n        })\r\n      })\r\n    },\r\n    dropHandler(e) {\r\n      e.preventDefault()\r\n      let file = e.dataTransfer.files[0]\r\n      let message = {}\r\n      if (file.type === 'video/mp4') {\r\n        message = this.tim.createVideoMessage({\r\n          to: this.toAccount,\r\n          conversationType: this.currentConversationType,\r\n          payload: {\r\n            file: file\r\n          },\r\n          onProgress: percent => {\r\n            this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\r\n          }\r\n        })\r\n      } else {\r\n        message = this.tim.createFileMessage({\r\n          to: this.toAccount,\r\n          conversationType: this.currentConversationType,\r\n          payload: {\r\n            file: file\r\n          },\r\n          onProgress: percent => {\r\n            this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\r\n          }\r\n        })\r\n      }\r\n      this.$store.commit('pushCurrentMessageList', message)\r\n      this.tim\r\n        .sendMessage(message)\r\n        .then(() => {\r\n          this.$refs.videoPicker.value = null\r\n        })\r\n        .catch(imError => {\r\n          this.$store.commit('showMessage', {\r\n            message: imError.message,\r\n            type: 'error'\r\n          })\r\n        })\r\n    },\r\n    sendTextMessage() {\r\n      if (\r\n        this.messageContent === '' ||\r\n        this.messageContent.trim().length === 0\r\n      ) {\r\n        this.messageContent = ''\r\n        this.$store.commit('showMessage', {\r\n          message: '不能发送空消息哦！',\r\n          type: 'info'\r\n        })\r\n        return\r\n      }\r\n      const message = this.tim.createTextMessage({\r\n        to: this.toAccount,\r\n        conversationType: this.currentConversationType,\r\n        payload: { text: this.messageContent }\r\n      })\r\n      let content = this.messageContent\r\n      this.$store.commit('pushCurrentMessageList', message)\r\n      this.$bus.$emit('scroll-bottom')\r\n      this.tim.sendMessage(message).then(() => {\r\n        this.$parent.addToList([{\r\n          type: this.TIM.TYPES.MSG_TEXT,\r\n          avatar: this.currentUserProfile.avatar,\r\n          nick: this.currentUserProfile.nick,\r\n          payload: { text: content }\r\n        }])\r\n      }).catch(error => {\r\n        this.$store.commit('showMessage', {\r\n          type: 'error',\r\n          message: error.message\r\n        })\r\n      })\r\n      this.messageContent = ''\r\n    },\r\n    sendCustomMessage() {\r\n      if (\r\n        this.form.data.length === 0 &&\r\n        this.form.description.length === 0 &&\r\n        this.form.extension.length === 0\r\n      ) {\r\n        this.$store.commit('showMessage', {\r\n          message: '不能发送空消息',\r\n          type: 'info'\r\n        })\r\n        return\r\n      }\r\n      const message = this.tim.createCustomMessage({\r\n        to: this.toAccount,\r\n        conversationType: this.currentConversationType,\r\n        payload: {\r\n          data: this.form.data,\r\n          description: this.form.description,\r\n          extension: this.form.extension\r\n        }\r\n      })\r\n      this.$store.commit('pushCurrentMessageList', message)\r\n      this.tim.sendMessage(message).catch(error => {\r\n        this.$store.commit('showMessage', {\r\n          type: 'error',\r\n          message: error.message\r\n        })\r\n      })\r\n      Object.assign(this.form, {\r\n        data: '',\r\n        description: '',\r\n        extension: ''\r\n      })\r\n      this.sendCustomDialogVisible = false\r\n    },\r\n    random(min, max) {\r\n      return Math.floor(Math.random() * (max - min + 1) + min)\r\n    },\r\n    chooseEmoji(item) {\r\n      this.messageContent += item\r\n    },\r\n    handleSendImageClick() {\r\n      this.$refs.imagePicker.click()\r\n    },\r\n    handleSendFileClick() {\r\n      this.$refs.filePicker.click()\r\n    },\r\n    handleSendVideoClick() {\r\n      this.$refs.videoPicker.click()\r\n    },\r\n    videoCall() {\r\n      this.$bus.$emit('video-call')\r\n    },\r\n    sendImage() {\r\n      const message = this.tim.createImageMessage({\r\n        to: this.toAccount,\r\n        conversationType: this.currentConversationType,\r\n        payload: {\r\n          file: document.getElementById('imagePicker') // 或者用event.target\r\n        },\r\n        onProgress: percent => {\r\n          this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\r\n        }\r\n      })\r\n      this.$store.commit('pushCurrentMessageList', message)\r\n      this.tim\r\n        .sendMessage(message)\r\n        .then(() => {\r\n        })\r\n        .catch(imError => {\r\n          this.$store.commit('showMessage', {\r\n            message: imError.message,\r\n            type: 'error'\r\n          })\r\n        })\r\n      this.$refs.imagePicker.value = null\r\n    },\r\n    sendFile() {\r\n      const message = this.tim.createFileMessage({\r\n        to: this.toAccount,\r\n        conversationType: this.currentConversationType,\r\n        payload: {\r\n          file: document.getElementById('filePicker') // 或者用event.target\r\n        },\r\n        onProgress: percent => {\r\n          this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\r\n        }\r\n      })\r\n      this.$store.commit('pushCurrentMessageList', message)\r\n      this.tim\r\n        .sendMessage(message)\r\n        .then(() => {\r\n        })\r\n        .catch(imError => {\r\n          this.$store.commit('showMessage', {\r\n            message: imError.message,\r\n            type: 'error'\r\n          })\r\n        })\r\n      this.$refs.filePicker.value = null\r\n    },\r\n    sendVideo() {\r\n      const message = this.tim.createVideoMessage({\r\n        to: this.toAccount,\r\n        conversationType: this.currentConversationType,\r\n        payload: {\r\n          file: document.getElementById('videoPicker') // 或者用event.target\r\n        },\r\n        onProgress: percent => {\r\n          this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\r\n        }\r\n      })\r\n      this.$store.commit('pushCurrentMessageList', message)\r\n      this.tim\r\n        .sendMessage(message)\r\n        .then(() => {\r\n          this.$refs.videoPicker.value = null\r\n        })\r\n        .catch(imError => {\r\n          this.$store.commit('showMessage', {\r\n            message: imError.message,\r\n            type: 'error'\r\n          })\r\n        })\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["message-bottom-send-box.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"message-bottom-send-box.vue","sourceRoot":"src/components/message","sourcesContent":["<template>\r\n  <div id=\"message-send-box-wrapper\" :style=\"focus ? {'backgroundColor': 'white'} : {}\" @drop=\"dropHandler\">\r\n    <el-popover\r\n      trigger=\"manual\"\r\n      v-model=\"showAtGroupMember\"\r\n      placement=\"top\"\r\n      style=\"max-height:500px;overflow-y:scroll;\"\r\n    >\r\n      <el-radio-group\r\n        v-model=\"atUserID\"\r\n        style=\"display:flex;flex-decoration: column;\"\r\n        v-for=\"member in memberList\"\r\n        :key=\"member.userID\"\r\n        @change=\"handleSelectAtUser\"\r\n      >\r\n        <el-radio :label=\"member.userID\">{{ member.nameCard || member.nick || member.userID }}</el-radio>\r\n      </el-radio-group>\r\n    </el-popover>\r\n    <div class=\"bottom\">\r\n      <div class=\"voice\">\r\n        <VoiceCommunicate></VoiceCommunicate>\r\n      </div>\r\n      <el-popover placement=\"top\" width=\"600\" trigger=\"click\">\r\n        <div class=\"emojis\">\r\n          <div v-for=\"item in emojiName\" class=\"emoji\" :key=\"item\" @click=\"chooseEmoji(item)\">\r\n            <img :src=\"emojiUrl + emojiMap[item]\" style=\"width:30px;height:30px\" />\r\n          </div>\r\n        </div>\r\n        <i class=\"iconfont icon-smile emoji\" slot=\"reference\" title=\"发表情\"></i>\r\n      </el-popover>\r\n      <textarea\r\n        ref=\"text-input\"\r\n        rows=\"1\"\r\n        resize=\"false\"\r\n        v-model=\"messageContent\"\r\n        class=\"text-input\"\r\n        @focus=\"focus = true\"\r\n        @blur=\"focus = false\"\r\n        @keydown.enter.exact.prevent=\"handleEnter\"\r\n        @keyup.ctrl.enter.prevent.exact=\"handleLine\"\r\n        @keydown.shift.50.prevent.exact=\"handleAt\"\r\n        @keydown.up.stop=\"handleUp\"\r\n        @keydown.down.stop=\"handleDown\"\r\n      >\r\n      </textarea>\r\n      <el-tooltip\r\n              class=\"item\"\r\n              effect=\"dark\"\r\n              content=\"按Enter发送消息，Ctrl+Enter换行\"\r\n              placement=\"left-start\"\r\n      >\r\n        <div class=\"btn-send\" @click=\"sendTextMessage\">\r\n          <div class=\"tim-icon-send\"></div>\r\n        </div>\r\n      </el-tooltip>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters, mapState } from 'vuex'\r\nimport {\r\n  Form,\r\n  FormItem,\r\n  Input,\r\n  Dialog,\r\n  Popover,\r\n  RadioGroup,\r\n  Radio,\r\n  Tooltip,\r\n} from 'element-ui'\r\nimport { emojiMap, emojiName, emojiUrl } from '../../utils/emojiMap'\r\nimport VoiceCommunicate from '../voice'\r\n\r\nexport default {\r\n  name: 'message-send-box',\r\n  props: ['scrollMessageListToButtom'],\r\n  components: {\r\n    ElInput: Input,\r\n    ElForm: Form,\r\n    ElFormItem: FormItem,\r\n    ElDialog: Dialog,\r\n    ElPopover: Popover,\r\n    ElRadioGroup: RadioGroup,\r\n    ElRadio: Radio,\r\n    ElTooltip: Tooltip,\r\n    VoiceCommunicate: VoiceCommunicate,\r\n  },\r\n  data() {\r\n    return {\r\n      colors: ['#99A9BF', '#F7BA2A', '#FF9900'],\r\n      messageContent: '',\r\n      isSendCustomMessage: false,\r\n      sendCustomDialogVisible: false,\r\n      form: {\r\n        data: '',\r\n        description: '',\r\n        extension: ''\r\n      },\r\n      file: '',\r\n      emojiMap: emojiMap,\r\n      emojiName: emojiName,\r\n      emojiUrl: emojiUrl,\r\n      showAtGroupMember: false,\r\n      atUserID: '',\r\n      focus: false\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters(['toAccount', 'currentConversationType']),\r\n    ...mapState({\r\n      memberList: state => state.group.currentMemberList,\r\n      userID: state => state.user.userID,\r\n      currentUserProfile: state => state.user.currentUserProfile,\r\n    })\r\n  },\r\n  mounted() {\r\n    this.$refs['text-input'].addEventListener('paste', this.handlePaste)\r\n    this.$bus.$on('reEditMessage', this.reEditMessage)\r\n  },\r\n  beforeDestroy() {\r\n    this.$refs['text-input'].removeEventListener('paste', this.handlePaste)\r\n  },\r\n  methods: {\r\n    reEditMessage(payload) {\r\n      this.messageContent = payload\r\n    },\r\n    handleSelectAtUser() {\r\n      this.messageContent += this.atUserID + ' '\r\n      this.showAtGroupMember = false\r\n    },\r\n    handleUp() {\r\n      const index = this.memberList.findIndex(\r\n        member => member.userID === this.atUserID\r\n      )\r\n      if (index - 1 < 0) {\r\n        return\r\n      }\r\n      this.atUserID = this.memberList[index - 1].userID\r\n    },\r\n    handleDown() {\r\n      const index = this.memberList.findIndex(\r\n        member => member.userID === this.atUserID\r\n      )\r\n      if (index + 1 >= this.memberList.length) {\r\n        return\r\n      }\r\n      this.atUserID = this.memberList[index + 1].userID\r\n    },\r\n    handleEnter() {\r\n      if (this.showAtGroupMember) {\r\n        this.handleSelectAtUser()\r\n      } else {\r\n        this.sendTextMessage()\r\n      }\r\n    },\r\n    handleLine() {\r\n      this.messageContent += '\\n'\r\n    },\r\n    handleAt() {\r\n      this.showAtGroupMember = true\r\n      this.messageContent += '@'\r\n    },\r\n    handlePaste(e) {\r\n      let clipboardData = e.clipboardData\r\n      let file\r\n      if (\r\n        clipboardData &&\r\n        clipboardData.files &&\r\n        clipboardData.files.length > 0\r\n      ) {\r\n        file = clipboardData.files[0]\r\n      }\r\n\r\n      if (typeof file === 'undefined') {\r\n        return\r\n      }\r\n      // 1. 创建消息实例，接口返回的实例可以上屏\r\n      let message = this.tim.createImageMessage({\r\n        to: this.toAccount,\r\n        conversationType: this.currentConversationType,\r\n        payload: {\r\n          file: file\r\n        },\r\n        onProgress: percent => {\r\n          this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\r\n        }\r\n      })\r\n      this.$store.commit('pushCurrentMessageList', message)\r\n\r\n      // 2. 发送消息\r\n      let promise = this.tim.sendMessage(message)\r\n      promise.catch(error => {\r\n        this.$store.commit('showMessage', {\r\n          type: 'error',\r\n          message: error.message\r\n        })\r\n      })\r\n    },\r\n    dropHandler(e) {\r\n      e.preventDefault()\r\n      let file = e.dataTransfer.files[0]\r\n      let message = {}\r\n      if (file.type === 'video/mp4') {\r\n        message = this.tim.createVideoMessage({\r\n          to: this.toAccount,\r\n          conversationType: this.currentConversationType,\r\n          payload: {\r\n            file: file\r\n          },\r\n          onProgress: percent => {\r\n            this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\r\n          }\r\n        })\r\n      } else {\r\n        message = this.tim.createFileMessage({\r\n          to: this.toAccount,\r\n          conversationType: this.currentConversationType,\r\n          payload: {\r\n            file: file\r\n          },\r\n          onProgress: percent => {\r\n            this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\r\n          }\r\n        })\r\n      }\r\n      this.$store.commit('pushCurrentMessageList', message)\r\n      this.tim\r\n        .sendMessage(message)\r\n        .then(() => {\r\n          this.$refs.videoPicker.value = null\r\n        })\r\n        .catch(imError => {\r\n          this.$store.commit('showMessage', {\r\n            message: imError.message,\r\n            type: 'error'\r\n          })\r\n        })\r\n    },\r\n    sendTextMessage() {\r\n      if (\r\n        this.messageContent === '' ||\r\n        this.messageContent.trim().length === 0\r\n      ) {\r\n        this.messageContent = ''\r\n        this.$store.commit('showMessage', {\r\n          message: '不能发送空消息哦！',\r\n          type: 'info'\r\n        })\r\n        return\r\n      }\r\n      const message = this.tim.createTextMessage({\r\n        to: this.toAccount,\r\n        conversationType: this.currentConversationType,\r\n        payload: { text: this.messageContent }\r\n      })\r\n      let content = this.messageContent\r\n      this.$store.commit('pushCurrentMessageList', message)\r\n      this.$bus.$emit('scroll-bottom')\r\n      this.tim.sendMessage(message).then(() => {\r\n        this.$parent.addToList([{\r\n          type: this.TIM.TYPES.MSG_TEXT,\r\n          avatar: this.currentUserProfile.avatar,\r\n          nick: this.currentUserProfile.nick,\r\n          payload: { text: content }\r\n        }])\r\n      }).catch(error => {\r\n        this.$store.commit('showMessage', {\r\n          type: 'error',\r\n          message: error.message\r\n        })\r\n      })\r\n      this.messageContent = ''\r\n    },\r\n    sendCustomMessage() {\r\n      if (\r\n        this.form.data.length === 0 &&\r\n        this.form.description.length === 0 &&\r\n        this.form.extension.length === 0\r\n      ) {\r\n        this.$store.commit('showMessage', {\r\n          message: '不能发送空消息',\r\n          type: 'info'\r\n        })\r\n        return\r\n      }\r\n      const message = this.tim.createCustomMessage({\r\n        to: this.toAccount,\r\n        conversationType: this.currentConversationType,\r\n        payload: {\r\n          data: this.form.data,\r\n          description: this.form.description,\r\n          extension: this.form.extension\r\n        }\r\n      })\r\n      this.$store.commit('pushCurrentMessageList', message)\r\n      this.tim.sendMessage(message).catch(error => {\r\n        this.$store.commit('showMessage', {\r\n          type: 'error',\r\n          message: error.message\r\n        })\r\n      })\r\n      Object.assign(this.form, {\r\n        data: '',\r\n        description: '',\r\n        extension: ''\r\n      })\r\n      this.sendCustomDialogVisible = false\r\n    },\r\n    random(min, max) {\r\n      return Math.floor(Math.random() * (max - min + 1) + min)\r\n    },\r\n    chooseEmoji(item) {\r\n      this.messageContent += item\r\n    },\r\n    handleSendImageClick() {\r\n      this.$refs.imagePicker.click()\r\n    },\r\n    handleSendFileClick() {\r\n      this.$refs.filePicker.click()\r\n    },\r\n    handleSendVideoClick() {\r\n      this.$refs.videoPicker.click()\r\n    },\r\n    videoCall() {\r\n      this.$bus.$emit('video-call')\r\n    },\r\n    sendImage() {\r\n      const message = this.tim.createImageMessage({\r\n        to: this.toAccount,\r\n        conversationType: this.currentConversationType,\r\n        payload: {\r\n          file: document.getElementById('imagePicker') // 或者用event.target\r\n        },\r\n        onProgress: percent => {\r\n          this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\r\n        }\r\n      })\r\n      this.$store.commit('pushCurrentMessageList', message)\r\n      this.tim\r\n        .sendMessage(message)\r\n        .then(() => {\r\n        })\r\n        .catch(imError => {\r\n          this.$store.commit('showMessage', {\r\n            message: imError.message,\r\n            type: 'error'\r\n          })\r\n        })\r\n      this.$refs.imagePicker.value = null\r\n    },\r\n    sendFile() {\r\n      const message = this.tim.createFileMessage({\r\n        to: this.toAccount,\r\n        conversationType: this.currentConversationType,\r\n        payload: {\r\n          file: document.getElementById('filePicker') // 或者用event.target\r\n        },\r\n        onProgress: percent => {\r\n          this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\r\n        }\r\n      })\r\n      this.$store.commit('pushCurrentMessageList', message)\r\n      this.tim\r\n        .sendMessage(message)\r\n        .then(() => {\r\n        })\r\n        .catch(imError => {\r\n          this.$store.commit('showMessage', {\r\n            message: imError.message,\r\n            type: 'error'\r\n          })\r\n        })\r\n      this.$refs.filePicker.value = null\r\n    },\r\n    sendVideo() {\r\n      const message = this.tim.createVideoMessage({\r\n        to: this.toAccount,\r\n        conversationType: this.currentConversationType,\r\n        payload: {\r\n          file: document.getElementById('videoPicker') // 或者用event.target\r\n        },\r\n        onProgress: percent => {\r\n          this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\r\n        }\r\n      })\r\n      this.$store.commit('pushCurrentMessageList', message)\r\n      this.tim\r\n        .sendMessage(message)\r\n        .then(() => {\r\n          this.$refs.videoPicker.value = null\r\n        })\r\n        .catch(imError => {\r\n          this.$store.commit('showMessage', {\r\n            message: imError.message,\r\n            type: 'error'\r\n          })\r\n        })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"stylus\" scoped>\r\n#message-send-box-wrapper {\r\n  box-sizing: border-box;\r\n  overflow: hidden;\r\n  padding: 10%;\r\n}\r\n.emoji {\r\n  padding: 8px;\r\n  font-size: 18px;\r\n}\r\n\r\n.emojis {\r\n  height: 150px;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  overflow-y: scroll;\r\n}\r\n\r\n.send-header-bar {\r\n  box-sizing: border-box;\r\n  padding: 3px 0 0 0;\r\n  flex-direction: row,\r\n}\r\n\r\n.send-header-bar i {\r\n  cursor: pointer;\r\n  font-size: 24px;\r\n  color: gray;\r\n  margin: 0 12px 0 0;\r\n}\r\n\r\n.send-header-bar i:hover {\r\n  color: $black;\r\n}\r\n\r\ntextarea {\r\n  resize: none;\r\n}\r\n\r\n.text-input {\r\n  font-size: 16px;\r\n  width: 72%;\r\n  box-sizing: box-sizing;\r\n  border: none;\r\n  outline: none;\r\n  background-color: transparent;\r\n}\r\n\r\n.block {\r\n  padding: 10px 0;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.bottom {\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n\r\n  .btn-send {\r\n    cursor: pointer;\r\n    position: absolute;\r\n    color: $primary;\r\n    font-size: 30px;\r\n    right: 0;\r\n    bottom: -5px;\r\n    padding: 6px 6px 4px 4px;\r\n    border-radius: 50%;\r\n  }\r\n}\r\n\r\n.voice {\r\n  padding: 4px;\r\n}\r\n</style>\r\n"]}]}