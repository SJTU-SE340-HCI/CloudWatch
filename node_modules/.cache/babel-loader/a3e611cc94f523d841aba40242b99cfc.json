{"remainingRequest":"D:\\HCI\\github\\node_modules\\babel-loader\\lib\\index.js!D:\\HCI\\github\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\HCI\\github\\src\\store\\modules\\conversation.js","dependencies":[{"path":"D:\\HCI\\github\\src\\store\\modules\\conversation.js","mtime":1589122703623},{"path":"D:\\HCI\\github\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589122691350},{"path":"D:\\HCI\\github\\node_modules\\babel-loader\\lib\\index.js","mtime":1589122690916},{"path":"D:\\HCI\\github\\node_modules\\eslint-loader\\index.js","mtime":1589122694623}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport _toConsumableArray from \"D:\\\\HCI\\\\github\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport tim from 'tim';\nimport TIM from 'tim-js-sdk';\nimport store from '..';\nimport { titleNotify } from \"../../utils\";\nvar conversationModules = {\n  state: {\n    currentConversation: {},\n    currentMessageList: [],\n    nextReqMessageID: '',\n    isCompleted: false,\n    // 当前会话消息列表是否已经拉完了所有消息\n    conversationList: []\n  },\n  getters: {\n    toAccount: function toAccount(state) {\n      if (!state.currentConversation || !state.currentConversation.conversationID) {\n        return '';\n      }\n\n      switch (state.currentConversation.type) {\n        case 'C2C':\n          return state.currentConversation.conversationID.replace('C2C', '');\n\n        case 'GROUP':\n          return state.currentConversation.conversationID.replace('GROUP', '');\n\n        default:\n          return state.currentConversation.conversationID;\n      }\n    },\n    currentConversationType: function currentConversationType(state) {\n      if (!state.currentConversation || !state.currentConversation.type) {\n        return '';\n      }\n\n      return state.currentConversation.type;\n    },\n    totalUnreadCount: function totalUnreadCount(state) {\n      var result = state.conversationList.reduce(function (count, conversation) {\n        // 当前会话不计算总未读\n        if (!store.getters.hidden && state.currentConversation.conversationID === conversation.conversationID) {\n          return count;\n        }\n\n        return count + conversation.unreadCount;\n      }, 0);\n      titleNotify(result);\n      return result;\n    },\n    // 用于当前会话的图片预览\n    imgUrlList: function imgUrlList(state) {\n      return state.currentMessageList.filter(function (message) {\n        return message.type === TIM.TYPES.MSG_IMAGE && !message.isRevoked;\n      }) // 筛选出没有撤回并且类型是图片类型的消息\n      .map(function (message) {\n        return message.payload.imageInfoArray[0].url;\n      });\n    }\n  },\n  mutations: {\n    /**\r\n     * 更新当前会话\r\n     * 调用时机: 切换会话时\r\n     * @param {Object} state\r\n     * @param {Conversation} conversation\r\n     */\n    updateCurrentConversation: function updateCurrentConversation(state, conversation) {\n      state.currentConversation = conversation;\n      state.currentMessageList = [];\n      state.nextReqMessageID = '';\n      state.isCompleted = false;\n    },\n\n    /**\r\n     * 更新会话列表\r\n     * 调用时机：触发会话列表更新事件时。CONVERSATION_LIST_UPDATED\r\n     * @param {Object} state\r\n     * @param {Conversation[]} conversationList\r\n     */\n    updateConversationList: function updateConversationList(state, conversationList) {\n      state.conversationList = conversationList;\n    },\n\n    /**\r\n     * 重置当前会话\r\n     * 调用时机：需要重置当前会话时，例如：当前会话是一个群组，正好被踢出群时（被踢群事件触发），重置当前会话\r\n     * @param {Object} state\r\n     */\n    resetCurrentConversation: function resetCurrentConversation(state) {\n      state.currentConversation = {};\n    },\n\n    /**\r\n     * 将消息插入当前会话列表\r\n     * 调用时机：收/发消息事件触发时\r\n     * @param {Object} state\r\n     * @param {Message[]|Message} data\r\n     * @returns\r\n     */\n    pushCurrentMessageList: function pushCurrentMessageList(state, data) {\n      // 还没当前会话，则跳过\n      if (!state.currentConversation.conversationID) {\n        return;\n      }\n\n      if (Array.isArray(data)) {\n        // 筛选出当前会话的消息\n        var result = data.filter(function (item) {\n          return item.conversationID === state.currentConversation.conversationID;\n        });\n        state.currentMessageList = [].concat(_toConsumableArray(state.currentMessageList), _toConsumableArray(result));\n      } else if (data.conversationID === state.currentConversation.conversationID) {\n        state.currentMessageList = [].concat(_toConsumableArray(state.currentMessageList), [data]);\n      }\n    },\n\n    /**\r\n     * 从当前消息列表中删除某条消息\r\n     * @param {Object} state\r\n     * @param {Message} message\r\n     */\n    removeMessage: function removeMessage(state, message) {\n      var index = state.currentMessageList.findIndex(function (_ref) {\n        var ID = _ref.ID;\n        return ID === message.ID;\n      });\n\n      if (index >= 0) {\n        state.currentMessageList.splice(index, 1);\n      }\n    },\n    reset: function reset(state) {\n      Object.assign(state, {\n        currentConversation: {},\n        currentMessageList: [],\n        nextReqMessageID: '',\n        isCompleted: false,\n        // 当前会话消息列表是否已经拉完了所有消息\n        conversationList: []\n      });\n    }\n  },\n  actions: {\n    /**\r\n     * 获取消息列表\r\n     * 调用时机：打开某一会话时或下拉获取历史消息时\r\n     * @param {Object} context\r\n     * @param {String} conversationID\r\n     */\n    getMessageList: function getMessageList(context, conversationID) {\n      if (context.state.isCompleted) {\n        context.commit('showMessage', {\n          message: '已经没有更多的历史消息了哦',\n          type: 'info'\n        });\n        return;\n      }\n\n      var _context$state = context.state,\n          nextReqMessageID = _context$state.nextReqMessageID,\n          currentMessageList = _context$state.currentMessageList;\n      tim.getMessageList({\n        conversationID: conversationID,\n        nextReqMessageID: nextReqMessageID,\n        count: 15\n      }).then(function (imReponse) {\n        // 更新messageID，续拉时要用到\n        context.state.nextReqMessageID = imReponse.data.nextReqMessageID;\n        context.state.isCompleted = imReponse.data.isCompleted; // 更新当前消息列表，从头部插入\n\n        context.state.currentMessageList = [].concat(_toConsumableArray(imReponse.data.messageList), _toConsumableArray(currentMessageList));\n      });\n    },\n\n    /**\r\n     * 切换会话\r\n     * 调用时机：切换会话时\r\n     * @param {Object} context\r\n     * @param {String} conversationID\r\n     */\n    checkoutConversation: function checkoutConversation(context, conversationID) {\n      context.commit('resetCurrentMemberList'); // 1.切换会话前，将切换前的会话进行已读上报\n\n      if (context.state.currentConversation.conversationID) {\n        var prevConversationID = context.state.currentConversation.conversationID;\n        tim.setMessageRead({\n          conversationID: prevConversationID\n        });\n      } // 2.待切换的会话也进行已读上报\n\n\n      tim.setMessageRead({\n        conversationID: conversationID\n      }); // 3. 获取会话信息\n\n      return tim.getConversationProfile(conversationID).then(function (_ref2) {\n        var data = _ref2.data;\n        // 3.1 更新当前会话\n        context.commit('updateCurrentConversation', data.conversation); // 3.2 获取消息列表\n\n        context.dispatch('getMessageList', conversationID); // 3.3 拉取第一页群成员列表\n\n        if (data.conversation.type === TIM.TYPES.CONV_GROUP) {\n          return context.dispatch('getGroupMemberList', data.conversation.groupProfile.groupID);\n        }\n\n        return Promise.resolve();\n      });\n    }\n  }\n};\nexport default conversationModules;",{"version":3,"sources":["D:/HCI/github/src/store/modules/conversation.js"],"names":["tim","TIM","store","titleNotify","conversationModules","state","currentConversation","currentMessageList","nextReqMessageID","isCompleted","conversationList","getters","toAccount","conversationID","type","replace","currentConversationType","totalUnreadCount","result","reduce","count","conversation","hidden","unreadCount","imgUrlList","filter","message","TYPES","MSG_IMAGE","isRevoked","map","payload","imageInfoArray","url","mutations","updateCurrentConversation","updateConversationList","resetCurrentConversation","pushCurrentMessageList","data","Array","isArray","item","removeMessage","index","findIndex","ID","splice","reset","Object","assign","actions","getMessageList","context","commit","then","imReponse","messageList","checkoutConversation","prevConversationID","setMessageRead","getConversationProfile","dispatch","CONV_GROUP","groupProfile","groupID","Promise","resolve"],"mappings":"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","sourcesContent":["import tim from 'tim'\r\nimport TIM from 'tim-js-sdk'\r\nimport store from '..'\r\nimport { titleNotify } from '../../utils'\r\nconst conversationModules = {\r\n  state: {\r\n    currentConversation: {},\r\n    currentMessageList: [],\r\n    nextReqMessageID: '',\r\n    isCompleted: false, // 当前会话消息列表是否已经拉完了所有消息\r\n    conversationList: []\r\n  },\r\n  getters: {\r\n    toAccount: state => {\r\n      if (!state.currentConversation || !state.currentConversation.conversationID) {\r\n        return ''\r\n      }\r\n      switch (state.currentConversation.type) {\r\n        case 'C2C':\r\n          return state.currentConversation.conversationID.replace('C2C', '')\r\n        case 'GROUP':\r\n          return state.currentConversation.conversationID.replace('GROUP', '')\r\n        default:\r\n          return state.currentConversation.conversationID\r\n      }\r\n    },\r\n    currentConversationType: state => {\r\n      if (!state.currentConversation || !state.currentConversation.type) {\r\n        return ''\r\n      }\r\n      return state.currentConversation.type\r\n    },\r\n    totalUnreadCount: state => {\r\n      const result = state.conversationList.reduce((count, conversation) => {\r\n        // 当前会话不计算总未读\r\n        if (!store.getters.hidden && state.currentConversation.conversationID === conversation.conversationID) {\r\n          return count\r\n        }\r\n        return count + conversation.unreadCount\r\n      }, 0)\r\n      titleNotify(result)\r\n      return result\r\n    },\r\n    // 用于当前会话的图片预览\r\n    imgUrlList: state => {\r\n      return state.currentMessageList\r\n        .filter(message => message.type === TIM.TYPES.MSG_IMAGE && !message.isRevoked) // 筛选出没有撤回并且类型是图片类型的消息\r\n        .map(message => message.payload.imageInfoArray[0].url)\r\n    }\r\n  },\r\n  mutations: {\r\n    /**\r\n     * 更新当前会话\r\n     * 调用时机: 切换会话时\r\n     * @param {Object} state\r\n     * @param {Conversation} conversation\r\n     */\r\n    updateCurrentConversation(state, conversation) {\r\n      state.currentConversation = conversation\r\n      state.currentMessageList = []\r\n      state.nextReqMessageID = ''\r\n      state.isCompleted = false\r\n    },\r\n    /**\r\n     * 更新会话列表\r\n     * 调用时机：触发会话列表更新事件时。CONVERSATION_LIST_UPDATED\r\n     * @param {Object} state\r\n     * @param {Conversation[]} conversationList\r\n     */\r\n    updateConversationList(state, conversationList) {\r\n      state.conversationList = conversationList\r\n    },\r\n    /**\r\n     * 重置当前会话\r\n     * 调用时机：需要重置当前会话时，例如：当前会话是一个群组，正好被踢出群时（被踢群事件触发），重置当前会话\r\n     * @param {Object} state\r\n     */\r\n    resetCurrentConversation(state) {\r\n      state.currentConversation = {}\r\n    },\r\n    /**\r\n     * 将消息插入当前会话列表\r\n     * 调用时机：收/发消息事件触发时\r\n     * @param {Object} state\r\n     * @param {Message[]|Message} data\r\n     * @returns\r\n     */\r\n    pushCurrentMessageList(state, data) {\r\n      // 还没当前会话，则跳过\r\n      if (!state.currentConversation.conversationID) {\r\n        return\r\n      }\r\n      if (Array.isArray(data)) {\r\n        // 筛选出当前会话的消息\r\n        const result = data.filter(item => item.conversationID === state.currentConversation.conversationID)\r\n        state.currentMessageList = [...state.currentMessageList, ...result]\r\n      } else if (data.conversationID === state.currentConversation.conversationID) {\r\n        state.currentMessageList = [...state.currentMessageList, data]\r\n      }\r\n    },\r\n    /**\r\n     * 从当前消息列表中删除某条消息\r\n     * @param {Object} state\r\n     * @param {Message} message\r\n     */\r\n    removeMessage(state, message) {\r\n      const index = state.currentMessageList.findIndex(({ ID }) => ID === message.ID)\r\n      if (index >= 0) {\r\n        state.currentMessageList.splice(index, 1)\r\n      }\r\n    },\r\n    reset(state) {\r\n      Object.assign(state, {\r\n        currentConversation: {},\r\n        currentMessageList: [],\r\n        nextReqMessageID: '',\r\n        isCompleted: false, // 当前会话消息列表是否已经拉完了所有消息\r\n        conversationList: []\r\n      })\r\n    }\r\n  },\r\n  actions: {\r\n    /**\r\n     * 获取消息列表\r\n     * 调用时机：打开某一会话时或下拉获取历史消息时\r\n     * @param {Object} context\r\n     * @param {String} conversationID\r\n     */\r\n    getMessageList(context, conversationID) {\r\n      if (context.state.isCompleted) {\r\n        context.commit('showMessage', {\r\n          message: '已经没有更多的历史消息了哦',\r\n          type: 'info'\r\n        })\r\n        return\r\n      }\r\n      const { nextReqMessageID, currentMessageList } = context.state\r\n      tim.getMessageList({ conversationID, nextReqMessageID, count: 15 }).then(imReponse => {\r\n        // 更新messageID，续拉时要用到\r\n        context.state.nextReqMessageID = imReponse.data.nextReqMessageID\r\n        context.state.isCompleted = imReponse.data.isCompleted\r\n        // 更新当前消息列表，从头部插入\r\n        context.state.currentMessageList = [...imReponse.data.messageList, ...currentMessageList]\r\n      })\r\n    },\r\n    /**\r\n     * 切换会话\r\n     * 调用时机：切换会话时\r\n     * @param {Object} context\r\n     * @param {String} conversationID\r\n     */\r\n    checkoutConversation(context, conversationID) {\r\n      context.commit('resetCurrentMemberList')\r\n      // 1.切换会话前，将切换前的会话进行已读上报\r\n      if (context.state.currentConversation.conversationID) {\r\n        const prevConversationID = context.state.currentConversation.conversationID\r\n        tim.setMessageRead({ conversationID: prevConversationID })\r\n      }\r\n      // 2.待切换的会话也进行已读上报\r\n      tim.setMessageRead({ conversationID })\r\n      // 3. 获取会话信息\r\n      return tim.getConversationProfile(conversationID).then(({ data }) => {\r\n        // 3.1 更新当前会话\r\n        context.commit('updateCurrentConversation', data.conversation)\r\n        // 3.2 获取消息列表\r\n        context.dispatch('getMessageList', conversationID)\r\n        // 3.3 拉取第一页群成员列表\r\n        if (data.conversation.type === TIM.TYPES.CONV_GROUP) {\r\n          return context.dispatch('getGroupMemberList', data.conversation.groupProfile.groupID)\r\n        }\r\n        return Promise.resolve()\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\nexport default conversationModules\r\n"]}]}