{"remainingRequest":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/thread-loader/dist/cjs.js!/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/babel-loader/lib/index.js!/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/run/media/gz/G/c2020spring/hci/project/FrontEnd/src/components/message/call-layer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/src/components/message/call-layer.vue","mtime":1588990158995},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1588990144497},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/thread-loader/dist/cjs.js","mtime":1588990157969},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1588990144242},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1588990144497},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1588990158440}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport RtcClient from \"../../utils/rtc-client\";\nimport { ACTION, VERSION } from \"../../utils/trtcCustomMessageMap\";\nimport { mapGetters, mapState } from 'vuex';\nimport { formatDuration } from \"../../utils/formatDuration\";\nexport default {\n  name: 'CallLayer',\n  data: function data() {\n    return {\n      Trtc: undefined,\n      isCamOn: true,\n      isMicOn: true,\n      maskShow: false,\n      isLocalMain: true,\n      // 本地视频是否是主屏幕显示\n      start: 0,\n      end: 0,\n      duration: 0,\n      hangUpTimer: 0,\n      // 通话计时id\n      ready: false,\n      dialling: false,\n      // 是否拨打电话中\n      calling: false,\n      // 是否通话中\n      isDialled: false // 是否被呼叫\n\n    };\n  },\n  computed: _objectSpread({}, mapGetters(['toAccount', 'currentConversationType']), {}, mapState({\n    userID: function userID(state) {\n      return state.user.userID;\n    },\n    userSig: function userSig(state) {\n      return state.user.userSig;\n    },\n    videoRoom: function videoRoom(state) {\n      return state.video.videoRoom;\n    },\n    sdkAppID: function sdkAppID(state) {\n      return state.user.sdkAppID;\n    }\n  }), {\n    formatDurationStr: function formatDurationStr() {\n      return formatDuration(this.duration);\n    }\n  }),\n  created: function created() {\n    var _this = this;\n\n    window.addEventListener('beforeunload', function () {\n      _this.videoCallLogOut();\n    });\n    window.addEventListener('leave', function () {\n      _this.videoCallLogOut();\n    });\n  },\n  mounted: function mounted() {\n    this.$bus.$on('isCalled', this.isCalled);\n    this.$bus.$on('missCall', this.missCall);\n    this.$bus.$on('isRefused', this.isRefused);\n    this.$bus.$on('isAccept', this.isAccept);\n    this.$bus.$on('isHungUp', this.isHungUp);\n    this.$bus.$on('busy', this.busy);\n    this.$bus.$on('video-call', this.videoCall);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.$bus.$off('isCalled', this.isCalled);\n    this.$bus.$off('missCall', this.missCall);\n    this.$bus.$off('isRefused', this.isRefused);\n    this.$bus.$off('isAccept', this.isAccept);\n    this.$bus.$off('isHungUp', this.isHungUp);\n    this.$bus.$off('busy', this.busy);\n    this.$bus.$off('video-call', this.videoCall);\n  },\n  methods: {\n    videoCallLogOut: function videoCallLogOut() {\n      // 针对，刷新页面，关闭Tab，登出情况下，通话断开的逻辑\n      if (this.dialling || this.calling) {\n        this.leave();\n      }\n\n      if (this.isDialled) {\n        this.refuse();\n      }\n    },\n    changeState: function changeState(state, boolean) {\n      var _this2 = this;\n\n      var stateList = ['dialling', 'isDialled', 'calling'];\n      stateList.forEach(function (item) {\n        _this2[item] = item === state ? boolean : false;\n      });\n      this.$store.commit('UPDATE_ISBUSY', stateList.some(function (item) {\n        return _this2[item];\n      })); // 若stateList 中存在 true , isBusy 为 true\n    },\n    initTrtc: function () {\n      var _initTrtc = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(options) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // 初始化 trtc 进入房间\n                this.Trtc = new RtcClient(options);\n                _context.next = 3;\n                return this.Trtc.createLocalStream({\n                  audio: true,\n                  video: true\n                }).then(function () {\n                  // 在进房之前，判断设备\n                  _this3.Trtc.join();\n\n                  _this3.ready = true;\n                  _this3.isCamOn = true;\n                  _this3.maskShow = false;\n                }).catch(function () {\n                  alert('请确认已连接摄像头和麦克风并授予其访问权限！');\n                  _this3.ready = false;\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initTrtc(_x) {\n        return _initTrtc.apply(this, arguments);\n      }\n\n      return initTrtc;\n    }(),\n    videoCall: function videoCall() {\n      var _this4 = this;\n\n      // 发起通话\n      if (this.calling) {\n        // 避免通话按钮多次快速的点击\n        return;\n      }\n\n      this.isLocalMain = true;\n      this.$store.commit('GENERATE_VIDEO_ROOM'); // 初始化房间号\n\n      var options = {\n        userId: this.userID,\n        userSig: this.userSig,\n        roomId: this.videoRoom,\n        sdkAppId: this.sdkAppID\n      };\n      this.initTrtc(options).then(function () {\n        if (!_this4.ready) return;\n\n        _this4.changeState('dialling', true);\n\n        _this4.timer = setTimeout(_this4.timeout, process.env.NODE_ENV === 'development' ? 999999 : 60000); // 开始计时器，开发环境超时时间较长，便于调试\n\n        _this4.sendVideoMessage(ACTION.VIDEO_CALL_ACTION_DIALING);\n      });\n    },\n    leave: function leave() {\n      // 离开房间，发起方挂断\n      if (!this.calling) {\n        // 还没有通话，单方面挂断\n        this.Trtc.leave();\n        clearTimeout(this.timer);\n        this.changeState('dialling', false);\n        this.sendVideoMessage(ACTION.VIDEO_CALL_ACTION_SPONSOR_CANCEL);\n        return;\n      }\n\n      this.hangUp(); // 通话一段时间之后，某一方面结束通话\n    },\n    timeout: function timeout() {\n      // 通话超时\n      this.changeState('dialling', false);\n      this.Trtc.leave();\n      this.sendVideoMessage(ACTION.VIDEO_CALL_ACTION_SPONSOR_TIMEOUT);\n    },\n    isCalled: function isCalled() {\n      // 被呼叫\n      this.changeState('isDialled', true);\n    },\n    missCall: function missCall() {\n      // 错过电话，也就是发起方的电话超时挂断或自己挂断\n      this.changeState('isDialled', false);\n    },\n    refuse: function refuse() {\n      // 拒绝电话\n      this.changeState('isDialled', false);\n      this.sendVideoMessage(ACTION.VIDEO_CALL_ACTION_REJECT);\n    },\n    isRefused: function isRefused() {\n      // 对方拒绝通话\n      this.changeState('dialling', false);\n      clearTimeout(this.timer);\n    },\n    resetDuration: function resetDuration(duration) {\n      var _this5 = this;\n\n      this.duration = duration;\n      this.hangUpTimer = setTimeout(function () {\n        var now = new Date();\n\n        _this5.resetDuration(parseInt((now - _this5.start) / 1000));\n      }, 1000);\n    },\n    accept: function accept() {\n      var _this6 = this;\n\n      // 接听电话\n      this.changeState('calling', true);\n      var options = {\n        userId: this.userID,\n        userSig: this.userSig,\n        roomId: this.videoRoom,\n        sdkAppId: this.sdkAppID\n      };\n      this.initTrtc(options).then(function () {\n        if (!_this6.ready) {\n          _this6.changeState('calling', false);\n\n          _this6.sendVideoMessage(ACTION.VIDEO_CALL_ACTION_ERROR);\n\n          return;\n        }\n\n        _this6.sendVideoMessage(ACTION.VIDEO_CALL_ACTION_ACCEPTED);\n\n        _this6.start = new Date();\n        clearTimeout(_this6.hangUpTimer);\n\n        _this6.resetDuration(0);\n      });\n    },\n    isAccept: function isAccept() {\n      // 对方接听自己发起的电话\n      clearTimeout(this.timer);\n      this.changeState('calling', true);\n      clearTimeout(this.hangUpTimer);\n      this.resetDuration(0);\n      this.start = new Date();\n    },\n    hangUp: function hangUp() {\n      // 通话一段时间之后，某一方挂断电话\n      this.changeState('calling', false);\n      this.Trtc.leave();\n      this.end = new Date();\n      var duration = parseInt((this.end - this.start) / 1000);\n      this.sendVideoMessage(ACTION.VIDEO_CALL_ACTION_HANGUP, duration);\n      clearTimeout(this.hangUpTimer);\n    },\n    isHungUp: function isHungUp() {\n      // 通话一段时间之后，对方挂断电话\n      if (this.calling) {\n        this.changeState('calling', false);\n        this.Trtc.leave();\n        clearTimeout(this.hangUpTimer);\n      }\n    },\n    busy: function busy(videoPayload, messageItem) {\n      videoPayload.action = ACTION.VIDEO_CALL_ACTION_LINE_BUSY;\n      var message = this.tim.createCustomMessage({\n        to: messageItem.from,\n        conversationType: this.currentConversationType,\n        payload: {\n          data: JSON.stringify(videoPayload),\n          description: '',\n          extension: ''\n        }\n      });\n      this.$store.commit('pushCurrentMessageList', message);\n      this.tim.sendMessage(message);\n    },\n    videoHandler: function videoHandler() {\n      // 是否打开摄像头\n      if (this.isCamOn) {\n        this.isCamOn = false;\n        this.maskShow = true;\n        this.Trtc.muteLocalVideo();\n      } else {\n        this.isCamOn = true;\n        this.maskShow = false;\n        this.Trtc.unmuteLocalVideo();\n      }\n    },\n    micHandler: function micHandler() {\n      // 是否打开麦克风\n      if (this.isMicOn) {\n        this.isMicOn = false;\n        this.Trtc.muteLocalAudio();\n      } else {\n        this.isMicOn = true;\n        this.Trtc.unmuteLocalAudio();\n      }\n    },\n    sendVideoMessage: function sendVideoMessage(action) {\n      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var options = {\n        room_id: this.videoRoom,\n        call_id: '',\n        action: action,\n        version: VERSION,\n        invited_list: [],\n        duration: duration\n      };\n      var message = this.tim.createCustomMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          data: JSON.stringify(options),\n          description: '',\n          extension: ''\n        }\n      });\n      this.$store.commit('pushCurrentMessageList', message);\n      this.tim.sendMessage(message);\n    },\n    changeMainVideo: function changeMainVideo() {\n      if (!this.calling) {\n        return;\n      }\n\n      this.isLocalMain = !this.isLocalMain;\n    }\n  }\n};",null]}