{"remainingRequest":"D:\\HCI\\github\\node_modules\\babel-loader\\lib\\index.js!D:\\HCI\\github\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\HCI\\github\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\HCI\\github\\src\\components\\record.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\HCI\\github\\src\\components\\record.vue","mtime":1593418846938},{"path":"D:\\HCI\\github\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589122691350},{"path":"D:\\HCI\\github\\node_modules\\babel-loader\\lib\\index.js","mtime":1589122690916},{"path":"D:\\HCI\\github\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589122691350},{"path":"D:\\HCI\\github\\node_modules\\vue-loader\\lib\\index.js","mtime":1589122702780}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.entries\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.map\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nexport default {\n  data: function data() {\n    return {\n      isPresenting: false,\n      isRecording: false,\n      recordedBarrages: new Map()\n    };\n  },\n  methods: {\n    beginRecord: function beginRecord() {\n      this.isRecording = true;\n      /*\r\n      将开始时间存入vuex\r\n      将录制中状态存入vuex，让弹幕发送时将弹幕信息存入vuex\r\n      开始就自动打开连麦按钮，用户可以选择关闭\r\n      */\n\n      this.$store.commit('setRecordState', true);\n      this.$store.commit('setBeginRecordTime');\n      this.$store.commit('clearBarrage');\n      /*if(this.recordVoice) {\r\n          this.recordVoice(true)\r\n      }*/\n    },\n    finishRecord: function finishRecord() {\n      this.isRecording = false;\n      /* 停止录制结束连麦 */\n\n      this.$store.commit('setRecordState', false);\n      /*if(this.recordVoice) {\r\n          this.recordVoice(false)\r\n      }*/\n      // 将vuex中的弹幕消息发送到后端\n\n      axios({\n        method: 'post',\n        url: 'http://47.103.30.166:8020/Room/textRecord/Receive',\n        headers: {},\n        params: {\n          video_id: this.$store.getters.getCurrentVideoId\n        },\n        data: this.$store.getters.getBarrages\n      });\n    },\n    presentRecord: function presentRecord() {\n      var _this = this;\n\n      /*\r\n      从后端拿到弹幕消息\r\n      根据当前开始的时间轮询弹幕消息的队列\r\n      */\n      this.isPresenting = true;\n      var videoid = new Number(this.$store.getters.getCurrentVideoId);\n      axios.get('http://47.103.30.166:8020/Room/textRecord/findByVideoId', {\n        params: {\n          video_id: videoid\n        }\n      }).then(function (res) {\n        _this.recordedBarrages = res.data;\n      }); // 轮询\n\n      var timeId = setInterval(function () {\n        if (_this.isPresenting == false) {\n          clearInterval(timeId);\n        }\n\n        _this.sendReadyBarrage();\n      }, 1000);\n    },\n    finishPresent: function finishPresent() {\n      this.isPresenting = false;\n    },\n    sendReadyBarrage: function sendReadyBarrage() {\n      var _this2 = this;\n\n      Object.entries(this.recordedBarrages).map(function (key, value) {\n        var barrageTime = Number(key[0]) + Number(_this2.$store.getters.getRecordingBeginTime);\n        var cur = Date.now();\n\n        if (barrageTime >= cur && barrageTime < cur + 1000) {\n          console.log('hit');\n          console.log(barrageTime, cur);\n          console.log(key[1]);\n\n          _this2.$parent.sendBarrage(key[1]);\n        }\n      });\n    },\n    beginVoiceCommunicate: function beginVoiceCommunicate() {\n      this.$refs.VoiceCommunicate.createClient();\n    }\n  }\n};",{"version":3,"sources":["record.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAUA,OAAA,KAAA,MAAA,OAAA;AACA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,YAAA,EAAA,KADA;AAEA,MAAA,WAAA,EAAA,KAFA;AAGA,MAAA,gBAAA,EAAA,IAAA,GAAA;AAHA,KAAA;AAKA,GAPA;AAQA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,yBACA;AACA,WAAA,WAAA,GAAA,IAAA;AACA;;;;;;AAKA,WAAA,MAAA,CAAA,MAAA,CAAA,gBAAA,EAAA,IAAA;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,oBAAA;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,cAAA;AACA;;;AAGA,KAdA;AAeA,IAAA,YAfA,0BAeA;AACA,WAAA,WAAA,GAAA,KAAA;AAEA;;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,gBAAA,EAAA,KAAA;AACA;;;AAIA;;AACA,MAAA,KAAA,CAAA;AACA,QAAA,MAAA,EAAA,MADA;AAEA,QAAA,GAAA,EAAA,mDAFA;AAGA,QAAA,OAAA,EAAA,EAHA;AAIA,QAAA,MAAA,EAAA;AACA,UAAA,QAAA,EAAA,KAAA,MAAA,CAAA,OAAA,CAAA;AADA,SAJA;AAOA,QAAA,IAAA,EAAA,KAAA,MAAA,CAAA,OAAA,CAAA;AAPA,OAAA,CAAA;AASA,KAlCA;AAoCA,IAAA,aApCA,2BAoCA;AAAA;;AACA;;;;AAIA,WAAA,YAAA,GAAA,IAAA;AACA,UAAA,OAAA,GAAA,IAAA,MAAA,CAAA,KAAA,MAAA,CAAA,OAAA,CAAA,iBAAA,CAAA;AACA,MAAA,KAAA,CACA,GADA,CACA,yDADA,EACA;AACA,QAAA,MAAA,EAAA;AACA,UAAA,QAAA,EAAA;AADA;AADA,OADA,EAMA,IANA,CAMA,UAAA,GAAA,EAAA;AACA,QAAA,KAAA,CAAA,gBAAA,GAAA,GAAA,CAAA,IAAA;AACA,OARA,EAPA,CAkBA;;AACA,UAAA,MAAA,GAAA,WAAA,CAAA,YAAA;AACA,YAAA,KAAA,CAAA,YAAA,IAAA,KAAA,EAAA;AACA,UAAA,aAAA,CAAA,MAAA,CAAA;AACA;;AACA,QAAA,KAAA,CAAA,gBAAA;AACA,OALA,EAKA,IALA,CAAA;AAMA,KA7DA;AA+DA,IAAA,aA/DA,2BA+DA;AACA,WAAA,YAAA,GAAA,KAAA;AACA,KAjEA;AAmEA,IAAA,gBAnEA,8BAmEA;AAAA;;AACA,MAAA,MAAA,CAAA,OAAA,CAAA,KAAA,gBAAA,EAAA,GAAA,CAAA,UAAA,GAAA,EAAA,KAAA,EAAA;AACA,YAAA,WAAA,GAAA,MAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,qBAAA,CAAA;AACA,YAAA,GAAA,GAAA,IAAA,CAAA,GAAA,EAAA;;AACA,YAAA,WAAA,IAAA,GAAA,IAAA,WAAA,GAAA,GAAA,GAAA,IAAA,EACA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,KAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,WAAA,EAAA,GAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,CAAA;;AACA,UAAA,MAAA,CAAA,OAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA;AACA,OAVA;AAWA,KA/EA;AAiFA,IAAA,qBAjFA,mCAiFA;AACA,WAAA,KAAA,CAAA,gBAAA,CAAA,YAAA;AACA;AAnFA;AARA,CAAA","sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <el-button type=\"primary\"  @click=\"beginRecord\" v-if=\"!isRecording\" >录制</el-button>\r\n    <el-button type=\"primary\"  @click=\"finishRecord\" v-else>结束录制</el-button>\r\n    <el-button type=\"primary\" @click=\"presentRecord\" v-if=\"!isPresenting\">回放</el-button>\r\n    <el-button type=\"primary\"  @click=\"finishPresent\" v-else>结束回放</el-button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nexport default {\r\n    data() {\r\n        return {\r\n            isPresenting: false,\r\n            isRecording:false,\r\n            recordedBarrages: new Map()\r\n        }\r\n    },\r\n    methods: {\r\n        beginRecord() {\r\n            this.isRecording=true\r\n            /*\r\n            将开始时间存入vuex\r\n            将录制中状态存入vuex，让弹幕发送时将弹幕信息存入vuex\r\n            开始就自动打开连麦按钮，用户可以选择关闭\r\n            */\r\n            this.$store.commit('setRecordState',true)\r\n            this.$store.commit('setBeginRecordTime')\r\n            this.$store.commit('clearBarrage')\r\n            /*if(this.recordVoice) {\r\n                this.recordVoice(true)\r\n            }*/\r\n        },\r\n        finishRecord() {\r\n            this.isRecording=false\r\n            \r\n            /* 停止录制结束连麦 */\r\n            this.$store.commit('setRecordState',false)\r\n            /*if(this.recordVoice) {\r\n                this.recordVoice(false)\r\n            }*/\r\n\r\n            // 将vuex中的弹幕消息发送到后端\r\n            axios({\r\n            method: 'post',\r\n            url: 'http://47.103.30.166:8020/Room/textRecord/Receive',\r\n            headers: {}, \r\n            params: {\r\n                video_id: this.$store.getters.getCurrentVideoId\r\n            },\r\n            data: this.$store.getters.getBarrages\r\n            })\r\n        },\r\n\r\n        presentRecord() {\r\n            /*\r\n            从后端拿到弹幕消息\r\n            根据当前开始的时间轮询弹幕消息的队列\r\n            */\r\n            this.isPresenting=true\r\n            var videoid = new Number(this.$store.getters.getCurrentVideoId)\r\n            axios\r\n            .get('http://47.103.30.166:8020/Room/textRecord/findByVideoId', {\r\n            params: {\r\n               video_id: videoid\r\n            }\r\n            })\r\n            .then(res => {\r\n            this.recordedBarrages = res.data\r\n            }\r\n            )\r\n\r\n            // 轮询\r\n            const timeId = setInterval(() => {\r\n                if (this.isPresenting == false) {\r\n                clearInterval(timeId)\r\n                }\r\n                this.sendReadyBarrage()\r\n            },1000)\r\n        },\r\n\r\n        finishPresent() {\r\n            this.isPresenting=false\r\n        },\r\n\r\n        sendReadyBarrage() {\r\n            Object.entries(this.recordedBarrages).map((key, value) => {\r\n                    var barrageTime = Number(key[0])+ Number(this.$store.getters.getRecordingBeginTime)\r\n                    var cur=Date.now()\r\n                    if( barrageTime>= cur && barrageTime<cur+1000)\r\n                    {\r\n                        console.log('hit')\r\n                        console.log(barrageTime, cur)\r\n                        console.log(key[1])\r\n                        this.$parent.sendBarrage(key[1])\r\n                    }\r\n            })\r\n        },\r\n\r\n        beginVoiceCommunicate() {\r\n            this.$refs.VoiceCommunicate.createClient()\r\n        }\r\n\r\n\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang='stylus' scoped>\r\n.container{\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n</style>"],"sourceRoot":"src/components"}]}