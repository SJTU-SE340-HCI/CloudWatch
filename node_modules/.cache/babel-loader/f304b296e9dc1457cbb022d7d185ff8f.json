{"remainingRequest":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/babel-loader/lib/index.js!/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/run/media/gz/G/c2020spring/hci/project/FrontEnd/src/components/record.vue?vue&type=script&lang=js&","dependencies":[{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/src/components/record.vue","mtime":1593143123827},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1588990144497},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1588990144242},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1588990144497},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1588990158440}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.entries\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.map\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nimport VoiceCommunicate from \"./voice\";\nexport default {\n  data: function data() {\n    return {\n      isPresenting: false,\n      isRecording: false,\n      recordedBarrages: new Map()\n    };\n  },\n  components: {\n    VoiceCommunicate: VoiceCommunicate\n  },\n  methods: {\n    beginRecord: function beginRecord() {\n      this.isRecording = true;\n      /*\n      将开始时间存入vuex\n      将录制中状态存入vuex，让弹幕发送时将弹幕信息存入vuex\n      开始就自动打开连麦按钮，用户可以选择关闭\n      */\n\n      this.$store.commit('setRecordState', true);\n      this.$store.commit('setBeginRecordTime');\n      this.$store.commit('setVideoRoomId', '12');\n      this.$store.commit('clearBarrage');\n    },\n    finishRecord: function finishRecord() {\n      this.isRecording = false;\n      /*\n      结束连麦\n      将vuex中的弹幕消息发送到后端\n      */\n\n      this.$store.commit('setRecordState', false); // 将vuex中的弹幕消息发送到后端\n\n      axios({\n        method: 'post',\n        url: 'http://47.103.30.166:8020/Room/textRecord/Receive',\n        headers: {},\n        params: {\n          video_id: this.$store.getters.getCurrentVideoId\n        },\n        data: this.$store.getters.getBarrages\n      });\n    },\n    presentRecord: function presentRecord() {\n      var _this = this;\n\n      /*\n      从后端拿到弹幕消息\n      根据当前开始的时间轮询弹幕消息的队列\n      */\n      this.isPresenting = true;\n      var videoid = new Number(this.$store.getters.getCurrentVideoId);\n      axios.get('http://47.103.30.166:8020/Room/textRecord/findByVideoId', {\n        params: {\n          video_id: videoid\n        }\n      }).then(function (res) {\n        _this.recordedBarrages = res.data;\n      }); // 轮询\n\n      var timeId = setInterval(function () {\n        if (_this.isPresenting == false) {\n          clearInterval(timeId);\n        }\n\n        _this.sendReadyBarrage();\n      }, 1000);\n    },\n    finishPresent: function finishPresent() {\n      this.isPresenting = false;\n    },\n    sendReadyBarrage: function sendReadyBarrage() {\n      var _this2 = this;\n\n      Object.entries(this.recordedBarrages).map(function (key, value) {\n        var barrageTime = Number(key[0]) + Number(_this2.$store.getters.getRecordingBeginTime);\n        var cur = Date.now();\n        console.log(barrageTime, cur);\n\n        if (barrageTime >= cur && barrageTime < cur + 1000) {\n          console.log('hit');\n\n          _this2.$parent.sendBarrage(key[1]);\n        }\n      });\n    },\n    beginVoiceCommunicate: function beginVoiceCommunicate() {\n      this.$refs.VoiceCommunicate.createClient();\n    }\n  }\n};",{"version":3,"sources":["record.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAUA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,gBAAA;AACA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,YAAA,EAAA,KADA;AAEA,MAAA,WAAA,EAAA,KAFA;AAGA,MAAA,gBAAA,EAAA,IAAA,GAAA;AAHA,KAAA;AAKA,GAPA;AAQA,EAAA,UAAA,EAAA;AACA,IAAA,gBAAA,EAAA;AADA,GARA;AAWA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,yBACA;AACA,WAAA,WAAA,GAAA,IAAA;AACA;;;;;;AAKA,WAAA,MAAA,CAAA,MAAA,CAAA,gBAAA,EAAA,IAAA;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,oBAAA;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,gBAAA,EAAA,IAAA;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,cAAA;AACA,KAZA;AAaA,IAAA,YAbA,0BAaA;AACA,WAAA,WAAA,GAAA,KAAA;AACA;;;;;AAIA,WAAA,MAAA,CAAA,MAAA,CAAA,gBAAA,EAAA,KAAA,EANA,CAQA;;AACA,MAAA,KAAA,CAAA;AACA,QAAA,MAAA,EAAA,MADA;AAEA,QAAA,GAAA,EAAA,mDAFA;AAGA,QAAA,OAAA,EAAA,EAHA;AAIA,QAAA,MAAA,EAAA;AACA,UAAA,QAAA,EAAA,KAAA,MAAA,CAAA,OAAA,CAAA;AADA,SAJA;AAOA,QAAA,IAAA,EAAA,KAAA,MAAA,CAAA,OAAA,CAAA;AAPA,OAAA,CAAA;AASA,KA/BA;AAiCA,IAAA,aAjCA,2BAiCA;AAAA;;AACA;;;;AAIA,WAAA,YAAA,GAAA,IAAA;AACA,UAAA,OAAA,GAAA,IAAA,MAAA,CAAA,KAAA,MAAA,CAAA,OAAA,CAAA,iBAAA,CAAA;AACA,MAAA,KAAA,CACA,GADA,CACA,yDADA,EACA;AACA,QAAA,MAAA,EAAA;AACA,UAAA,QAAA,EAAA;AADA;AADA,OADA,EAMA,IANA,CAMA,UAAA,GAAA,EAAA;AACA,QAAA,KAAA,CAAA,gBAAA,GAAA,GAAA,CAAA,IAAA;AACA,OARA,EAPA,CAkBA;;AACA,UAAA,MAAA,GAAA,WAAA,CAAA,YAAA;AACA,YAAA,KAAA,CAAA,YAAA,IAAA,KAAA,EAAA;AACA,UAAA,aAAA,CAAA,MAAA,CAAA;AACA;;AACA,QAAA,KAAA,CAAA,gBAAA;AACA,OALA,EAKA,IALA,CAAA;AAMA,KA1DA;AA4DA,IAAA,aA5DA,2BA4DA;AACA,WAAA,YAAA,GAAA,KAAA;AACA,KA9DA;AAgEA,IAAA,gBAhEA,8BAgEA;AAAA;;AACA,MAAA,MAAA,CAAA,OAAA,CAAA,KAAA,gBAAA,EAAA,GAAA,CAAA,UAAA,GAAA,EAAA,KAAA,EAAA;AACA,YAAA,WAAA,GAAA,MAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,qBAAA,CAAA;AACA,YAAA,GAAA,GAAA,IAAA,CAAA,GAAA,EAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,WAAA,EAAA,GAAA;;AACA,YAAA,WAAA,IAAA,GAAA,IAAA,WAAA,GAAA,GAAA,GAAA,IAAA,EACA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,KAAA;;AACA,UAAA,MAAA,CAAA,OAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA;AACA,OATA;AAUA,KA3EA;AA6EA,IAAA,qBA7EA,mCA6EA;AACA,WAAA,KAAA,CAAA,gBAAA,CAAA,YAAA;AACA;AA/EA;AAXA,CAAA","sourcesContent":["<template>\n  <div class=\"container\">\n    <el-button type=\"primary\"  @click=\"beginRecord\" v-if=\"!isRecording\" >录制</el-button>\n    <el-button type=\"primary\"  @click=\"finishRecord\" v-else>结束录制</el-button>\n    <el-button type=\"primary\" @click=\"presentRecord\" v-if=\"!isPresenting\">回放</el-button>\n    <el-button type=\"primary\"  @click=\"finishPresent\" v-else>结束回放</el-button>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport VoiceCommunicate from './voice'\nexport default {\n    data() {\n        return {\n            isPresenting: false,\n            isRecording:false,\n            recordedBarrages: new Map()\n        }\n    },\n    components: {\n         VoiceCommunicate: VoiceCommunicate\n    },\n    methods: {\n        beginRecord() {\n            this.isRecording=true\n            /*\n            将开始时间存入vuex\n            将录制中状态存入vuex，让弹幕发送时将弹幕信息存入vuex\n            开始就自动打开连麦按钮，用户可以选择关闭\n            */\n            this.$store.commit('setRecordState',true)\n            this.$store.commit('setBeginRecordTime')\n            this.$store.commit('setVideoRoomId', '12')\n            this.$store.commit('clearBarrage')\n        },\n        finishRecord() {\n            this.isRecording=false\n            /*\n            结束连麦\n            将vuex中的弹幕消息发送到后端\n            */\n            this.$store.commit('setRecordState',false)\n\n            // 将vuex中的弹幕消息发送到后端\n            axios({\n            method: 'post',\n            url: 'http://47.103.30.166:8020/Room/textRecord/Receive',\n            headers: {}, \n            params: {\n                video_id: this.$store.getters.getCurrentVideoId\n            },\n            data: this.$store.getters.getBarrages\n            })\n        },\n\n        presentRecord() {\n            /*\n            从后端拿到弹幕消息\n            根据当前开始的时间轮询弹幕消息的队列\n            */\n            this.isPresenting=true\n            var videoid = new Number(this.$store.getters.getCurrentVideoId)\n            axios\n            .get('http://47.103.30.166:8020/Room/textRecord/findByVideoId', {\n            params: {\n               video_id: videoid\n            }\n            })\n            .then(res => {\n            this.recordedBarrages = res.data\n            }\n            )\n\n            // 轮询\n            const timeId = setInterval(() => {\n                if (this.isPresenting == false) {\n                clearInterval(timeId)\n                }\n                this.sendReadyBarrage()\n            },1000)\n        },\n\n        finishPresent() {\n            this.isPresenting=false\n        },\n\n        sendReadyBarrage() {\n            Object.entries(this.recordedBarrages).map((key, value) => {\n                    var barrageTime = Number(key[0])+ Number(this.$store.getters.getRecordingBeginTime)\n                    var cur=Date.now()\n                    console.log(barrageTime, cur)\n                    if( barrageTime>= cur && barrageTime<cur+1000)\n                    {\n                        console.log('hit')\n                        this.$parent.sendBarrage(key[1])\n                    }\n            })\n        },\n\n        beginVoiceCommunicate() {\n            this.$refs.VoiceCommunicate.createClient()\n        }\n\n\n    }\n}\n</script>\n\n<style lang='stylus' scoped>\n.container{\n    width: 100%;\n    height: 100%;\n  }\n</style>"],"sourceRoot":"src/components"}]}