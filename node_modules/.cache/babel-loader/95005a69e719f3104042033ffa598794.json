{"remainingRequest":"/Users/liuzhengwei/SJTU/HCI/CloudWatch/node_modules/babel-loader/lib/index.js!/Users/liuzhengwei/SJTU/HCI/CloudWatch/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/liuzhengwei/SJTU/HCI/CloudWatch/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liuzhengwei/SJTU/HCI/CloudWatch/src/components/record.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liuzhengwei/SJTU/HCI/CloudWatch/src/components/record.vue","mtime":1593571631719},{"path":"/Users/liuzhengwei/SJTU/HCI/CloudWatch/node_modules/cache-loader/dist/cjs.js","mtime":1589115288536},{"path":"/Users/liuzhengwei/SJTU/HCI/CloudWatch/node_modules/babel-loader/lib/index.js","mtime":1589115288422},{"path":"/Users/liuzhengwei/SJTU/HCI/CloudWatch/node_modules/cache-loader/dist/cjs.js","mtime":1589115288536},{"path":"/Users/liuzhengwei/SJTU/HCI/CloudWatch/node_modules/vue-loader/lib/index.js","mtime":1589115292369}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.entries\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.map\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nimport { Howl, Howler } from 'howler';\nexport default {\n  data: function data() {\n    return {\n      isPresenting: false,\n      isRecording: false,\n      recordedBarrages: new Map(),\n      recordedVoices: []\n    };\n  },\n  methods: {\n    beginRecord: function beginRecord() {\n      this.isRecording = true;\n      /*\n      将开始时间存入vuex\n      将录制中状态存入vuex，让弹幕发送时将弹幕信息存入vuex\n      开始就自动打开连麦按钮，用户可以选择关闭\n      */\n\n      this.$store.commit('setRecordState', true);\n      this.$store.commit('setBeginRecordTime');\n      this.$store.commit('clearBarrage');\n      /*if(this.recordVoice) {\n          this.recordVoice(true)\n      }*/\n    },\n    finishRecord: function finishRecord() {\n      this.isRecording = false;\n      /* 停止录制结束连麦 */\n\n      this.$store.commit('setRecordState', false);\n      /*if(this.recordVoice) {\n          this.recordVoice(false)\n      }*/\n      // 将vuex中的弹幕消息发送到后端\n\n      axios({\n        method: 'post',\n        url: 'http://47.103.30.166:8020/Room/textRecord/Receive',\n        headers: {},\n        params: {\n          video_id: this.$store.getters.getCurrentVideoId\n        },\n        data: this.$store.getters.getBarrages\n      });\n    },\n    presentRecord: function presentRecord() {\n      var _this = this;\n\n      this.isPresenting = true; // 从后端拿到弹幕消息\n\n      var videoid = new Number(this.$store.getters.getCurrentVideoId);\n      axios.get('http://47.103.30.166:8020/Room/textRecord/findByVideoId', {\n        params: {\n          video_id: videoid\n        }\n      }).then(function (res) {\n        _this.recordedBarrages = res.data;\n        console.log(_this.recordedBarrages);\n      }); // 从后端拿到聊天音频\n\n      axios.get('http://47.103.30.166:8020/Room/voiceRecord/findPreviousRecord', {\n        params: {\n          room_id: this.$store.state.currentRoomId\n        }\n      }).then(function (res) {\n        _this.recordedVoices = res.data;\n        console.log(_this.recordedVoices);\n      });\n\n      if (this.$store.state.currentRoomId == '667') {\n        // backend only keep the latest voice record, only one\n        var sound = new Howl({\n          //src: 'http://1301703207.vod2.myqcloud.com/e0ee959avodcq1301703207/78b6c3ee5285890804744856150/f0.aac',\n          src: 'http://1301703207.vod2.myqcloud.com/e0ee959avodcq1301703207/4e624dbe5285890804757979147/f0.aac',\n          html5: true,\n          // A live stream can only be played through HTML5 Audio.\n          format: ['mp3', 'aac']\n        }); // Begin playing the sound.\n\n        sound.play();\n      } // 根据当前开始的时间轮询弹幕消息的队列\n\n\n      var timeId = setInterval(function () {\n        if (_this.isPresenting == false) {\n          clearInterval(timeId);\n        }\n\n        _this.sendReadyBarrage();\n      }, 1000);\n    },\n    finishPresent: function finishPresent() {\n      this.isPresenting = false;\n    },\n    sendReadyBarrage: function sendReadyBarrage() {\n      var _this2 = this;\n\n      Object.entries(this.recordedBarrages).map(function (key, value) {\n        var barrageTime = Number(key[0]) + Number(_this2.$store.getters.getRecordingBeginTime);\n        var cur = Date.now();\n\n        if (barrageTime >= cur && barrageTime < cur + 1000) {\n          console.log('hit');\n          console.log(barrageTime, cur);\n          console.log(key[1]);\n\n          _this2.$parent.sendBarrage(key[1]);\n        }\n      });\n    },\n    beginVoiceCommunicate: function beginVoiceCommunicate() {\n      this.$refs.VoiceCommunicate.createClient();\n    }\n  }\n};",{"version":3,"sources":["record.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"container\">\n    <el-button type=\"primary\"  @click=\"beginRecord\" v-if=\"!isRecording\" >录制</el-button>\n    <el-button type=\"primary\"  @click=\"finishRecord\" v-else>结束录制</el-button>\n    <el-button type=\"primary\" @click=\"presentRecord\" v-if=\"!isPresenting\">回放</el-button>\n    <el-button type=\"primary\"  @click=\"finishPresent\" v-else>结束回放</el-button>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport {Howl, Howler} from 'howler';\nexport default {\n    data() {\n        return {\n            isPresenting: false,\n            isRecording:false,\n            recordedBarrages: new Map(),\n            recordedVoices: []\n        }\n    },\n    methods: {\n        beginRecord() {\n            this.isRecording=true\n            /*\n            将开始时间存入vuex\n            将录制中状态存入vuex，让弹幕发送时将弹幕信息存入vuex\n            开始就自动打开连麦按钮，用户可以选择关闭\n            */\n            this.$store.commit('setRecordState',true)\n            this.$store.commit('setBeginRecordTime')\n            this.$store.commit('clearBarrage')\n            /*if(this.recordVoice) {\n                this.recordVoice(true)\n            }*/\n        },\n        finishRecord() {\n            this.isRecording=false\n            \n            /* 停止录制结束连麦 */\n            this.$store.commit('setRecordState',false)\n            /*if(this.recordVoice) {\n                this.recordVoice(false)\n            }*/\n\n            // 将vuex中的弹幕消息发送到后端\n            axios({\n            method: 'post',\n            url: 'http://47.103.30.166:8020/Room/textRecord/Receive',\n            headers: {}, \n            params: {\n                video_id: this.$store.getters.getCurrentVideoId\n            },\n            data: this.$store.getters.getBarrages\n            })\n        },\n\n        presentRecord() {\n            this.isPresenting=true\n            // 从后端拿到弹幕消息\n            var videoid = new Number(this.$store.getters.getCurrentVideoId)\n            axios\n            .get('http://47.103.30.166:8020/Room/textRecord/findByVideoId', {\n            params: {\n               video_id: videoid\n            }\n            })\n            .then(res => {\n              this.recordedBarrages = res.data\n              console.log(this.recordedBarrages)\n            })\n\n            // 从后端拿到聊天音频\n            axios.get('http://47.103.30.166:8020/Room/voiceRecord/findPreviousRecord', {\n                params:{\n                    room_id: this.$store.state.currentRoomId\n                }\n            })\n            .then(res => {\n                this.recordedVoices=res.data\n                console.log(this.recordedVoices)\n            })\n\n            if (this.$store.state.currentRoomId=='667'){\n            // backend only keep the latest voice record, only one\n                var sound =  new Howl({\n                  //src: 'http://1301703207.vod2.myqcloud.com/e0ee959avodcq1301703207/78b6c3ee5285890804744856150/f0.aac',\n\n                    src: 'http://1301703207.vod2.myqcloud.com/e0ee959avodcq1301703207/4e624dbe5285890804757979147/f0.aac',\n                    html5: true, // A live stream can only be played through HTML5 Audio.\n                    format: ['mp3', 'aac']\n                });\n                \n                // Begin playing the sound.\n                sound.play()\n            }\n\n            // 根据当前开始的时间轮询弹幕消息的队列\n            const timeId = setInterval(() => {\n                if (this.isPresenting == false) {\n                clearInterval(timeId)\n                }\n                this.sendReadyBarrage()\n            },1000)\n        },\n\n        finishPresent() {\n            this.isPresenting=false\n        },\n\n        sendReadyBarrage() {\n            Object.entries(this.recordedBarrages).map((key, value) => {\n                    var barrageTime = Number(key[0])+ Number(this.$store.getters.getRecordingBeginTime)\n                    var cur=Date.now()\n                    if( barrageTime>= cur && barrageTime<cur+1000)\n                    {\n                        console.log('hit')\n                        console.log(barrageTime, cur)\n                        console.log(key[1])\n                        this.$parent.sendBarrage(key[1])\n                    }\n            })\n        },\n\n        beginVoiceCommunicate() {\n            this.$refs.VoiceCommunicate.createClient()\n        }\n\n\n    }\n}\n</script>\n\n<style lang='stylus' scoped>\n.container{\n    width: 100%;\n    height: 100%;\n  }\n</style>"],"sourceRoot":"src/components"}]}