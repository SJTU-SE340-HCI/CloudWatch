{"remainingRequest":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/thread-loader/dist/cjs.js!/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/babel-loader/lib/index.js!/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/run/media/gz/G/c2020spring/hci/project/FrontEnd/src/components/voice.vue?vue&type=script&lang=js&","dependencies":[{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/src/components/voice.vue","mtime":1589027436531},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1588990144497},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/thread-loader/dist/cjs.js","mtime":1588990157969},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1588990144242},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1588990144497},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1588990158440}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport TRTC from 'trtc-js-sdk';\nimport { TEST_ACCOUNT } from \"../const/account_dev\";\nimport LibGenerateTestUserSig from \"../../public/debug/GenerateTestUserSig\";\nexport default {\n  name: 'voiceCommunicate',\n  components: {},\n  data: function data() {\n    return {\n      sdkAppId: TEST_ACCOUNT.sdkAppId,\n      userId: TEST_ACCOUNT.userId + (Math.random() * 100).toFixed(),\n      userToken: TEST_ACCOUNT.userToken,\n      client: '',\n      localStream: '',\n      roomId: '1',\n      remoteVideo: [],\n      isSignUp: false\n    };\n  },\n  created: function created() {},\n  methods: {\n    voicecommunicate: function voicecommunicate() {\n      if (this.isOpenVoice === false) {\n        this.isOpenVoice = true;\n        this.msg = this.msg2;\n        this.createClient();\n      } else {\n        this.isOpenVoice = false;\n        this.msg = this.msg1;\n        this.signOut();\n      }\n    },\n    createClient: function createClient() {\n      //获取签名\n      var config = this.genTestUserSig();\n      var sdkAppId = config.sdkAppId;\n      var userSig = config.userSig;\n      this.client = TRTC.createClient({\n        mode: 'videoCall',\n        sdkAppId: sdkAppId,\n        userId: this.userId,\n        userSig: userSig\n      });\n      console.log(sdkAppId, this.userId, userSig, 111111111); //注册远程监听，要放在加入房间前--这里用了发布订阅模式\n\n      this.subscribeStream();\n      this.joinRoom(this.roomId);\n    },\n    //加入房间\n    joinRoom: function joinRoom(roomId) {\n      var _this = this;\n\n      if (!this.isSignUp) {\n        this.client.join({\n          roomId: roomId\n        }).then(function () {\n          console.log('进房成功');\n          _this.isSignUp = true; //创建本地流\n\n          _this.createStream(_this.userId); // //播放远端流\n\n\n          _this.playRemoteStream(_this.client);\n        }).catch(function (error) {\n          console.error('进房失败 ' + error);\n        });\n      } else {\n        alert('不能重复加入直播间');\n      }\n    },\n    createStream: function createStream(userId) {\n      var _this2 = this;\n\n      var localStream = TRTC.createStream({\n        userId: userId,\n        audio: true,\n        video: false\n      });\n      this.localStream = localStream;\n      localStream.initialize().catch(function (error) {\n        console.error('初始化本地流失败 ' + error);\n      }).then(function () {\n        console.log('初始化本地流成功');\n        localStream.play('local_stream'); //创建好后才能发布\n\n        _this2.publishStream(localStream);\n      });\n    },\n    publishStream: function publishStream(localStream) {\n      this.client.publish(localStream).catch(function (error) {\n        console.error('本地流发布失败 ' + error);\n      }).then(function () {\n        console.log('本地流发布成功');\n      });\n    },\n    playRemoteStream: function playRemoteStream() {\n      var _this3 = this;\n\n      this.client.on('stream-subscribed', function (event) {\n        var remoteStream = event.stream;\n        console.log('远端流订阅成功：' + remoteStream.getId());\n\n        _this3.remoteVideo.push(remoteStream.getId()); // 播放远端流\n\n\n        _this3.$nextTick(function () {\n          remoteStream.play('remote_stream' + remoteStream.getId());\n        }, 1000);\n      });\n    },\n    //订阅远端流--加入房间之前\n    subscribeStream: function subscribeStream() {\n      var _this4 = this;\n\n      this.client.on('stream-added', function (event) {\n        var remoteStream = event.stream;\n        console.log('远端流增加: ' + remoteStream.getId()); //订阅远端流\n\n        _this4.client.subscribe(remoteStream);\n      });\n    },\n    signOut: function signOut() {\n      this.client.leave().then(function () {\n        // 退房成功，可再次调用client.join重新进房开启新的通话。\n        console.log('退出直播间');\n      }).catch(function (error) {\n        console.error('退出直播间失败 ' + error); // 错误不可恢复，需要刷新页面。\n      });\n    },\n    genTestUserSig: function genTestUserSig() {\n      var USERID = this.userId;\n      var SDKAPPID = this.sdkAppId;\n      var EXPIRETIME = 604800;\n      var SECRETKEY = this.userToken;\n\n      if (SDKAPPID === '' || SECRETKEY === '') {\n        alert('请先配置好您的账号信息： SDKAPPID 及 SECRETKEY ' + '\\r\\n\\r\\nPlease configure your SDKAPPID/SECRETKEY in js/debug/GenerateTestUserSig.js');\n      }\n\n      var generator = new LibGenerateTestUserSig(SDKAPPID, SECRETKEY, EXPIRETIME);\n      var userSig = generator.genTestUserSig(USERID);\n      return {\n        sdkAppId: SDKAPPID,\n        userSig: userSig\n      };\n    }\n  }\n};",null]}