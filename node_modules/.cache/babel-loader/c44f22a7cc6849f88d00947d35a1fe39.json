{"remainingRequest":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/babel-loader/lib/index.js!/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/run/media/gz/G/c2020spring/hci/project/FrontEnd/src/components/voice.vue?vue&type=script&lang=js&","dependencies":[{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/src/components/voice.vue","mtime":1592044083350},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1588990144497},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1588990144242},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1588990144497},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1588990158440}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport TRTC from 'trtc-js-sdk';\nimport { TEST_ACCOUNT } from \"../const/account_dev\";\nimport { mapState } from 'vuex';\nexport default {\n  name: 'voiceCommunicate',\n  components: {},\n  data: function data() {\n    return {\n      sdkAppId: TEST_ACCOUNT.sdkAppId,\n      userId: TEST_ACCOUNT.userId + (Math.random() * 100).toFixed(),\n      userToken: TEST_ACCOUNT.userToken,\n      client: '',\n      localStream: '',\n      roomId: this.$store.state.currentRoom.idTRTCRoom,\n      remoteVideo: [],\n      isSignUp: false,\n      isLink: false\n    };\n  },\n  created: function created() {},\n  methods: {\n    voicecommunicate: function voicecommunicate() {\n      if (this.isOpenVoice === false) {\n        this.isOpenVoice = true;\n        this.msg = this.msg2;\n        this.createClient();\n      } else {\n        this.isOpenVoice = false;\n        this.msg = this.msg1;\n        this.signOut();\n      }\n    },\n    createClient: function createClient() {\n      //获取签名\n      var config = this.genTestUserSig();\n      var sdkAppId = config.sdkAppId;\n      var userSig = config.userSig;\n      this.client = TRTC.createClient({\n        mode: 'videoCall',\n        sdkAppId: sdkAppId,\n        userId: this.userId,\n        userSig: userSig\n      });\n      console.log(sdkAppId, this.userId, userSig, 111111111); //注册远程监听，要放在加入房间前--这里用了发布订阅模式\n\n      this.subscribeStream();\n      this.joinRoom(this.roomId);\n    },\n    //加入房间\n    joinRoom: function joinRoom(roomId) {\n      var _this = this;\n\n      console.log(roomId);\n\n      if (!this.isSignUp) {\n        this.client.join({\n          roomId: roomId\n        }).then(function () {\n          console.log('进房成功');\n          _this.isSignUp = true; //创建本地流\n\n          _this.createStream(_this.userId); // //播放远端流\n\n\n          _this.playRemoteStream(_this.client);\n\n          _this.isLink = true;\n        }).catch(function (error) {\n          console.error('进房失败 ' + error);\n        });\n      } else {\n        alert('不能重复加入直播间');\n      }\n    },\n    createStream: function createStream(userId) {\n      var _this2 = this;\n\n      var localStream = TRTC.createStream({\n        userId: userId,\n        audio: true,\n        video: false\n      });\n      this.localStream = localStream;\n      localStream.initialize().catch(function (error) {\n        console.error('初始化本地流失败 ' + error);\n      }).then(function () {\n        console.log('初始化本地流成功');\n        localStream.play('local_stream'); //创建好后才能发布\n\n        _this2.publishStream(localStream);\n      });\n    },\n    publishStream: function publishStream(localStream) {\n      this.client.publish(localStream).catch(function (error) {\n        console.error('本地流发布失败 ' + error);\n      }).then(function () {\n        console.log('本地流发布成功');\n      });\n    },\n    playRemoteStream: function playRemoteStream() {\n      var _this3 = this;\n\n      this.client.on('stream-subscribed', function (event) {\n        var remoteStream = event.stream;\n        console.log('远端流订阅成功：' + remoteStream.getId());\n\n        _this3.remoteVideo.push(remoteStream.getId()); // 播放远端流\n\n\n        _this3.$nextTick(function () {\n          remoteStream.play('remote_stream' + remoteStream.getId());\n        }, 1000);\n      });\n    },\n    //订阅远端流--加入房间之前\n    subscribeStream: function subscribeStream() {\n      var _this4 = this;\n\n      this.client.on('stream-added', function (event) {\n        var remoteStream = event.stream;\n        console.log('远端流增加: ' + remoteStream.getId()); //订阅远端流\n\n        _this4.client.subscribe(remoteStream);\n      });\n    },\n    signOut: function signOut() {\n      var _this5 = this;\n\n      this.isSignUp = false;\n      this.remoteVideo = [];\n      this.client.leave().then(function () {\n        // 退房成功，可再次调用client.join重新进房开启新的通话。\n        console.log('退出直播间');\n        _this5.isLink = false;\n      }).catch(function (error) {\n        console.error('退出直播间失败 ' + error); // 错误不可恢复，需要刷新页面。\n      });\n    },\n    genTestUserSig: function genTestUserSig() {\n      var USERID = this.userId;\n      var SDKAPPID = this.sdkAppId;\n      var EXPIRETIME = 604800;\n      var SECRETKEY = this.userToken;\n\n      if (SDKAPPID === '' || SECRETKEY === '') {\n        alert('请先配置好您的账号信息： SDKAPPID 及 SECRETKEY ' + '\\r\\n\\r\\nPlease configure your SDKAPPID/SECRETKEY in js/debug/GenerateTestUserSig.js');\n      }\n\n      var generator = new window.LibGenerateTestUserSig(SDKAPPID, SECRETKEY, EXPIRETIME);\n      var userSig = generator.genTestUserSig(USERID);\n      return {\n        sdkAppId: SDKAPPID,\n        userSig: userSig\n      };\n    }\n  }\n};",{"version":3,"sources":["voice.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"app\">\n    <el-button type=\"primary\" @click=\"createClient\" v-if=\"!isLink\" size=\"mini\">连麦</el-button>\n    <el-button type=\"primary\" @click=\"signOut\" v-else>退出语音</el-button>\n    <div id='local_stream' class='video'></div>\n    <template v-for=\"item in remoteVideo\" >\n      <div :id=\"'remote_stream'+ item\" class='video' :key='item'></div>\n    </template>\n  </div>\n</template>\n\n<script>\nimport TRTC from 'trtc-js-sdk'\nimport {TEST_ACCOUNT} from '../const/account_dev'\n import {mapState} from 'vuex'\nexport default {\n  name: 'voiceCommunicate',\n  components: {\n  },\n  data() {\n    return {\n      sdkAppId: TEST_ACCOUNT.sdkAppId,\n      userId: TEST_ACCOUNT.userId + (Math.random() * 100).toFixed(),\n      userToken: TEST_ACCOUNT.userToken,\n      client: '',\n      localStream: '',\n      roomId: this.$store.state.currentRoom.idTRTCRoom,\n      remoteVideo: [],\n      isSignUp: false,\n      isLink: false,\n    }\n  },\n  created() {\n  },\n  methods: {\n        voicecommunicate() {\n            if(this.isOpenVoice===false)\n            {\n                this.isOpenVoice=true\n                this.msg=this.msg2\n                this.createClient()\n            }else{\n                this.isOpenVoice=false\n                this.msg=this.msg1\n                this.signOut()\n            }\n        },\n       createClient() {\n      //获取签名\n      const config = this.genTestUserSig()\n      const sdkAppId = config.sdkAppId\n      const userSig = config.userSig\n      this.client = TRTC.createClient({\n        mode: 'videoCall',\n        sdkAppId,\n        userId: this.userId,\n        userSig,\n      });\n      console.log(sdkAppId,this.userId,userSig,111111111)\n      //注册远程监听，要放在加入房间前--这里用了发布订阅模式\n      this.subscribeStream()\n      this.joinRoom(this.roomId)\n\n    },\n\n    //加入房间\n    joinRoom (roomId) {\n      console.log(roomId);\n      if(!this.isSignUp) {\n        this.client.join({ roomId })\n          .then(() => {\n            console.log('进房成功');\n            this.isSignUp = true;\n            //创建本地流\n            this.createStream(this.userId)\n            // //播放远端流\n            this.playRemoteStream(this.client)\n            this.isLink = true\n          })\n          .catch(error => {\n            console.error('进房失败 ' + error);\n          })\n      } else {\n        alert('不能重复加入直播间')\n      }\n\n    },\n\n    createStream(userId) {\n      const localStream = TRTC.createStream({ userId, audio: true, video: false });\n      this.localStream =localStream\n\n      localStream\n        .initialize()\n        .catch(error => {\n          console.error('初始化本地流失败 ' + error);\n        })\n        .then(() => {\n          console.log('初始化本地流成功');\n          localStream.play('local_stream');\n          //创建好后才能发布\n          this.publishStream(localStream)\n        });\n    },\n\n    publishStream(localStream) {\n      this.client\n        .publish(localStream)\n        .catch(error => {\n          console.error('本地流发布失败 ' + error);\n        })\n        .then(() => {\n          console.log('本地流发布成功');\n        });\n    },\n\n    playRemoteStream() {\n      this.client.on('stream-subscribed', event => {\n        const remoteStream = event.stream;\n        console.log('远端流订阅成功：' + remoteStream.getId());\n        this.remoteVideo.push(remoteStream.getId())\n        // 播放远端流\n        this.$nextTick(()=>{\n        remoteStream.play('remote_stream'+ remoteStream.getId());\n        },1000)\n\n      })\n\n    },\n\n    //订阅远端流--加入房间之前\n    subscribeStream () {\n      this.client.on('stream-added', event => {\n        const remoteStream = event.stream;\n        console.log('远端流增加: ' + remoteStream.getId());\n        //订阅远端流\n        this.client.subscribe(remoteStream);\n      });\n    },\n\n    signOut() {\n      this.isSignUp=false;\n      this.remoteVideo=[];\n      this.client\n      .leave()\n      .then(() => {\n        // 退房成功，可再次调用client.join重新进房开启新的通话。\n        console.log('退出直播间')\n        this.isLink = false\n      })\n      .catch(error => {\n        console.error('退出直播间失败 ' + error);\n        // 错误不可恢复，需要刷新页面。\n      });\n    },\n\n    genTestUserSig() {\n      const USERID = this.userId\n      const SDKAPPID = this.sdkAppId;\n      const EXPIRETIME = 604800;\n      const SECRETKEY = this.userToken;\n      if (SDKAPPID === '' || SECRETKEY === '') {\n        alert(\n          '请先配置好您的账号信息： SDKAPPID 及 SECRETKEY ' +\n            '\\r\\n\\r\\nPlease configure your SDKAPPID/SECRETKEY in js/debug/GenerateTestUserSig.js'\n        );\n      }\n      const generator = new window.LibGenerateTestUserSig(SDKAPPID, SECRETKEY, EXPIRETIME);\n      const userSig = generator.genTestUserSig(USERID);\n      return {\n        sdkAppId: SDKAPPID,\n        userSig: userSig\n      };\n    }\n    }\n}\n</script>\n"],"sourceRoot":"src/components"}]}