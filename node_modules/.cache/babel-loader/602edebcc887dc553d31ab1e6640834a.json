{"remainingRequest":"D:\\HCI\\github\\node_modules\\babel-loader\\lib\\index.js!D:\\HCI\\github\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\HCI\\github\\src\\store\\modules\\user.js","dependencies":[{"path":"D:\\HCI\\github\\src\\store\\modules\\user.js","mtime":1589122703623},{"path":"D:\\HCI\\github\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589122691350},{"path":"D:\\HCI\\github\\node_modules\\babel-loader\\lib\\index.js","mtime":1589122690916},{"path":"D:\\HCI\\github\\node_modules\\eslint-loader\\index.js","mtime":1589122694623}],"contextDependencies":[],"result":["import tim from \"../../tim\";\nvar user = {\n  state: {\n    currentUserProfile: {},\n    isLogin: false,\n    isSDKReady: false,\n    // TIM SDK 是否 ready\n    userID: 0,\n    userSig: '',\n    sdkAppID: 0\n  },\n  mutations: {\n    updateCurrentUserProfile: function updateCurrentUserProfile(state, userProfile) {\n      state.currentUserProfile = userProfile;\n    },\n    toggleIsLogin: function toggleIsLogin(state, isLogin) {\n      state.isLogin = typeof isLogin === 'undefined' ? !state.isLogin : isLogin;\n    },\n    toggleIsSDKReady: function toggleIsSDKReady(state, isSDKReady) {\n      state.isSDKReady = typeof isSDKReady === 'undefined' ? !state.isSDKReady : isSDKReady;\n    },\n    reset: function reset(state) {\n      Object.assign(state, {\n        currentUserProfile: {},\n        isLogin: false,\n        isSDKReady: false // TIM SDK 是否 ready\n\n      });\n    },\n    GET_USER_INFO: function GET_USER_INFO(state, payload) {\n      state.userID = payload.userID;\n      state.userSig = payload.userSig;\n      state.sdkAppID = payload.sdkAppID;\n    }\n  },\n  actions: {\n    // login(context, userID) {\n    //   tim\n    //     .login({\n    //       userID,\n    //       userSig: window.genTestUserSig(userID).userSig\n    //     })\n    //     .then(() => {\n    //       context.commit('toggleIsLogin', true)\n    //       context.commit('startComputeCurrent')\n    //       window.$message({ type: 'success', message: '登录成功' })\n    //     })\n    //     .catch(imError => {\n    //       if (imError.code === 2000) {\n    //         window.$message.error(imError.message + ', 请检查是否正确填写了 SDKAPPID')\n    //       } else {\n    //         window.$message.error(imError.message)\n    //       }\n    //     })\n    // },\n    logout: function logout(context) {\n      // 若有当前会话，在退出登录时已读上报\n      if (context.rootState.conversation.currentConversation.conversationID) {\n        tim.setMessageRead({\n          conversationID: context.rootState.conversation.currentConversation.conversationID\n        });\n      }\n\n      tim.logout().then(function () {\n        context.commit('toggleIsLogin');\n        context.commit('stopComputeCurrent');\n        context.commit('reset');\n      });\n    }\n  }\n};\nexport default user;",{"version":3,"sources":["D:/HCI/github/src/store/modules/user.js"],"names":["tim","user","state","currentUserProfile","isLogin","isSDKReady","userID","userSig","sdkAppID","mutations","updateCurrentUserProfile","userProfile","toggleIsLogin","toggleIsSDKReady","reset","Object","assign","GET_USER_INFO","payload","actions","logout","context","rootState","conversation","currentConversation","conversationID","setMessageRead","then","commit"],"mappings":"AAAA,OAAOA,GAAP;AACA,IAAMC,IAAI,GAAG;AACXC,EAAAA,KAAK,EAAE;AACLC,IAAAA,kBAAkB,EAAE,EADf;AAELC,IAAAA,OAAO,EAAE,KAFJ;AAGLC,IAAAA,UAAU,EAAE,KAHP;AAGc;AACnBC,IAAAA,MAAM,EAAE,CAJH;AAKLC,IAAAA,OAAO,EAAE,EALJ;AAMLC,IAAAA,QAAQ,EAAE;AANL,GADI;AASXC,EAAAA,SAAS,EAAE;AACTC,IAAAA,wBADS,oCACgBR,KADhB,EACuBS,WADvB,EACoC;AAC3CT,MAAAA,KAAK,CAACC,kBAAN,GAA2BQ,WAA3B;AACD,KAHQ;AAITC,IAAAA,aAJS,yBAIKV,KAJL,EAIYE,OAJZ,EAIqB;AAC5BF,MAAAA,KAAK,CAACE,OAAN,GAAgB,OAAOA,OAAP,KAAmB,WAAnB,GAAiC,CAACF,KAAK,CAACE,OAAxC,GAAkDA,OAAlE;AACD,KANQ;AAOTS,IAAAA,gBAPS,4BAOQX,KAPR,EAOeG,UAPf,EAO2B;AAClCH,MAAAA,KAAK,CAACG,UAAN,GAAmB,OAAOA,UAAP,KAAsB,WAAtB,GAAoC,CAACH,KAAK,CAACG,UAA3C,GAAwDA,UAA3E;AACD,KATQ;AAUTS,IAAAA,KAVS,iBAUHZ,KAVG,EAUI;AACXa,MAAAA,MAAM,CAACC,MAAP,CAAcd,KAAd,EAAqB;AACnBC,QAAAA,kBAAkB,EAAE,EADD;AAEnBC,QAAAA,OAAO,EAAE,KAFU;AAGnBC,QAAAA,UAAU,EAAE,KAHO,CAGD;;AAHC,OAArB;AAKD,KAhBQ;AAiBTY,IAAAA,aAjBS,yBAiBKf,KAjBL,EAiBYgB,OAjBZ,EAiBqB;AAC5BhB,MAAAA,KAAK,CAACI,MAAN,GAAeY,OAAO,CAACZ,MAAvB;AACAJ,MAAAA,KAAK,CAACK,OAAN,GAAgBW,OAAO,CAACX,OAAxB;AACAL,MAAAA,KAAK,CAACM,QAAN,GAAiBU,OAAO,CAACV,QAAzB;AACD;AArBQ,GATA;AAgCXW,EAAAA,OAAO,EAAE;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,MApBO,kBAoBAC,OApBA,EAoBS;AACd;AACA,UAAIA,OAAO,CAACC,SAAR,CAAkBC,YAAlB,CAA+BC,mBAA/B,CAAmDC,cAAvD,EAAuE;AACrEzB,QAAAA,GAAG,CAAC0B,cAAJ,CAAmB;AAAED,UAAAA,cAAc,EAAEJ,OAAO,CAACC,SAAR,CAAkBC,YAAlB,CAA+BC,mBAA/B,CAAmDC;AAArE,SAAnB;AACD;;AACDzB,MAAAA,GAAG,CAACoB,MAAJ,GAAaO,IAAb,CAAkB,YAAM;AACtBN,QAAAA,OAAO,CAACO,MAAR,CAAe,eAAf;AACAP,QAAAA,OAAO,CAACO,MAAR,CAAe,oBAAf;AACAP,QAAAA,OAAO,CAACO,MAAR,CAAe,OAAf;AACD,OAJD;AAKD;AA9BM;AAhCE,CAAb;AAkEA,eAAe3B,IAAf","sourcesContent":["import tim from '../../tim'\r\nconst user = {\r\n  state: {\r\n    currentUserProfile: {},\r\n    isLogin: false,\r\n    isSDKReady: false, // TIM SDK 是否 ready\r\n    userID: 0,\r\n    userSig: '',\r\n    sdkAppID: 0,\r\n  },\r\n  mutations: {\r\n    updateCurrentUserProfile(state, userProfile) {\r\n      state.currentUserProfile = userProfile\r\n    },\r\n    toggleIsLogin(state, isLogin) {\r\n      state.isLogin = typeof isLogin === 'undefined' ? !state.isLogin : isLogin\r\n    },\r\n    toggleIsSDKReady(state, isSDKReady) {\r\n      state.isSDKReady = typeof isSDKReady === 'undefined' ? !state.isSDKReady : isSDKReady\r\n    },\r\n    reset(state) {\r\n      Object.assign(state, {\r\n        currentUserProfile: {},\r\n        isLogin: false,\r\n        isSDKReady: false // TIM SDK 是否 ready\r\n      })\r\n    },\r\n    GET_USER_INFO(state, payload) {\r\n      state.userID = payload.userID\r\n      state.userSig = payload.userSig\r\n      state.sdkAppID = payload.sdkAppID\r\n    },\r\n  },\r\n  actions: {\r\n    // login(context, userID) {\r\n    //   tim\r\n    //     .login({\r\n    //       userID,\r\n    //       userSig: window.genTestUserSig(userID).userSig\r\n    //     })\r\n    //     .then(() => {\r\n    //       context.commit('toggleIsLogin', true)\r\n    //       context.commit('startComputeCurrent')\r\n    //       window.$message({ type: 'success', message: '登录成功' })\r\n    //     })\r\n    //     .catch(imError => {\r\n    //       if (imError.code === 2000) {\r\n    //         window.$message.error(imError.message + ', 请检查是否正确填写了 SDKAPPID')\r\n    //       } else {\r\n    //         window.$message.error(imError.message)\r\n    //       }\r\n    //     })\r\n    // },\r\n    logout(context) {\r\n      // 若有当前会话，在退出登录时已读上报\r\n      if (context.rootState.conversation.currentConversation.conversationID) {\r\n        tim.setMessageRead({ conversationID: context.rootState.conversation.currentConversation.conversationID })\r\n      }\r\n      tim.logout().then(() => {\r\n        context.commit('toggleIsLogin')\r\n        context.commit('stopComputeCurrent')\r\n        context.commit('reset')\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\nexport default user\r\n"]}]}