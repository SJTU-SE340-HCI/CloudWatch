{"remainingRequest":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/babel-loader/lib/index.js!/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/eslint-loader/index.js??ref--13-0!/run/media/gz/G/c2020spring/hci/project/FrontEnd/src/store/modules/user.js","dependencies":[{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/src/store/modules/user.js","mtime":1593037815868},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1588990144497},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1588990144242},{"path":"/run/media/gz/G/c2020spring/hci/project/FrontEnd/node_modules/eslint-loader/index.js","mtime":1588990146717}],"contextDependencies":[],"result":["import tim from \"../../tim\";\nvar user = {\n  state: {\n    currentUserProfile: {},\n    isLogin: false,\n    isSDKReady: false,\n    // TIM SDK 是否 ready\n    userID: 0,\n    userSig: '',\n    sdkAppID: 0,\n    userID_cw: 0\n  },\n  mutations: {\n    updateCurrentUserProfile: function updateCurrentUserProfile(state, userProfile) {\n      state.currentUserProfile = userProfile;\n    },\n    toggleIsLogin: function toggleIsLogin(state, isLogin) {\n      state.isLogin = typeof isLogin === 'undefined' ? !state.isLogin : isLogin;\n    },\n    toggleIsSDKReady: function toggleIsSDKReady(state, isSDKReady) {\n      state.isSDKReady = typeof isSDKReady === 'undefined' ? !state.isSDKReady : isSDKReady;\n    },\n    reset: function reset(state) {\n      Object.assign(state, {\n        currentUserProfile: {},\n        isLogin: false,\n        isSDKReady: false // TIM SDK 是否 ready\n\n      });\n    },\n    GET_USER_INFO: function GET_USER_INFO(state, payload) {\n      state.userID = payload.userID;\n      state.userSig = payload.userSig;\n      state.sdkAppID = payload.sdkAppID;\n    },\n    updateUserID: function updateUserID(state, user_id) {\n      state.userID_cw = user_id;\n    }\n  },\n  actions: {\n    // login(context, userID) {\n    //   tim\n    //     .login({\n    //       userID,\n    //       userSig: window.genTestUserSig(userID).userSig\n    //     })\n    //     .then(() => {\n    //       context.commit('toggleIsLogin', true)\n    //       context.commit('startComputeCurrent')\n    //       window.$message({ type: 'success', message: '登录成功' })\n    //     })\n    //     .catch(imError => {\n    //       if (imError.code === 2000) {\n    //         window.$message.error(imError.message + ', 请检查是否正确填写了 SDKAPPID')\n    //       } else {\n    //         window.$message.error(imError.message)\n    //       }\n    //     })\n    // },\n    logout: function logout(context) {\n      // 若有当前会话，在退出登录时已读上报\n      if (context.rootState.conversation.currentConversation.conversationID) {\n        tim.setMessageRead({\n          conversationID: context.rootState.conversation.currentConversation.conversationID\n        });\n      }\n\n      tim.logout().then(function () {\n        context.commit('toggleIsLogin');\n        context.commit('stopComputeCurrent');\n        context.commit('reset');\n      });\n    }\n  }\n};\nexport default user;",{"version":3,"sources":["/run/media/gz/G/c2020spring/hci/project/FrontEnd/src/store/modules/user.js"],"names":["tim","user","state","currentUserProfile","isLogin","isSDKReady","userID","userSig","sdkAppID","userID_cw","mutations","updateCurrentUserProfile","userProfile","toggleIsLogin","toggleIsSDKReady","reset","Object","assign","GET_USER_INFO","payload","updateUserID","user_id","actions","logout","context","rootState","conversation","currentConversation","conversationID","setMessageRead","then","commit"],"mappings":"AAAA,OAAOA,GAAP;AACA,IAAMC,IAAI,GAAG;AACXC,EAAAA,KAAK,EAAE;AACLC,IAAAA,kBAAkB,EAAE,EADf;AAELC,IAAAA,OAAO,EAAE,KAFJ;AAGLC,IAAAA,UAAU,EAAE,KAHP;AAGc;AACnBC,IAAAA,MAAM,EAAE,CAJH;AAKLC,IAAAA,OAAO,EAAE,EALJ;AAMLC,IAAAA,QAAQ,EAAE,CANL;AAOLC,IAAAA,SAAS,EAAE;AAPN,GADI;AAUXC,EAAAA,SAAS,EAAE;AACTC,IAAAA,wBADS,oCACgBT,KADhB,EACuBU,WADvB,EACoC;AAC3CV,MAAAA,KAAK,CAACC,kBAAN,GAA2BS,WAA3B;AACD,KAHQ;AAITC,IAAAA,aAJS,yBAIKX,KAJL,EAIYE,OAJZ,EAIqB;AAC5BF,MAAAA,KAAK,CAACE,OAAN,GAAgB,OAAOA,OAAP,KAAmB,WAAnB,GAAiC,CAACF,KAAK,CAACE,OAAxC,GAAkDA,OAAlE;AACD,KANQ;AAOTU,IAAAA,gBAPS,4BAOQZ,KAPR,EAOeG,UAPf,EAO2B;AAClCH,MAAAA,KAAK,CAACG,UAAN,GAAmB,OAAOA,UAAP,KAAsB,WAAtB,GAAoC,CAACH,KAAK,CAACG,UAA3C,GAAwDA,UAA3E;AACD,KATQ;AAUTU,IAAAA,KAVS,iBAUHb,KAVG,EAUI;AACXc,MAAAA,MAAM,CAACC,MAAP,CAAcf,KAAd,EAAqB;AACnBC,QAAAA,kBAAkB,EAAE,EADD;AAEnBC,QAAAA,OAAO,EAAE,KAFU;AAGnBC,QAAAA,UAAU,EAAE,KAHO,CAGD;;AAHC,OAArB;AAKD,KAhBQ;AAiBTa,IAAAA,aAjBS,yBAiBKhB,KAjBL,EAiBYiB,OAjBZ,EAiBqB;AAC5BjB,MAAAA,KAAK,CAACI,MAAN,GAAea,OAAO,CAACb,MAAvB;AACAJ,MAAAA,KAAK,CAACK,OAAN,GAAgBY,OAAO,CAACZ,OAAxB;AACAL,MAAAA,KAAK,CAACM,QAAN,GAAiBW,OAAO,CAACX,QAAzB;AACD,KArBQ;AAsBTY,IAAAA,YAtBS,wBAsBIlB,KAtBJ,EAsBWmB,OAtBX,EAsBoB;AAC3BnB,MAAAA,KAAK,CAACO,SAAN,GAAkBY,OAAlB;AACD;AAxBQ,GAVA;AAoCXC,EAAAA,OAAO,EAAE;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,MApBO,kBAoBAC,OApBA,EAoBS;AACd;AACA,UAAIA,OAAO,CAACC,SAAR,CAAkBC,YAAlB,CAA+BC,mBAA/B,CAAmDC,cAAvD,EAAuE;AACrE5B,QAAAA,GAAG,CAAC6B,cAAJ,CAAmB;AAAED,UAAAA,cAAc,EAAEJ,OAAO,CAACC,SAAR,CAAkBC,YAAlB,CAA+BC,mBAA/B,CAAmDC;AAArE,SAAnB;AACD;;AACD5B,MAAAA,GAAG,CAACuB,MAAJ,GAAaO,IAAb,CAAkB,YAAM;AACtBN,QAAAA,OAAO,CAACO,MAAR,CAAe,eAAf;AACAP,QAAAA,OAAO,CAACO,MAAR,CAAe,oBAAf;AACAP,QAAAA,OAAO,CAACO,MAAR,CAAe,OAAf;AACD,OAJD;AAKD;AA9BM;AApCE,CAAb;AAsEA,eAAe9B,IAAf","sourcesContent":["import tim from '../../tim'\nconst user = {\n  state: {\n    currentUserProfile: {},\n    isLogin: false,\n    isSDKReady: false, // TIM SDK 是否 ready\n    userID: 0,\n    userSig: '',\n    sdkAppID: 0,\n    userID_cw: 0,\n  },\n  mutations: {\n    updateCurrentUserProfile(state, userProfile) {\n      state.currentUserProfile = userProfile\n    },\n    toggleIsLogin(state, isLogin) {\n      state.isLogin = typeof isLogin === 'undefined' ? !state.isLogin : isLogin\n    },\n    toggleIsSDKReady(state, isSDKReady) {\n      state.isSDKReady = typeof isSDKReady === 'undefined' ? !state.isSDKReady : isSDKReady\n    },\n    reset(state) {\n      Object.assign(state, {\n        currentUserProfile: {},\n        isLogin: false,\n        isSDKReady: false // TIM SDK 是否 ready\n      })\n    },\n    GET_USER_INFO(state, payload) {\n      state.userID = payload.userID\n      state.userSig = payload.userSig\n      state.sdkAppID = payload.sdkAppID\n    },\n    updateUserID(state, user_id) {\n      state.userID_cw = user_id\n    }\n  },\n  actions: {\n    // login(context, userID) {\n    //   tim\n    //     .login({\n    //       userID,\n    //       userSig: window.genTestUserSig(userID).userSig\n    //     })\n    //     .then(() => {\n    //       context.commit('toggleIsLogin', true)\n    //       context.commit('startComputeCurrent')\n    //       window.$message({ type: 'success', message: '登录成功' })\n    //     })\n    //     .catch(imError => {\n    //       if (imError.code === 2000) {\n    //         window.$message.error(imError.message + ', 请检查是否正确填写了 SDKAPPID')\n    //       } else {\n    //         window.$message.error(imError.message)\n    //       }\n    //     })\n    // },\n    logout(context) {\n      // 若有当前会话，在退出登录时已读上报\n      if (context.rootState.conversation.currentConversation.conversationID) {\n        tim.setMessageRead({ conversationID: context.rootState.conversation.currentConversation.conversationID })\n      }\n      tim.logout().then(() => {\n        context.commit('toggleIsLogin')\n        context.commit('stopComputeCurrent')\n        context.commit('reset')\n      })\n    }\n  }\n}\n\nexport default user\n"]}]}