{"remainingRequest":"D:\\HCI\\github\\node_modules\\thread-loader\\dist\\cjs.js!D:\\HCI\\github\\node_modules\\babel-loader\\lib\\index.js!D:\\HCI\\github\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\HCI\\github\\src\\store\\modules\\conversation.js","dependencies":[{"path":"D:\\HCI\\github\\src\\store\\modules\\conversation.js","mtime":1589122703623},{"path":"D:\\HCI\\github\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589122691350},{"path":"D:\\HCI\\github\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1589122702323},{"path":"D:\\HCI\\github\\node_modules\\babel-loader\\lib\\index.js","mtime":1589122690916},{"path":"D:\\HCI\\github\\node_modules\\eslint-loader\\index.js","mtime":1589122694623}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport _toConsumableArray from \"D:\\\\HCI\\\\github\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport tim from 'tim';\nimport TIM from 'tim-js-sdk';\nimport store from '..';\nimport { titleNotify } from \"../../utils\";\nvar conversationModules = {\n  state: {\n    currentConversation: {},\n    currentMessageList: [],\n    nextReqMessageID: '',\n    isCompleted: false,\n    // 当前会话消息列表是否已经拉完了所有消息\n    conversationList: []\n  },\n  getters: {\n    toAccount: function toAccount(state) {\n      if (!state.currentConversation || !state.currentConversation.conversationID) {\n        return '';\n      }\n\n      switch (state.currentConversation.type) {\n        case 'C2C':\n          return state.currentConversation.conversationID.replace('C2C', '');\n\n        case 'GROUP':\n          return state.currentConversation.conversationID.replace('GROUP', '');\n\n        default:\n          return state.currentConversation.conversationID;\n      }\n    },\n    currentConversationType: function currentConversationType(state) {\n      if (!state.currentConversation || !state.currentConversation.type) {\n        return '';\n      }\n\n      return state.currentConversation.type;\n    },\n    totalUnreadCount: function totalUnreadCount(state) {\n      var result = state.conversationList.reduce(function (count, conversation) {\n        // 当前会话不计算总未读\n        if (!store.getters.hidden && state.currentConversation.conversationID === conversation.conversationID) {\n          return count;\n        }\n\n        return count + conversation.unreadCount;\n      }, 0);\n      titleNotify(result);\n      return result;\n    },\n    // 用于当前会话的图片预览\n    imgUrlList: function imgUrlList(state) {\n      return state.currentMessageList.filter(function (message) {\n        return message.type === TIM.TYPES.MSG_IMAGE && !message.isRevoked;\n      }) // 筛选出没有撤回并且类型是图片类型的消息\n      .map(function (message) {\n        return message.payload.imageInfoArray[0].url;\n      });\n    }\n  },\n  mutations: {\n    /**\r\n     * 更新当前会话\r\n     * 调用时机: 切换会话时\r\n     * @param {Object} state\r\n     * @param {Conversation} conversation\r\n     */\n    updateCurrentConversation: function updateCurrentConversation(state, conversation) {\n      state.currentConversation = conversation;\n      state.currentMessageList = [];\n      state.nextReqMessageID = '';\n      state.isCompleted = false;\n    },\n\n    /**\r\n     * 更新会话列表\r\n     * 调用时机：触发会话列表更新事件时。CONVERSATION_LIST_UPDATED\r\n     * @param {Object} state\r\n     * @param {Conversation[]} conversationList\r\n     */\n    updateConversationList: function updateConversationList(state, conversationList) {\n      state.conversationList = conversationList;\n    },\n\n    /**\r\n     * 重置当前会话\r\n     * 调用时机：需要重置当前会话时，例如：当前会话是一个群组，正好被踢出群时（被踢群事件触发），重置当前会话\r\n     * @param {Object} state\r\n     */\n    resetCurrentConversation: function resetCurrentConversation(state) {\n      state.currentConversation = {};\n    },\n\n    /**\r\n     * 将消息插入当前会话列表\r\n     * 调用时机：收/发消息事件触发时\r\n     * @param {Object} state\r\n     * @param {Message[]|Message} data\r\n     * @returns\r\n     */\n    pushCurrentMessageList: function pushCurrentMessageList(state, data) {\n      // 还没当前会话，则跳过\n      if (!state.currentConversation.conversationID) {\n        return;\n      }\n\n      if (Array.isArray(data)) {\n        // 筛选出当前会话的消息\n        var result = data.filter(function (item) {\n          return item.conversationID === state.currentConversation.conversationID;\n        });\n        state.currentMessageList = [].concat(_toConsumableArray(state.currentMessageList), _toConsumableArray(result));\n      } else if (data.conversationID === state.currentConversation.conversationID) {\n        state.currentMessageList = [].concat(_toConsumableArray(state.currentMessageList), [data]);\n      }\n    },\n\n    /**\r\n     * 从当前消息列表中删除某条消息\r\n     * @param {Object} state\r\n     * @param {Message} message\r\n     */\n    removeMessage: function removeMessage(state, message) {\n      var index = state.currentMessageList.findIndex(function (_ref) {\n        var ID = _ref.ID;\n        return ID === message.ID;\n      });\n\n      if (index >= 0) {\n        state.currentMessageList.splice(index, 1);\n      }\n    },\n    reset: function reset(state) {\n      Object.assign(state, {\n        currentConversation: {},\n        currentMessageList: [],\n        nextReqMessageID: '',\n        isCompleted: false,\n        // 当前会话消息列表是否已经拉完了所有消息\n        conversationList: []\n      });\n    }\n  },\n  actions: {\n    /**\r\n     * 获取消息列表\r\n     * 调用时机：打开某一会话时或下拉获取历史消息时\r\n     * @param {Object} context\r\n     * @param {String} conversationID\r\n     */\n    getMessageList: function getMessageList(context, conversationID) {\n      if (context.state.isCompleted) {\n        context.commit('showMessage', {\n          message: '已经没有更多的历史消息了哦',\n          type: 'info'\n        });\n        return;\n      }\n\n      var _context$state = context.state,\n          nextReqMessageID = _context$state.nextReqMessageID,\n          currentMessageList = _context$state.currentMessageList;\n      tim.getMessageList({\n        conversationID: conversationID,\n        nextReqMessageID: nextReqMessageID,\n        count: 15\n      }).then(function (imReponse) {\n        // 更新messageID，续拉时要用到\n        context.state.nextReqMessageID = imReponse.data.nextReqMessageID;\n        context.state.isCompleted = imReponse.data.isCompleted; // 更新当前消息列表，从头部插入\n\n        context.state.currentMessageList = [].concat(_toConsumableArray(imReponse.data.messageList), _toConsumableArray(currentMessageList));\n      });\n    },\n\n    /**\r\n     * 切换会话\r\n     * 调用时机：切换会话时\r\n     * @param {Object} context\r\n     * @param {String} conversationID\r\n     */\n    checkoutConversation: function checkoutConversation(context, conversationID) {\n      context.commit('resetCurrentMemberList'); // 1.切换会话前，将切换前的会话进行已读上报\n\n      if (context.state.currentConversation.conversationID) {\n        var prevConversationID = context.state.currentConversation.conversationID;\n        tim.setMessageRead({\n          conversationID: prevConversationID\n        });\n      } // 2.待切换的会话也进行已读上报\n\n\n      tim.setMessageRead({\n        conversationID: conversationID\n      }); // 3. 获取会话信息\n\n      return tim.getConversationProfile(conversationID).then(function (_ref2) {\n        var data = _ref2.data;\n        // 3.1 更新当前会话\n        context.commit('updateCurrentConversation', data.conversation); // 3.2 获取消息列表\n\n        context.dispatch('getMessageList', conversationID); // 3.3 拉取第一页群成员列表\n\n        if (data.conversation.type === TIM.TYPES.CONV_GROUP) {\n          return context.dispatch('getGroupMemberList', data.conversation.groupProfile.groupID);\n        }\n\n        return Promise.resolve();\n      });\n    }\n  }\n};\nexport default conversationModules;",null]}