{"remainingRequest":"/Users/liuzhengwei/Downloads/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js!/Users/liuzhengwei/Downloads/TIMSDK/H5/node_modules/babel-loader/lib/index.js!/Users/liuzhengwei/Downloads/TIMSDK/H5/node_modules/eslint-loader/index.js??ref--13-0!/Users/liuzhengwei/Downloads/TIMSDK/H5/src/utils/rtc-client.js","dependencies":[{"path":"/Users/liuzhengwei/Downloads/TIMSDK/H5/src/utils/rtc-client.js","mtime":1584968531000},{"path":"/Users/liuzhengwei/Downloads/TIMSDK/H5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuzhengwei/Downloads/TIMSDK/H5/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuzhengwei/Downloads/TIMSDK/H5/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/liuzhengwei/Downloads/TIMSDK/H5/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/liuzhengwei/Downloads/TIMSDK/H5/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/liuzhengwei/Downloads/TIMSDK/H5/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/liuzhengwei/Downloads/TIMSDK/H5/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\n\n/* eslint-disable */\nimport TRTC from 'trtc-js-sdk';\n\nvar RtcClient = /*#__PURE__*/function () {\n  function RtcClient(options) {\n    _classCallCheck(this, RtcClient);\n\n    this.sdkAppId_ = options.sdkAppId;\n    this.userId_ = options.userId;\n    this.userSig_ = options.userSig;\n    this.roomId_ = options.roomId;\n    this.isJoined_ = false;\n    this.isPublished_ = false;\n    this.localStream_ = null;\n    this.remoteStreams_ = [];\n    this.ready = false; // check if browser is compatible with TRTC\n\n    TRTC.checkSystemRequirements().then(function (result) {\n      if (!result) {\n        alert('Your browser is not compatible with TRTC! Please download Chrome M72+');\n      }\n    });\n  }\n\n  _createClass(RtcClient, [{\n    key: \"join\",\n    value: function () {\n      var _join = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.isJoined_) {\n                  _context.next = 3;\n                  break;\n                }\n\n                console.warn('duplicate RtcClient.join() observed');\n                return _context.abrupt(\"return\");\n\n              case 3:\n                // create a client for RtcClient\n                this.client_ = TRTC.createClient({\n                  mode: 'videoCall',\n                  // 实时通话模式\n                  sdkAppId: this.sdkAppId_,\n                  userId: this.userId_,\n                  userSig: this.userSig_\n                }); // 处理 client 事件\n\n                this.handleEvents();\n                _context.prev = 5;\n                _context.next = 8;\n                return this.client_.join({\n                  roomId: this.roomId_\n                });\n\n              case 8:\n                console.log('join room success');\n                this.isJoined_ = true;\n                _context.next = 17;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](5);\n                window.dispatchEvent(new Event('leave'));\n                alert('进房失败原因：' + _context.t0);\n                return _context.abrupt(\"return\");\n\n              case 17:\n                this.localStream_.on('player-state-changed', function (event) {\n                  console.log(\"local stream \".concat(event.type, \" player is \").concat(event.state));\n\n                  if (event.type === 'video' && event.state === 'PLAYING') {// dismiss the remote user UI placeholder\n                  } else if (event.type === 'video' && event.state === 'STOPPPED') {// show the remote user UI placeholder\n                  }\n                });\n\n                try {\n                  this.localStream_.play('local'); // 在id为 local 的 div 容器上播放本地音视频\n                } catch (e) {} // publish local stream by default after join the room\n\n\n                _context.next = 21;\n                return this.publish();\n\n              case 21:\n                console.log('发布本地流成功！');\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[5, 12]]);\n      }));\n\n      function join() {\n        return _join.apply(this, arguments);\n      }\n\n      return join;\n    }()\n  }, {\n    key: \"leave\",\n    value: function () {\n      var _leave = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.isJoined_) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                console.warn('leave() - leave without join()d observed');\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                if (!this.isPublished_) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                _context2.next = 6;\n                return this.unpublish(true);\n\n              case 6:\n                _context2.prev = 6;\n                _context2.next = 9;\n                return this.client_.leave();\n\n              case 9:\n                this.isJoined_ = false;\n                _context2.next = 15;\n                break;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](6);\n                location.reload();\n\n              case 15:\n                _context2.prev = 15;\n                // 停止本地流，关闭本地流内部的音视频播放器\n                this.localStream_.stop();\n                this.localStream_.close();\n                this.localStream_ = null; // 关闭本地流，释放摄像头和麦克风访问权限\n\n                return _context2.finish(15);\n\n              case 20:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[6, 12, 15, 20]]);\n      }));\n\n      function leave() {\n        return _leave.apply(this, arguments);\n      }\n\n      return leave;\n    }()\n  }, {\n    key: \"publish\",\n    value: function () {\n      var _publish = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this.isJoined_) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                console.warn('publish() - please join() firstly');\n                return _context3.abrupt(\"return\");\n\n              case 3:\n                if (!this.isPublished_) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                console.warn('duplicate RtcClient.publish() observed');\n                return _context3.abrupt(\"return\");\n\n              case 6:\n                _context3.prev = 6;\n                _context3.next = 9;\n                return this.client_.publish(this.localStream_);\n\n              case 9:\n                this.isPublished_ = true;\n                _context3.next = 15;\n                break;\n\n              case 12:\n                _context3.prev = 12;\n                _context3.t0 = _context3[\"catch\"](6);\n                this.isPublished_ = false;\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[6, 12]]);\n      }));\n\n      function publish() {\n        return _publish.apply(this, arguments);\n      }\n\n      return publish;\n    }()\n  }, {\n    key: \"unpublish\",\n    value: function () {\n      var _unpublish = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(isLeaving) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this.isJoined_) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                console.warn('unpublish() - please join() firstly');\n                return _context4.abrupt(\"return\");\n\n              case 3:\n                if (this.isPublished_) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                console.warn('RtcClient.unpublish() called but not published yet');\n                return _context4.abrupt(\"return\");\n\n              case 6:\n                _context4.prev = 6;\n                _context4.next = 9;\n                return this.client_.unpublish(this.localStream_);\n\n              case 9:\n                this.isPublished_ = false;\n                _context4.next = 15;\n                break;\n\n              case 12:\n                _context4.prev = 12;\n                _context4.t0 = _context4[\"catch\"](6);\n\n                if (!isLeaving) {\n                  console.warn('leaving the room because unpublish failure observed');\n                  this.leave();\n                }\n\n              case 15:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[6, 12]]);\n      }));\n\n      function unpublish(_x) {\n        return _unpublish.apply(this, arguments);\n      }\n\n      return unpublish;\n    }()\n  }, {\n    key: \"muteLocalAudio\",\n    value: function muteLocalAudio() {\n      this.localStream_.muteAudio();\n    }\n  }, {\n    key: \"unmuteLocalAudio\",\n    value: function unmuteLocalAudio() {\n      this.localStream_.unmuteAudio();\n    }\n  }, {\n    key: \"muteLocalVideo\",\n    value: function muteLocalVideo() {\n      this.localStream_.muteVideo();\n    }\n  }, {\n    key: \"unmuteLocalVideo\",\n    value: function unmuteLocalVideo() {\n      this.localStream_.unmuteVideo();\n    }\n  }, {\n    key: \"createLocalStream\",\n    value: function () {\n      var _createLocalStream = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(options) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this.localStream_ = TRTC.createStream({\n                  audio: options.audio,\n                  // 采集麦克风\n                  video: options.video,\n                  // 采集摄像头\n                  userId: this.userId_ // cameraId: getCameraId(),\n                  // microphoneId: getMicrophoneId()\n\n                }); // 设置视频分辨率帧率和码率\n\n                this.localStream_.setVideoProfile('480p');\n                _context5.next = 4;\n                return this.localStream_.initialize();\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function createLocalStream(_x2) {\n        return _createLocalStream.apply(this, arguments);\n      }\n\n      return createLocalStream;\n    }()\n  }, {\n    key: \"handleEvents\",\n    value: function handleEvents() {\n      var _this = this;\n\n      // 处理 client 错误事件，错误均为不可恢复错误，建议提示用户后刷新页面\n      this.client_.on('error', function () {// alert(err);\n        // location.reload();\n      }); // 处理用户被踢事件，通常是因为房间内有同名用户引起，这种问题一般是应用层逻辑错误引起的\n      // 应用层请尽量使用不同用户ID进房\n\n      this.client_.on('client-banned', function () {// location.reload();\n      }); // 远端用户进房通知 - 仅限主动推流用户\n\n      this.client_.on('peer-join', function (evt) {\n        var userId = evt.userId;\n        console.log('peer-join ' + userId);\n      }); // 远端用户退房通知 - 仅限主动推流用户\n\n      this.client_.on('peer-leave', function (evt) {\n        var userId = evt.userId;\n        window.dispatchEvent(new Event('leave'));\n        console.log('peer-leave ' + userId);\n      }); // 处理远端流增加事件\n\n      this.client_.on('stream-added', function (evt) {\n        var remoteStream = evt.stream;\n        var id = remoteStream.getId();\n        var userId = remoteStream.getUserId();\n        console.log(\"remote stream added: [\".concat(userId, \"] ID: \").concat(id, \" type: \").concat(remoteStream.getType()));\n        console.log('subscribe to this remote stream'); // 远端流默认已订阅所有音视频，此处可指定只订阅音频或者音视频，不能仅订阅视频。\n        // 如果不想观看该路远端流，可调用 this.client_.unsubscribe(remoteStream) 取消订阅\n\n        _this.client_.subscribe(remoteStream);\n      }); // 远端流订阅成功事件\n\n      this.client_.on('stream-subscribed', function (evt) {\n        var remoteStream = evt.stream;\n        var id = remoteStream.getId();\n\n        _this.remoteStreams_.push(remoteStream);\n\n        try {\n          document.getElementsByName('remote')[0].setAttribute('id', id);\n          remoteStream.play(id); // 在指定的 div 容器上播放音视频\n        } catch (e) {}\n\n        console.log('stream-subscribed ID: ', id);\n      }); // 处理远端流被删除事件\n\n      this.client_.on('stream-removed', function (evt) {\n        var remoteStream = evt.stream;\n        var id = remoteStream.getId(); // 关闭远端流内部的音视频播放器\n\n        remoteStream.stop();\n        _this.remoteStreams_ = _this.remoteStreams_.filter(function (stream) {\n          return stream.getId() !== id;\n        });\n        console.log(\"stream-removed ID: \".concat(id, \"  type: \").concat(remoteStream.getType()));\n      }); // 处理远端流更新事件，在音视频通话过程中，远端流音频或视频可能会有更新\n\n      this.client_.on('stream-updated', function (evt) {\n        var remoteStream = evt.stream;\n        console.log('type: ' + remoteStream.getType() + ' stream-updated hasAudio: ' + remoteStream.hasAudio() + ' hasVideo: ' + remoteStream.hasVideo());\n      }); // 远端流音频或视频mute状态通知\n\n      this.client_.on('mute-audio', function (evt) {\n        console.log(evt.userId + ' mute audio');\n      });\n      this.client_.on('unmute-audio', function (evt) {\n        console.log(evt.userId + ' unmute audio');\n      });\n      this.client_.on('mute-video', function (evt) {\n        console.log(evt.userId + ' mute video');\n      });\n      this.client_.on('unmute-video', function (evt) {\n        console.log(evt.userId + ' unmute video');\n      }); // 信令通道连接状态通知\n\n      this.client_.on('connection-state-changed', function (evt) {\n        console.log(\"RtcClient state changed to \".concat(evt.state, \" from \").concat(evt.prevState));\n      });\n    }\n  }]);\n\n  return RtcClient;\n}();\n\nexport default RtcClient;",null]}