{"remainingRequest":"D:\\HCI\\github\\node_modules\\thread-loader\\dist\\cjs.js!D:\\HCI\\github\\node_modules\\babel-loader\\lib\\index.js!D:\\HCI\\github\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\HCI\\github\\src\\store\\index.js","dependencies":[{"path":"D:\\HCI\\github\\src\\store\\index.js","mtime":1593418846944},{"path":"D:\\HCI\\github\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589122691350},{"path":"D:\\HCI\\github\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1589122702323},{"path":"D:\\HCI\\github\\node_modules\\babel-loader\\lib\\index.js","mtime":1589122690916},{"path":"D:\\HCI\\github\\node_modules\\eslint-loader\\index.js","mtime":1589122694623}],"contextDependencies":[],"result":["import _Message2 from \"element-ui/lib/theme-chalk/message.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Message from \"element-ui/lib/message\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.map\";\nimport \"core-js/modules/es6.number.constructor\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport conversation from \"./modules/conversation\";\nimport group from \"./modules/group\";\nimport user from \"./modules/user\";\nimport video from \"./modules/video\";\nimport friend from \"./modules/friend\";\nimport blacklist from \"./modules/blacklist\";\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    current: Date.now(),\n    // 当前时间\n    intervalID: 0,\n    message: undefined,\n    currentRoom: {},\n    currentRoomId: '',\n    currentVideoRoomId: Number,\n    isRecording: false,\n    isPresenting: false,\n    beginRecordingTime: Number,\n    barrages: new Map(),\n    priorBarrages: new Map()\n  },\n  getters: {\n    hidden: function hidden(state) {\n      // eslint-disable-next-line no-unused-vars\n      var temp = state.current;\n\n      if (typeof document.hasFocus !== 'function') {\n        return document.hidden;\n      }\n\n      return !document.hasFocus();\n    },\n    getRecordingState: function getRecordingState(state) {\n      return state.isRecording;\n    },\n    getRecordingBeginTime: function getRecordingBeginTime(state) {\n      return state.beginRecordingTime;\n    },\n    getCurrentVideoId: function getCurrentVideoId(state) {\n      return state.currentVideoRoomId;\n    },\n    getBarrages: function getBarrages(state) {\n      return state.barrages;\n    },\n    getPriorBarrages: function getPriorBarrages(state) {\n      return state.priorBarrages;\n    },\n    getPresentingState: function getPresentingState(state) {\n      return state.isPresenting;\n    }\n  },\n  mutations: {\n    startComputeCurrent: function startComputeCurrent(state) {\n      state.intervalID = setInterval(function () {\n        state.current = Date.now();\n      }, 500);\n    },\n    stopComputeCurrent: function stopComputeCurrent(state) {\n      clearInterval(state.intervalID);\n      state.intervalID = 0;\n    },\n    showMessage: function showMessage(state, options) {\n      if (state.message) {\n        state.message.close();\n      }\n\n      state.message = _Message({\n        message: options.message,\n        type: options.type || 'success',\n        duration: options.duration || 2000,\n        offset: 40\n      });\n    },\n    changeRoom: function changeRoom(state, room) {\n      state.currentRoom = room;\n    },\n    changeRoomId: function changeRoomId(state, roomId) {\n      state.currentRoomId = roomId;\n    },\n    setRecordState: function setRecordState(state, isrecording) {\n      state.isRecording = isrecording;\n    },\n    setPresentState: function setPresentState(state, ispresenting) {\n      state.isPresenting = ispresenting;\n    },\n    setBeginRecordTime: function setBeginRecordTime(state) {\n      state.beginRecordingTime = Date.now();\n    },\n    setVideoRoomId: function setVideoRoomId(state, videoFileId) {\n      var fileid = new Number(parseInt(videoFileId, 10));\n      state.currentVideoRoomId = fileid & 0xffffff;\n      console.log(state.currentVideoRoomId);\n    },\n    addBarrage: function addBarrage(state, barrageContent) {\n      var time = Date.now() - state.beginRecordingTime;\n      state.barrages[time] = barrageContent;\n      console.log(state.barrages);\n    },\n    clearBarrage: function clearBarrage(state) {\n      state.barrages = new Map();\n    },\n    setPriorBarrage: function setPriorBarrage(state, barrageList) {\n      state.priorBarrages = barrageList;\n    }\n  },\n  modules: {\n    conversation: conversation,\n    group: group,\n    friend: friend,\n    blacklist: blacklist,\n    user: user,\n    video: video\n  }\n});",null]}