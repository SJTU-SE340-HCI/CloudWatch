{"remainingRequest":"D:\\HCI\\CloudWatch\\node_modules\\babel-loader\\lib\\index.js!D:\\HCI\\CloudWatch\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\HCI\\CloudWatch\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\HCI\\CloudWatch\\src\\components\\conversation\\conversation-item.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\HCI\\CloudWatch\\src\\components\\conversation\\conversation-item.vue","mtime":1589001011120},{"path":"D:\\HCI\\CloudWatch\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589000993815},{"path":"D:\\HCI\\CloudWatch\\node_modules\\babel-loader\\lib\\index.js","mtime":1589000993275},{"path":"D:\\HCI\\CloudWatch\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589000993815},{"path":"D:\\HCI\\CloudWatch\\node_modules\\vue-loader\\lib\\index.js","mtime":1589001009411}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"D:\\\\HCI\\\\CloudWatch\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters, mapState } from 'vuex';\nimport { isToday, getDate, getTime } from \"../../utils/date\";\nexport default {\n  name: 'conversation-item',\n  props: ['conversation'],\n  data: function data() {\n    return {\n      popoverVisible: false,\n      hasMessageAtMe: false\n    };\n  },\n  computed: _objectSpread({\n    showUnreadCount: function showUnreadCount() {\n      if (this.$store.getters.hidden) {\n        return this.conversation.unreadCount > 0;\n      } // 是否显示未读计数。当前会话和未读计数为0的会话，不显示。\n\n\n      return this.currentConversation.conversationID !== this.conversation.conversationID && this.conversation.unreadCount > 0;\n    },\n    date: function date() {\n      if (!this.conversation.lastMessage || !this.conversation.lastMessage.lastTime) {\n        return '';\n      }\n\n      var date = new Date(this.conversation.lastMessage.lastTime * 1000);\n\n      if (isToday(date)) {\n        return getTime(date);\n      }\n\n      return getDate(date);\n    },\n    avatar: function avatar() {\n      switch (this.conversation.type) {\n        case 'GROUP':\n          return this.conversation.groupProfile.avatar;\n\n        case 'C2C':\n          return this.conversation.userProfile.avatar;\n\n        default:\n          return '';\n      }\n    },\n    conversationName: function conversationName() {\n      if (this.conversation.type === this.TIM.TYPES.CONV_C2C) {\n        return this.conversation.userProfile.nick || this.conversation.userProfile.userID;\n      }\n\n      if (this.conversation.type === this.TIM.TYPES.CONV_GROUP) {\n        return this.conversation.groupProfile.name || this.conversation.groupProfile.groupID;\n      }\n\n      if (this.conversation.type === this.TIM.TYPES.CONV_SYSTEM) {\n        return '系统通知';\n      }\n\n      return '';\n    },\n    showGrayBadge: function showGrayBadge() {\n      if (this.conversation.type !== this.TIM.TYPES.CONV_GROUP) {\n        return false;\n      }\n\n      return this.conversation.groupProfile.selfInfo.messageRemindType === 'AcceptNotNotify';\n    },\n    messageForShow: function messageForShow() {\n      if (this.conversation.lastMessage.isRevoked) {\n        if (this.conversation.lastMessage.fromAccount === this.currentUserProfile.userID) {\n          return '你撤回了一条消息';\n        }\n\n        if (this.conversation.type === this.TIM.TYPES.CONV_C2C) {\n          return '对方撤回了一条消息';\n        }\n\n        return \"\".concat(this.conversation.lastMessage.fromAccount, \"\\u64A4\\u56DE\\u4E86\\u4E00\\u6761\\u6D88\\u606F\");\n      }\n\n      return this.conversation.lastMessage.messageForShow;\n    }\n  }, mapState({\n    currentConversation: function currentConversation(state) {\n      return state.conversation.currentConversation;\n    },\n    currentUserProfile: function currentUserProfile(state) {\n      return state.user.currentUserProfile;\n    }\n  }), {}, mapGetters(['toAccount'])),\n  mounted: function mounted() {\n    var _this = this;\n\n    this.$bus.$on('new-messsage-at-me', function (event) {\n      if (event.data.conversationID === _this.conversation.conversationID && _this.conversation.conversationID !== _this.currentConversation.conversationID) {\n        _this.hasMessageAtMe = true;\n      }\n    });\n  },\n  methods: {\n    selectConversation: function selectConversation() {\n      if (this.conversation.conversationID !== this.currentConversation.conversationID) {\n        this.$store.dispatch('checkoutConversation', this.conversation.conversationID);\n      }\n    },\n    deleteConversation: function deleteConversation(event) {\n      var _this2 = this;\n\n      // 停止冒泡，避免和点击会话的事件冲突\n      event.stopPropagation();\n      this.tim.deleteConversation(this.conversation.conversationID).then(function () {\n        _this2.$store.commit('showMessage', {\n          message: \"\\u4F1A\\u8BDD\\u3010\".concat(_this2.conversationName, \"\\u3011\\u5220\\u9664\\u6210\\u529F!\"),\n          type: 'success'\n        });\n\n        _this2.popoverVisible = false;\n\n        _this2.$store.commit('resetCurrentConversation');\n      }).catch(function (error) {\n        _this2.$store.commit('showMessage', {\n          message: \"\\u4F1A\\u8BDD\\u3010\".concat(_this2.conversationName, \"\\u3011\\u5220\\u9664\\u5931\\u8D25!, error=\").concat(error.message),\n          type: 'error'\n        });\n\n        _this2.popoverVisible = false;\n      });\n    },\n    showContextMenu: function showContextMenu() {\n      this.popoverVisible = true;\n    }\n  },\n  watch: {\n    currentConversation: function currentConversation(next) {\n      if (next.conversationID === this.conversation.conversationID) {\n        this.hasMessageAtMe = false;\n      }\n    }\n  }\n};",{"version":3,"sources":["conversation-item.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div\r\n        class=\"conversation-item-container\"\r\n        :class=\"{ 'choose': conversation.conversationID === currentConversation.conversationID }\"\r\n        @click=\"selectConversation\"\r\n    >\r\n      <div class=\"close-btn\">\r\n        <span class=\"tim-icon-close\" title=\"删除会话\" @click=\"deleteConversation\"></span>\r\n      </div>\r\n      <div class=\"warp\">\r\n        <avatar :src=\"avatar\" :type=\"conversation.type\" />\r\n        <div class=\"content\">\r\n          <div class=\"row-1\">\r\n            <div class=\"name\">\r\n              <div class=\"text-ellipsis\">\r\n                <span :title=\"conversation.userProfile.nick || conversation.userProfile.userID\"\r\n                  v-if=\"conversation.type ===  TIM.TYPES.CONV_C2C\"\r\n                  >{{conversation.userProfile.nick || conversation.userProfile.userID}}\r\n                </span>\r\n                <span :title=\"conversation.groupProfile.name || conversation.groupProfile.groupID\"\r\n                  v-else-if=\"conversation.type ===  TIM.TYPES.CONV_GROUP\"\r\n                  >{{conversation.groupProfile.name || conversation.groupProfile.groupID}}\r\n                </span>\r\n                <span\r\n                  v-else-if=\"conversation.type === TIM.TYPES.CONV_SYSTEM\"\r\n                  >系统通知\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div class=\"unread-count\">\r\n              <span class=\"badge\" v-if=\"showUnreadCount\">\r\n                {{conversation.unreadCount > 99 ? '99+' : conversation.unreadCount}}\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div class=\"row-2\">\r\n            <div class=\"summary\">\r\n              <div v-if=\"conversation.lastMessage\" class=\"text-ellipsis\">\r\n                <span class=\"remind\" style=\"color:red;\" v-if=\"hasMessageAtMe\">[有人提到我]</span>\r\n                <span class=\"text\" :title=\"conversation.lastMessage.messageForShow\">\r\n                  {{messageForShow}}\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div class=\"date\">\r\n              {{date}}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters, mapState } from 'vuex'\r\nimport { isToday, getDate, getTime } from '../../utils/date'\r\nexport default {\r\n  name: 'conversation-item',\r\n  props: ['conversation'],\r\n  data() {\r\n    return {\r\n      popoverVisible: false,\r\n      hasMessageAtMe: false\r\n    }\r\n  },\r\n  computed: {\r\n    showUnreadCount() {\r\n      if (this.$store.getters.hidden) {\r\n        return this.conversation.unreadCount > 0\r\n      }\r\n      // 是否显示未读计数。当前会话和未读计数为0的会话，不显示。\r\n      return (\r\n        this.currentConversation.conversationID !==\r\n          this.conversation.conversationID && this.conversation.unreadCount > 0\r\n      )\r\n    },\r\n    date() {\r\n      if (\r\n        !this.conversation.lastMessage ||\r\n        !this.conversation.lastMessage.lastTime\r\n      ) {\r\n        return ''\r\n      }\r\n      const date = new Date(this.conversation.lastMessage.lastTime * 1000)\r\n      if (isToday(date)) {\r\n        return getTime(date)\r\n      }\r\n      return getDate(date)\r\n    },\r\n    avatar: function() {\r\n      switch (this.conversation.type) {\r\n        case 'GROUP':\r\n          return this.conversation.groupProfile.avatar\r\n        case 'C2C':\r\n          return this.conversation.userProfile.avatar\r\n        default:\r\n          return ''\r\n      }\r\n    },\r\n    conversationName: function() {\r\n      if (this.conversation.type === this.TIM.TYPES.CONV_C2C) {\r\n        return this.conversation.userProfile.nick || this.conversation.userProfile.userID\r\n      }\r\n      if (this.conversation.type === this.TIM.TYPES.CONV_GROUP) {\r\n        return this.conversation.groupProfile.name || this.conversation.groupProfile.groupID\r\n      }\r\n      if (this.conversation.type === this.TIM.TYPES.CONV_SYSTEM) {\r\n        return '系统通知'\r\n      }\r\n      return ''\r\n    },\r\n    showGrayBadge() {\r\n      if (this.conversation.type !== this.TIM.TYPES.CONV_GROUP) {\r\n        return false\r\n      }\r\n      return (\r\n        this.conversation.groupProfile.selfInfo.messageRemindType ===\r\n        'AcceptNotNotify'\r\n      )\r\n    },\r\n    messageForShow() {\r\n      if (this.conversation.lastMessage.isRevoked) {\r\n        if (this.conversation.lastMessage.fromAccount === this.currentUserProfile.userID) {\r\n          return '你撤回了一条消息'\r\n        }\r\n        if (this.conversation.type === this.TIM.TYPES.CONV_C2C) {\r\n          return '对方撤回了一条消息'\r\n        }\r\n        return `${this.conversation.lastMessage.fromAccount}撤回了一条消息`\r\n      }\r\n      return this.conversation.lastMessage.messageForShow\r\n    },\r\n    ...mapState({\r\n      currentConversation: state => state.conversation.currentConversation,\r\n      currentUserProfile: state => state.user.currentUserProfile\r\n    }),\r\n    ...mapGetters(['toAccount'])\r\n  },\r\n  mounted() {\r\n    this.$bus.$on('new-messsage-at-me', event => {\r\n      if (\r\n        event.data.conversationID === this.conversation.conversationID &&\r\n        this.conversation.conversationID !==\r\n          this.currentConversation.conversationID\r\n      ) {\r\n        this.hasMessageAtMe = true\r\n      }\r\n    })\r\n  },\r\n  methods: {\r\n    selectConversation() {\r\n      if (this.conversation.conversationID !== this.currentConversation.conversationID) {\r\n        this.$store.dispatch(\r\n          'checkoutConversation',\r\n          this.conversation.conversationID\r\n        )\r\n      }\r\n    },\r\n    deleteConversation(event) {\r\n      // 停止冒泡，避免和点击会话的事件冲突\r\n      event.stopPropagation()\r\n      this.tim\r\n        .deleteConversation(this.conversation.conversationID)\r\n        .then(() => {\r\n          this.$store.commit('showMessage', {\r\n            message: `会话【${this.conversationName}】删除成功!`,\r\n            type: 'success'\r\n          })\r\n          this.popoverVisible = false\r\n          this.$store.commit('resetCurrentConversation')\r\n        })\r\n        .catch(error => {\r\n          this.$store.commit('showMessage', {\r\n            message: `会话【${this.conversationName}】删除失败!, error=${error.message}`,\r\n            type: 'error'\r\n          })\r\n          this.popoverVisible = false\r\n        })\r\n    },\r\n    showContextMenu() {\r\n      this.popoverVisible = true\r\n    },\r\n  },\r\n  watch: {\r\n    currentConversation(next) {\r\n      if (next.conversationID === this.conversation.conversationID) {\r\n        this.hasMessageAtMe = false\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"stylus\" scoped>\r\n\r\n\r\n.conversation-item-container\r\n  padding 15px 20px\r\n  cursor pointer\r\n  position relative\r\n  overflow hidden\r\n  transition .2s\r\n  // &:first-child\r\n  //   padding-top 30px\r\n  &:hover\r\n    background-color $background\r\n    .close-btn\r\n      right 3px\r\n  .close-btn\r\n    position absolute\r\n    right -20px\r\n    top 3px\r\n    color $font-dark\r\n    transition: all .2s ease;\r\n    &:hover\r\n      color $danger\r\n  .warp\r\n    display flex\r\n  .avatar\r\n    width 40px\r\n    height 40px\r\n    margin-right 10px\r\n    border-radius 50%\r\n    flex-shrink 0\r\n  .content\r\n    flex 1\r\n    height 40px\r\n    overflow hidden\r\n    .row-1\r\n      display flex\r\n      line-height 21px\r\n      .name\r\n        color $font-light\r\n        flex 1\r\n        min-width 0px\r\n      .unread-count\r\n        padding-left 10px\r\n        flex-shrink 0\r\n        color $font-dark\r\n        font-size 12px\r\n        .badge\r\n          vertical-align bottom\r\n          background-color $danger\r\n          border-radius 10px\r\n          color #FFF\r\n          display inline-block\r\n          font-size 12px\r\n          height 18px\r\n          max-width 40px\r\n          line-height 18px\r\n          padding 0 6px\r\n          text-align center\r\n          white-space nowrap\r\n    .row-2\r\n      display flex\r\n      font-size 12px\r\n      padding-top 3px\r\n      .summary\r\n        flex 1\r\n        overflow hidden\r\n        min-width 0px\r\n        color: $secondary\r\n        .remind\r\n          color $danger\r\n      .date\r\n        padding-left 10px\r\n        flex-shrink 0\r\n        text-align right\r\n        color $font-dark\r\n.choose {\r\n  background-color: $background;\r\n}\r\n.context-menu-button {\r\n  padding: 10px\r\n  border: 2px solid $primary;\r\n  border-radius: 8px;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/conversation"}]}